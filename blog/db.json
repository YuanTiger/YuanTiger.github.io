{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"f75ae740cf5cec9f4115fcabc01301bc315a0381","modified":1535102475000},{"_id":"themes/next/.DS_Store","hash":"0718f52301eaa1e005a56e8fe9d6fbe7fc16c6f1","modified":1535102143000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1535099602000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1535099602000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1535099602000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1535099602000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1535099602000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1535099602000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1535099602000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1535099602000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1535099602000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1535099602000},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1535099602000},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1535099602000},{"_id":"themes/next/_config.yml","hash":"fbccaf1a456a4a35bc78162d9b32e4e7e6b46f99","modified":1535102649000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1535099602000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1535099602000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1535099602000},{"_id":"source/_posts/.DS_Store","hash":"f27bec6d6b30ef558d903a61e66f66e3ca470821","modified":1535098995000},{"_id":"source/_posts/Android-EditText-card-limit.md","hash":"821843fe784480cbfd5467f0a075e0dfaada25ca","modified":1535103388000},{"_id":"source/_posts/Android-Handler.md","hash":"cb4f9444c7ecfe4e9298067b1277327d7e982674","modified":1535103388000},{"_id":"source/_posts/Android-Photo-Select.md","hash":"b1408a93aba6c6ff9f25f7604c6e13493fa182d3","modified":1535103388000},{"_id":"source/_posts/Android-Premission-Manger.md","hash":"9a0928ebfe3aaffcd1ed80b51878abc14721d9dd","modified":1535103388000},{"_id":"source/_posts/Android_Interview-Experience.md","hash":"f3c7a38d91a8beab8851f022435753c8b68a6984","modified":1535103388000},{"_id":"source/_posts/Android_even_distribution.md","hash":"3845e560700a6c30113831c5bb3e0ebb86f85127","modified":1535103388000},{"_id":"source/_posts/Builder-Dialog.md","hash":"a85356ba1d973e6c2b3961c1d63369ae33308051","modified":1535103388000},{"_id":"source/_posts/Design-Abs-Factory.md","hash":"65638f4aa4178fd1cbc03eea212041fd631e4931","modified":1535103388000},{"_id":"source/_posts/Design-Builder.md","hash":"67d400109a01eaf854d481ab370a2b1fc0f07b01","modified":1535103388000},{"_id":"source/_posts/Design-Catalog.md","hash":"dda21e6bc196cfd6d3a9ecae86fb1ebd1f7d77ef","modified":1535103388000},{"_id":"source/_posts/Design-Clone.md","hash":"e1ff9de0ca3d9feb5ddb70d175db2a56fce05f5f","modified":1535103388000},{"_id":"source/_posts/Design-Factory.md","hash":"1248beb332183c6681ebb6ae402523ed119e7497","modified":1535103388000},{"_id":"source/_posts/Design-Responsibility.md","hash":"13692a45f634664c608f6a7647ca0828c14517d7","modified":1535103388000},{"_id":"source/_posts/Design-Single.md","hash":"9e08318c60bca1954c22cd08a84f47aa3ca45499","modified":1535103388000},{"_id":"source/_posts/Design-State.md","hash":"e0213e035722af6d57dd03646f22ed16eb4e65af","modified":1535103388000},{"_id":"source/_posts/Design-Strategy.md","hash":"02054a2626edb052dcac7afcd9ad9c45a87af680","modified":1535103388000},{"_id":"source/_posts/Google-IO-2017.md","hash":"3f507927e893930b0aced55a1bdf8251fc3a7c93","modified":1535103388000},{"_id":"source/_posts/Hello_GitHub+Hexo.md","hash":"bb27aac28a50960d7f51feda1bff2a3080eeee3b","modified":1535103388000},{"_id":"source/_posts/JD-Server-Use-Explain-0.md","hash":"4f21f4586ea33717047f5f8cb93b2bc3e628d493","modified":1535103388000},{"_id":"source/_posts/JD-Server-Use-Explain-1.md","hash":"5cd942ba5c29a169462ecf1965ffc798c5f8d129","modified":1535103388000},{"_id":"source/_posts/Java_understanding-OO.md","hash":"81bc0593ea29705216c1316818b3e6989629b787","modified":1535103388000},{"_id":"source/about/.DS_Store","hash":"8208a60b8feacf7ffb9395ac09bc39029f5b3898","modified":1535102475000},{"_id":"source/about/index.md","hash":"5d769505f0fb2d7ad9aaf57a130a77a8be56f6b7","modified":1535103388000},{"_id":"source/images/.DS_Store","hash":"ce1784551ee0035b438e8b5f337f99cf40604ebb","modified":1535100338000},{"_id":"source/images/avatar.png","hash":"76aa8678945e5b649f71c980d1a8b17fa1e3ed86","modified":1535103388000},{"_id":"source/tags/.DS_Store","hash":"4b1737e2d95536850ac239b97c1d4b1deae9a602","modified":1535101307000},{"_id":"source/tags/index.md","hash":"8ae70db8c6af4e32ec42364e1a0b70ebc3545931","modified":1535103388000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1535099602000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1535099602000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1535099547000},{"_id":"themes/next/.git/index","hash":"21b7afdffd066ac0b1a12a943fa9ea736b4b4985","modified":1535099603000},{"_id":"themes/next/.git/packed-refs","hash":"8e36811256ee380c2c65692f1b8f8e77c5bc33c9","modified":1535099602000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1535099602000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1535099602000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1535099602000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1535099602000},{"_id":"themes/next/languages/.DS_Store","hash":"53d3ecedb6f3c90b9da21da2af348ff188bc81e8","modified":1535101035000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1535099602000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1535099602000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1535099602000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1535099602000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1535099602000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1535099602000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1535099602000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1535099602000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1535099602000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1535099602000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1535099602000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1535099602000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1535099602000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1535099602000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1535099602000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1535099602000},{"_id":"themes/next/layout/.DS_Store","hash":"380e1cb58b47809285233dc3518a47ead40ee78d","modified":1535100875000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1535099602000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1535099602000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1535099602000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1535099602000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1535099602000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1535099602000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1535099602000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1535099602000},{"_id":"themes/next/scripts/.DS_Store","hash":"10515f1c1fce59ab29c5e2f8add4b3ce2d4e08f4","modified":1535101150000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1535099603000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1535099603000},{"_id":"themes/next/source/.DS_Store","hash":"bb969907bd629632bc52d57beee54510d51af3b7","modified":1535101684000},{"_id":"themes/next/source/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1535101832000},{"_id":"themes/next/test/.DS_Store","hash":"86aaef889514f63213877b6166c2177fd70fc322","modified":1535101084000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1535099603000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1535099603000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1535099603000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535099603000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1535099547000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1535099547000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1535099547000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1535099547000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1535099547000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1535099547000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1535099547000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1535099547000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1535099547000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1535099547000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1535099547000},{"_id":"themes/next/.git/logs/HEAD","hash":"9981f09ec26dbf7dcaa7f6c3ab26fd7c625fa63e","modified":1535099602000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1535099602000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1535099602000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1535099602000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1535099602000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1535099602000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1535099602000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1535099602000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1535099602000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1535099602000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1535099602000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1535099602000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1535099602000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1535099602000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1535099602000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1535099602000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1535099602000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1535099602000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1535099602000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1535099602000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1535099602000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1535099602000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1535099602000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1535099602000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1535099602000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1535099602000},{"_id":"themes/next/scripts/tags/.DS_Store","hash":"2778bc7668b46f146f807494b8a13410cd02f618","modified":1535101005000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1535099603000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1535099603000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1535099603000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1535099603000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1535099603000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1535099603000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1535099603000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1535099603000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1535099603000},{"_id":"themes/next/source/css/.DS_Store","hash":"e006b12670ce2936e381d5cf035fc921038f18c2","modified":1535101077000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1535099603000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1535099603000},{"_id":"themes/next/source/images/.DS_Store","hash":"bc05e945e98412eff14e910c0f46b6ce477ae925","modified":1535101077000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1535099603000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1535099603000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1535099603000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1535099603000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1535099603000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1535099603000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1535099603000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1535099603000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1535099603000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1535099603000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1535099603000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1535099603000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1535099603000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1535099603000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1535099603000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1535099603000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1535099603000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535099602000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535099602000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535099603000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535099603000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535099603000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535099603000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535099603000},{"_id":"themes/next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1535099602000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1535099602000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1535099602000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1535099602000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1535099602000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1535099602000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1535099602000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1535099602000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1535099602000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1535099602000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1535099602000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1535099602000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1535099602000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1535099602000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1535099602000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1535099602000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1535099602000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1535099602000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1535099602000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1535099602000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1535099602000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1535099602000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1535099602000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1535099602000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1535099602000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1535099602000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1535099602000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1535099602000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1535099602000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1535099602000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1535099602000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1535099602000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1535099602000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1535099602000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1535099602000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1535099602000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1535099602000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1535099602000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1535099602000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1535099603000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1535099603000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1535099603000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1535099603000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1535099603000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1535099603000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1535099603000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1535099603000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1535099603000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1535099603000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1535099603000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1535099603000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1535099603000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1535099603000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1535099603000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1535099603000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1535099603000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1535099603000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1535099603000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1535099603000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1535099603000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1535099603000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1535099603000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1535099603000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1535099603000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1535099603000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1535099603000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1535099603000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1535099603000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1535099603000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1535099603000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1535099603000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1535099603000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1535099603000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1535099603000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1535099603000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1535099603000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1535099603000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1535099603000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1535099603000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1535099603000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1535099603000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1535099603000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1535099603000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1535099603000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1535099603000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1535099603000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1535099603000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1535099603000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1535099603000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1535099603000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1535099603000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1535099603000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1535099603000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1535099603000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1535099603000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1535099603000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1535099603000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1535099603000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1535099603000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1535099603000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1535099603000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1535099603000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1535099603000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1535099603000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1535099603000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"9981f09ec26dbf7dcaa7f6c3ab26fd7c625fa63e","modified":1535099602000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1535099602000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1535099602000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1535099602000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1535099603000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1535099603000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1535099603000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1535099603000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1535099603000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1535099603000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1535099603000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1535099603000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1535099603000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1535099603000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1535099603000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1535099603000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1535099603000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1535099603000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1535099603000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1535099603000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1535099603000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1535099603000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1535099603000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1535099603000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1535099603000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1535099603000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1535099603000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1535099603000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1535099603000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1535099603000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1535099603000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1535099603000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1535099603000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1535099603000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1535099603000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1535099603000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1535099603000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1535099603000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1535099603000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1535099603000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1535099603000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1535099603000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1535099603000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1535099603000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1535099603000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1535099603000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1535099603000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1535099603000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1535099603000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1535099603000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1535099603000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1535099603000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1535099603000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1535099603000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1535099603000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"9981f09ec26dbf7dcaa7f6c3ab26fd7c625fa63e","modified":1535099602000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1535099603000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1535099603000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1535099603000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1535099603000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1535099603000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1535099603000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1535099603000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1535099603000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1535099603000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1535099603000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1535099603000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1535099603000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1535099603000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1535099603000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1535099603000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1535099603000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1535099603000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1535099603000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1535099603000},{"_id":"themes/next/.git/objects/pack/pack-c612b977fdee8f070a000761134eeb6350850a38.idx","hash":"baccc333989b5a1b1719965c6c3a9891cce61ff6","modified":1535099602000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1535099603000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1535099603000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1535099603000},{"_id":"themes/next/.git/objects/pack/pack-c612b977fdee8f070a000761134eeb6350850a38.pack","hash":"1310fd9358c94811f585a7fa3724d7431f130898","modified":1535099602000},{"_id":"public/about/index.html","hash":"e928affa8d7222828031a3d47782d3f80df95094","modified":1535103406015},{"_id":"public/tags/index.html","hash":"5a178e211c9aebee760ae75f010754631e9d09b6","modified":1535103406015},{"_id":"public/2017/05/31/Design-Catalog/index.html","hash":"354b1ed62c79f6002edb9e06c3a2da99d84a4323","modified":1535103406015},{"_id":"public/2017/05/03/Hello_GitHub+Hexo/index.html","hash":"e752aafc927ce7c65b74d489faad188e28a3a067","modified":1535103406015},{"_id":"public/archives/page/3/index.html","hash":"8803693caae0512776041a307b19ee8e8621f041","modified":1535103406015},{"_id":"public/archives/2017/page/3/index.html","hash":"e235ca62c56a43437f751e314da7dcd50ebbe746","modified":1535103406015},{"_id":"public/archives/2017/07/index.html","hash":"6ffcd281dea8b995be209b9827a720ead164c8a4","modified":1535103406015},{"_id":"public/archives/2017/08/index.html","hash":"b3039841b92c0584b05ce93a1761ece4ae781d61","modified":1535103406015},{"_id":"public/archives/2017/11/index.html","hash":"460b132ceb5a93683f5bdfce9e94e7c87119d8e2","modified":1535103406015},{"_id":"public/page/3/index.html","hash":"b5cc79e56901c8f99a1b026bca700310049c9e88","modified":1535103406015},{"_id":"public/tags/Android/index.html","hash":"6c2a38984210465b5d4295489189d7a9b529844a","modified":1535103406015},{"_id":"public/tags/效果/index.html","hash":"7046099ff84389d0134ce85d9bbe6a9ac306432e","modified":1535103406015},{"_id":"public/tags/原理/index.html","hash":"ccebfb4d2530e3b5ecc554cc3b3b936f4c90ce22","modified":1535103406016},{"_id":"public/tags/Java/index.html","hash":"7bc15f25556e1e01c8e3def44ae2f61814433499","modified":1535103406016},{"_id":"public/tags/编程思想/page/2/index.html","hash":"f2ab44021d0ec732267b621e8d7803db42143468","modified":1535103406016},{"_id":"public/tags/Google/index.html","hash":"d16e4f373159cbcb5d1322dcfffa26df4f2febe2","modified":1535103406016},{"_id":"public/tags/服务器/index.html","hash":"b589e76ca993a697866fbaa7c094773c98accfd0","modified":1535103406016},{"_id":"public/tags/SSH/index.html","hash":"7b1a73b2445c30d87ee538ba984c3e6f622be989","modified":1535103406016},{"_id":"public/2017/11/16/Design-Responsibility/index.html","hash":"0e2de663b30ed5b7d635699846bd0c37bac74cea","modified":1535103406016},{"_id":"public/2017/11/14/Design-State/index.html","hash":"2c307b17f8434266809fb6e9664185500298135e","modified":1535103406016},{"_id":"public/2017/08/24/JD-Server-Use-Explain-1/index.html","hash":"b8487d16434dd65323cb241db30ff59e7bf68298","modified":1535103406016},{"_id":"public/2017/08/23/JD-Server-Use-Explain-0/index.html","hash":"86d1dc23901d342e0cae9ef141b0a8cb2c61f7af","modified":1535103406016},{"_id":"public/2017/08/02/Design-Strategy/index.html","hash":"528bf8a5b9f03f9d827e79762896591349dfce1e","modified":1535103406016},{"_id":"public/2017/08/02/Design-Abs-Factory/index.html","hash":"9b58264760cd09b38ab48b93c97f662716d8023e","modified":1535103406017},{"_id":"public/2017/07/27/Android-Photo-Select/index.html","hash":"e04b0bf5c51e46e83c9dc966a25791234e2c1dae","modified":1535103406017},{"_id":"public/2017/07/25/Android_Interview-Experience/index.html","hash":"8def4f055e8641976e578437525d43b49259d391","modified":1535103406017},{"_id":"public/2017/07/24/Design-Factory/index.html","hash":"82f7f48961c1b1b13bc26048df2c10b24257331a","modified":1535103406017},{"_id":"public/2017/07/15/Design-Clone/index.html","hash":"bef4e0668806c0c59fff5b0ad26d9df10255216e","modified":1535103406017},{"_id":"public/2017/07/11/Builder-Dialog/index.html","hash":"ac2a669a66474e986e4d6767357e4ea5cc389b8e","modified":1535103406017},{"_id":"public/2017/07/05/Design-Builder/index.html","hash":"8bdeab9346515eb32bc8dbf2a0d93ecc0d328852","modified":1535103406017},{"_id":"public/2017/05/27/Design-Single/index.html","hash":"8de436c6b6c21b21e81ac9825367b1e2b19b9602","modified":1535103406017},{"_id":"public/2017/05/23/Google-IO-2017/index.html","hash":"d943ab368c30a1ec7d174fc9e92beef0a257d780","modified":1535103406017},{"_id":"public/2017/05/19/Android-EditText-card-limit/index.html","hash":"10a411de96042e754d98ce4bf99036520f9a6e58","modified":1535103406017},{"_id":"public/2017/05/15/Android-Handler/index.html","hash":"63657f53114d61e954e2627aed66e3503b2a4063","modified":1535103406017},{"_id":"public/2017/05/09/Android-Premission-Manger/index.html","hash":"0d3ae1f2d8af2dce56fedc37ed04515051862247","modified":1535103406017},{"_id":"public/2017/05/08/Java_understanding-OO/index.html","hash":"6a98ce76eb126a83567b020d47bd521d696f3db3","modified":1535103406017},{"_id":"public/2017/05/03/Android_even_distribution/index.html","hash":"c6bf7525d2eafac5ca09e330a47fff60bc5286c9","modified":1535103406017},{"_id":"public/archives/index.html","hash":"d60c07c297467a2f20876fd6ae207f105b10905d","modified":1535103406018},{"_id":"public/archives/page/2/index.html","hash":"0b4148276f7642f7dc6910ab639054d23742fb1f","modified":1535103406018},{"_id":"public/archives/2017/index.html","hash":"9189b73645804713e74509f6f4f45eca947bce5d","modified":1535103406018},{"_id":"public/archives/2017/page/2/index.html","hash":"e25969653632a70e39306155db4b925625ac7c31","modified":1535103406018},{"_id":"public/archives/2017/05/index.html","hash":"1ce97b429cb18f399328c9b894672a5b0586f2d8","modified":1535103406018},{"_id":"public/index.html","hash":"3e2954cfadca4c1d6ea307c6042fbe990ca0809a","modified":1535103406018},{"_id":"public/page/2/index.html","hash":"095ae7e77109bcaf1b42d9fd1f35fe8b41472abc","modified":1535103406018},{"_id":"public/tags/编程思想/index.html","hash":"9d65d8319b74223342e79848da1a8fb7e29663b5","modified":1535103406018},{"_id":"public/images/avatar.png","hash":"76aa8678945e5b649f71c980d1a8b17fa1e3ed86","modified":1535103406026},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1535103406026},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1535103406026},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1535103406026},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1535103406026},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1535103406026},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1535103406026},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1535103406026},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1535103406026},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1535103406026},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1535103406026},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1535103406026},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1535103406026},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1535103406026},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1535103406026},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1535103406026},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1535103406026},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1535103406026},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1535103406026},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1535103406026},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1535103406027},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1535103406027},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1535103406027},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1535103406027},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1535103406027},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1535103406027},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1535103406027},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1535103406027},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1535103406027},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1535103406027},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1535103406027},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1535103406027},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1535103406027},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1535103406028},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1535103406670},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1535103406681},{"_id":"public/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1535103406695},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1535103406695},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1535103406695},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1535103406695},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1535103406695},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1535103406695},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1535103406696},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1535103406696},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1535103406696},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1535103406696},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1535103406696},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1535103406696},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1535103406696},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1535103406696},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1535103406696},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1535103406696},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1535103406696},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1535103406696},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1535103406696},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1535103406696},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1535103406696},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1535103406696},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1535103406696},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1535103406696},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1535103406696},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1535103406696},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1535103406696},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1535103406696},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1535103406696},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1535103406697},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1535103406697},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1535103406697},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1535103406697},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1535103406697},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1535103406697},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1535103406697},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1535103406697},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1535103406697},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1535103406697},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1535103406697},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1535103406697},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1535103406697},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1535103406697},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1535103406697},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1535103406697},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1535103406697},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1535103406697},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1535103406697},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1535103406697},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1535103406697},{"_id":"public/css/main.css","hash":"5317dc74215687e66ff6fb24d32bdd18fc9b3e2c","modified":1535103406697},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1535103406697},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1535103406698},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1535103406698},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1535103406698},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1535103406698},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1535103406698},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1535103406699},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1535103406699},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1535103406699},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1535103406699},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1535103406699},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1535103406699},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1535103406699},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1535103406699},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1535103406699},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1535103406699},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1535103406699},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1535103406699},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1535103406699},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1535103406699},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1535103406700},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1535103406700},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1535103406700},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1535103406728}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2018-08-24T09:21:04.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-08-24 17:21:04\n---\n","updated":"2018-08-24T09:36:28.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjl7sxdus0001hnnfrdf7gmt1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-07-04T02:23:01.000Z","tags":["Android","Java","Google","编程思想","效果"],"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-07-04 10:23:01\ntags:\n- Android\n- Java\n- Google\n- 编程思想\n- 效果\n---\n","updated":"2018-08-24T09:36:28.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjl7sxe47001zhnnfkvl6yj89","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"EditText每4位自动添加空格","date":"2017-05-19T08:32:31.000Z","_content":"## 基本功能 ##\n刚拿到需求，很简单的一个功能，二话不说，很快就出来了：\n![](http://7xvzby.com1.z0.glb.clouddn.com/et_1.gif)\n完美！顺利上线！\n没过几天领导拿着手机过来说：“这一堆数字在一起看着很费劲，像其他App一样，加个空格吧！“\n小Kiss，当即就答应了下来。\n## 拓展功能 ##\n下面就来在基本功能上做拓展：每4位，自动添加空格。\n看似很小的功能，在开发的过程中，遇到了非常多的问题与难点：\n - EditText输入框监听死循环\n - 输入框中的空格无法删除（删除又添加）\n - 从中间删除一个数字产生的一系列问题\n - 输入框光标位置的控制问题\n\n之前踩坑的过程就不再赘述了，太心酸....\n![](http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/%E6%83%A8%E4%B8%8D%E5%BF%8D%E7%9D%B9.png)\n经过一系列实验，最后定下来的思路如下：\n 1. 当输入框的内容改变时，就将内容取出拆分为一个一个的字符，在每4位的中间添加空格，最后一个4位不能添加。用这种拼接字符的方法是为了解决当用户删除中间的数字，会导致空格位置错位的问题。\n 2. 当用户删除中间的字符时，要记录该动作并且记录光标位置，保证重新排序完成后，光标的位置在应该在的位置。\n\n大概就这2步，就可以实现这个功能，下面一步一来,我们先实现空格的添加，保证内容永远满足4位后一个空格：\n下面先看EditText的监听：\n```\net_credit_number.addTextChangedListener(new TextWatcher() {\n    @Override\n    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n    }\n    @Override\n    public void onTextChanged(CharSequence s, int start, int before, int count) {\n    }\n    @Override\n    public void afterTextChanged(Editable s) {\n        //获取输入框中的内容,不可以去空格\n        String etContent = EditTextUtils.getText(et_credit_number);\n        if (TextUtils.isEmpty(etContent)) {\n            bt_submit.setEnabled(false);\n            return;\n        }\n        //重新拼接字符串\n        String newContent = AppUtils.addSpeaceByCredit(etContent);\n        //如果有改变，则重新填充\n        //防止EditText无限setText()产生死循环\n        if (!etContent.equals(newContent)) {\n            et_credit_number.setText(newContent);\n            //保证光标在最后，因为每次setText都会导致光标重置\n            //这样最基本地解决了光标乱跳的问题\n            et_credit_number.setSelection(newContent.length());\n        }\n        //判断是否满足信用卡格式，注意去空格判断\n        if (MatcheUtils.isCreditNumber(newContent.replaceAll(\" \", \"\"))) {\n            bt_submit.setEnabled(true);\n            return;\n        }\n        bt_submit.setEnabled(false);\n    }\n});\n```\n没有难点，重新拼接字符串我单独封装了出来：\n```\npublic static String addSpeaceByCredit(String content) {\n    if (TextUtils.isEmpty(content)) {\n        return \"\";\n    }\n    //去空格\n    content = content.replaceAll(\" \", \"\");\n    if (TextUtils.isEmpty(content)) {\n        return \"\";\n    }\n    //卡号限制为16位\n    if (content.length() > 16) {\n        content = content.substring(0, 16);\n    }\n    StringBuilder newString = new StringBuilder();\n    for (int i = 1; i <= content.length(); i++) {\n        //当为第4位时，并且不是最后一个第4位时\n        //拼接字符的同时，拼接一个空格\n        //如果在最后一个第四位也拼接，会产生空格无法删除的问题\n        //因为一删除，马上触发输入框改变监听，又重新生成了空格\n        if (i % 4 == 0 && i != content.length()) {\n            newString.append(content.charAt(i - 1) + \" \");\n        } else {\n        //如果不是4位的倍数，则直接拼接字符即可\n            newString.append(content.charAt(i - 1));\n\n        }\n    }\n    return newString.toString();\n}\n```\n这里每一步的含义，我都写了注释，应该问题不大，下面运行一下：\n![](http://7xvzby.com1.z0.glb.clouddn.com/et_2.gif)\n完美！空格正常添加了！\n但是光标乱跳的问题，我特地演示了一下。\n用字符排序的方式来做这个功能的原因是这个，当用户从中间删除字符时，我们需要将所有添加的空格位置都进行审查，并重新进行空格的添加，所以我认为重新排序字符是非常恰当的一种做法。当然这仅仅是我的愚见，可能有更优的做法。\n现在我们就要进行第二步，当用户删除中间字符时，我们要判断用户本次操作是删除字符，并且保存本次删除的光标位置，在删除完成、排序完成之后，将光标移动到保存的光标位置。\n思路有了，下面就看最终代码好了。\n## 功能展示 ##\n![](http://7xvzby.com1.z0.glb.clouddn.com/et_3.gif)\n输入框监听的代码：\n```\net_credit_number.addTextChangedListener(new TextWatcher() {\n    @Override\n    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n    }\n    @Override\n    public void onTextChanged(CharSequence s, int start, int before, int count) {\n        //因为重新排序之后setText的存在\n        //会导致输入框的内容从0开始输入，这里是为了避免这种情况产生一系列问题\n        if (start == 0 && count > 0) {\n            return;\n        }\n        String editTextContent = EditTextUtils.getText(et_credit_number);\n        if (TextUtils.isEmpty(editTextContent) || TextUtils.isEmpty(lastString)) {\n            return;\n        }\n        editTextContent = AppUtils.addSpeaceByCredit(editTextContent);\n        //如果最新的长度 < 上次的长度，代表进行了删除\n        if (editTextContent.length() <= lastString.length()) {\n            deleteSelect = start;\n        } else {\n            deleteSelect = editTextContent.length();\n        }\n    }\n    @Override\n    public void afterTextChanged(Editable s) {\n        //获取输入框中的内容,不可以去空格\n        String etContent = EditTextUtils.getText(et_credit_number);\n        if (TextUtils.isEmpty(etContent)) {\n            bt_submit.setEnabled(false);\n            return;\n        }\n        //重新拼接字符串\n        String newContent = AppUtils.addSpeaceByCredit(etContent);\n        //保存本次字符串数据\n        lastString = newContent;\n        //如果有改变，则重新填充\n        //防止EditText无限setText()产生死循环\n        if (!etContent.equals(newContent)) {\n            et_credit_number.setText(newContent);\n            //保证光标的位置\n            et_credit_number.setSelection(deleteSelect > newContent.length() ? newContent.length() : deleteSelect);\n        }\n        //判断是否满足信用卡格式，注意去空格判断\n        if (MatcheUtils.isCreditNumber(newContent.replaceAll(\" \", \"\"))) {\n            bt_submit.setEnabled(true);\n            return;\n        }\n        bt_submit.setEnabled(false);\n    }\n});\n```\n 这边主要利用了`onTextChanged()`的监听，判断用户操作是删除操作时，保存光标的位置。\n\n## 小结 ##\n项目我已经上传到了[我的GitHub](https://github.com/YuanTiger/EditText_Card_Limit)，有兴趣的同学可以去参考一下。\n这个功能的坑远远超出了我的想象，我才不会说这个项目我就运行了100遍而已！\n![](http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/%E9%80%80%E5%87%BA%E8%A3%85%E9%80%BC%E7%95%8C.jpg)\n","source":"_posts/Android-EditText-card-limit.md","raw":"---\ntitle: EditText每4位自动添加空格\ndate: 2017-05-19 16:32:31\ntags:\n   - Android\n   - 效果\n---\n## 基本功能 ##\n刚拿到需求，很简单的一个功能，二话不说，很快就出来了：\n![](http://7xvzby.com1.z0.glb.clouddn.com/et_1.gif)\n完美！顺利上线！\n没过几天领导拿着手机过来说：“这一堆数字在一起看着很费劲，像其他App一样，加个空格吧！“\n小Kiss，当即就答应了下来。\n## 拓展功能 ##\n下面就来在基本功能上做拓展：每4位，自动添加空格。\n看似很小的功能，在开发的过程中，遇到了非常多的问题与难点：\n - EditText输入框监听死循环\n - 输入框中的空格无法删除（删除又添加）\n - 从中间删除一个数字产生的一系列问题\n - 输入框光标位置的控制问题\n\n之前踩坑的过程就不再赘述了，太心酸....\n![](http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/%E6%83%A8%E4%B8%8D%E5%BF%8D%E7%9D%B9.png)\n经过一系列实验，最后定下来的思路如下：\n 1. 当输入框的内容改变时，就将内容取出拆分为一个一个的字符，在每4位的中间添加空格，最后一个4位不能添加。用这种拼接字符的方法是为了解决当用户删除中间的数字，会导致空格位置错位的问题。\n 2. 当用户删除中间的字符时，要记录该动作并且记录光标位置，保证重新排序完成后，光标的位置在应该在的位置。\n\n大概就这2步，就可以实现这个功能，下面一步一来,我们先实现空格的添加，保证内容永远满足4位后一个空格：\n下面先看EditText的监听：\n```\net_credit_number.addTextChangedListener(new TextWatcher() {\n    @Override\n    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n    }\n    @Override\n    public void onTextChanged(CharSequence s, int start, int before, int count) {\n    }\n    @Override\n    public void afterTextChanged(Editable s) {\n        //获取输入框中的内容,不可以去空格\n        String etContent = EditTextUtils.getText(et_credit_number);\n        if (TextUtils.isEmpty(etContent)) {\n            bt_submit.setEnabled(false);\n            return;\n        }\n        //重新拼接字符串\n        String newContent = AppUtils.addSpeaceByCredit(etContent);\n        //如果有改变，则重新填充\n        //防止EditText无限setText()产生死循环\n        if (!etContent.equals(newContent)) {\n            et_credit_number.setText(newContent);\n            //保证光标在最后，因为每次setText都会导致光标重置\n            //这样最基本地解决了光标乱跳的问题\n            et_credit_number.setSelection(newContent.length());\n        }\n        //判断是否满足信用卡格式，注意去空格判断\n        if (MatcheUtils.isCreditNumber(newContent.replaceAll(\" \", \"\"))) {\n            bt_submit.setEnabled(true);\n            return;\n        }\n        bt_submit.setEnabled(false);\n    }\n});\n```\n没有难点，重新拼接字符串我单独封装了出来：\n```\npublic static String addSpeaceByCredit(String content) {\n    if (TextUtils.isEmpty(content)) {\n        return \"\";\n    }\n    //去空格\n    content = content.replaceAll(\" \", \"\");\n    if (TextUtils.isEmpty(content)) {\n        return \"\";\n    }\n    //卡号限制为16位\n    if (content.length() > 16) {\n        content = content.substring(0, 16);\n    }\n    StringBuilder newString = new StringBuilder();\n    for (int i = 1; i <= content.length(); i++) {\n        //当为第4位时，并且不是最后一个第4位时\n        //拼接字符的同时，拼接一个空格\n        //如果在最后一个第四位也拼接，会产生空格无法删除的问题\n        //因为一删除，马上触发输入框改变监听，又重新生成了空格\n        if (i % 4 == 0 && i != content.length()) {\n            newString.append(content.charAt(i - 1) + \" \");\n        } else {\n        //如果不是4位的倍数，则直接拼接字符即可\n            newString.append(content.charAt(i - 1));\n\n        }\n    }\n    return newString.toString();\n}\n```\n这里每一步的含义，我都写了注释，应该问题不大，下面运行一下：\n![](http://7xvzby.com1.z0.glb.clouddn.com/et_2.gif)\n完美！空格正常添加了！\n但是光标乱跳的问题，我特地演示了一下。\n用字符排序的方式来做这个功能的原因是这个，当用户从中间删除字符时，我们需要将所有添加的空格位置都进行审查，并重新进行空格的添加，所以我认为重新排序字符是非常恰当的一种做法。当然这仅仅是我的愚见，可能有更优的做法。\n现在我们就要进行第二步，当用户删除中间字符时，我们要判断用户本次操作是删除字符，并且保存本次删除的光标位置，在删除完成、排序完成之后，将光标移动到保存的光标位置。\n思路有了，下面就看最终代码好了。\n## 功能展示 ##\n![](http://7xvzby.com1.z0.glb.clouddn.com/et_3.gif)\n输入框监听的代码：\n```\net_credit_number.addTextChangedListener(new TextWatcher() {\n    @Override\n    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n    }\n    @Override\n    public void onTextChanged(CharSequence s, int start, int before, int count) {\n        //因为重新排序之后setText的存在\n        //会导致输入框的内容从0开始输入，这里是为了避免这种情况产生一系列问题\n        if (start == 0 && count > 0) {\n            return;\n        }\n        String editTextContent = EditTextUtils.getText(et_credit_number);\n        if (TextUtils.isEmpty(editTextContent) || TextUtils.isEmpty(lastString)) {\n            return;\n        }\n        editTextContent = AppUtils.addSpeaceByCredit(editTextContent);\n        //如果最新的长度 < 上次的长度，代表进行了删除\n        if (editTextContent.length() <= lastString.length()) {\n            deleteSelect = start;\n        } else {\n            deleteSelect = editTextContent.length();\n        }\n    }\n    @Override\n    public void afterTextChanged(Editable s) {\n        //获取输入框中的内容,不可以去空格\n        String etContent = EditTextUtils.getText(et_credit_number);\n        if (TextUtils.isEmpty(etContent)) {\n            bt_submit.setEnabled(false);\n            return;\n        }\n        //重新拼接字符串\n        String newContent = AppUtils.addSpeaceByCredit(etContent);\n        //保存本次字符串数据\n        lastString = newContent;\n        //如果有改变，则重新填充\n        //防止EditText无限setText()产生死循环\n        if (!etContent.equals(newContent)) {\n            et_credit_number.setText(newContent);\n            //保证光标的位置\n            et_credit_number.setSelection(deleteSelect > newContent.length() ? newContent.length() : deleteSelect);\n        }\n        //判断是否满足信用卡格式，注意去空格判断\n        if (MatcheUtils.isCreditNumber(newContent.replaceAll(\" \", \"\"))) {\n            bt_submit.setEnabled(true);\n            return;\n        }\n        bt_submit.setEnabled(false);\n    }\n});\n```\n 这边主要利用了`onTextChanged()`的监听，判断用户操作是删除操作时，保存光标的位置。\n\n## 小结 ##\n项目我已经上传到了[我的GitHub](https://github.com/YuanTiger/EditText_Card_Limit)，有兴趣的同学可以去参考一下。\n这个功能的坑远远超出了我的想象，我才不会说这个项目我就运行了100遍而已！\n![](http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/%E9%80%80%E5%87%BA%E8%A3%85%E9%80%BC%E7%95%8C.jpg)\n","slug":"Android-EditText-card-limit","published":1,"updated":"2018-08-24T09:36:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7sxdul0000hnnf97c3net2","content":"<h2 id=\"基本功能\"><a href=\"#基本功能\" class=\"headerlink\" title=\"基本功能\"></a>基本功能</h2><p>刚拿到需求，很简单的一个功能，二话不说，很快就出来了：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/et_1.gif\" alt=\"\"><br>完美！顺利上线！<br>没过几天领导拿着手机过来说：“这一堆数字在一起看着很费劲，像其他App一样，加个空格吧！“<br>小Kiss，当即就答应了下来。</p>\n<h2 id=\"拓展功能\"><a href=\"#拓展功能\" class=\"headerlink\" title=\"拓展功能\"></a>拓展功能</h2><p>下面就来在基本功能上做拓展：每4位，自动添加空格。<br>看似很小的功能，在开发的过程中，遇到了非常多的问题与难点：</p>\n<ul>\n<li>EditText输入框监听死循环</li>\n<li>输入框中的空格无法删除（删除又添加）</li>\n<li>从中间删除一个数字产生的一系列问题</li>\n<li>输入框光标位置的控制问题</li>\n</ul>\n<p>之前踩坑的过程就不再赘述了，太心酸….<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/%E6%83%A8%E4%B8%8D%E5%BF%8D%E7%9D%B9.png\" alt=\"\"><br>经过一系列实验，最后定下来的思路如下：</p>\n<ol>\n<li>当输入框的内容改变时，就将内容取出拆分为一个一个的字符，在每4位的中间添加空格，最后一个4位不能添加。用这种拼接字符的方法是为了解决当用户删除中间的数字，会导致空格位置错位的问题。</li>\n<li>当用户删除中间的字符时，要记录该动作并且记录光标位置，保证重新排序完成后，光标的位置在应该在的位置。</li>\n</ol>\n<p>大概就这2步，就可以实现这个功能，下面一步一来,我们先实现空格的添加，保证内容永远满足4位后一个空格：<br>下面先看EditText的监听：<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">et_credit_number.addTextChangedListener(<span class=\"keyword\">new</span> TextWatcher() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">beforeTextChanged</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> count, <span class=\"keyword\">int</span> after)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onTextChanged</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> before, <span class=\"keyword\">int</span> count)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">afterTextChanged</span><span class=\"params\">(Editable s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取输入框中的内容,不可以去空格</span></span><br><span class=\"line\">        String etContent = EditTextUtils.getText(et_credit_number);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TextUtils.isEmpty(etContent)) &#123;</span><br><span class=\"line\">            bt_submit.setEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//重新拼接字符串</span></span><br><span class=\"line\">        String newContent = AppUtils.addSpeaceByCredit(etContent);</span><br><span class=\"line\">        <span class=\"comment\">//如果有改变，则重新填充</span></span><br><span class=\"line\">        <span class=\"comment\">//防止EditText无限setText()产生死循环</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!etContent.equals(newContent)) &#123;</span><br><span class=\"line\">            et_credit_number.setText(newContent);</span><br><span class=\"line\">            <span class=\"comment\">//保证光标在最后，因为每次setText都会导致光标重置</span></span><br><span class=\"line\">            <span class=\"comment\">//这样最基本地解决了光标乱跳的问题</span></span><br><span class=\"line\">            et_credit_number.setSelection(newContent.length());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否满足信用卡格式，注意去空格判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (MatcheUtils.isCreditNumber(newContent.replaceAll(<span class=\"string\">\" \"</span>, <span class=\"string\">\"\"</span>))) &#123;</span><br><span class=\"line\">            bt_submit.setEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        bt_submit.setEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>没有难点，重新拼接字符串我单独封装了出来：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> addSpeaceByCredit(<span class=\"keyword\">String</span> content) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (TextUtils.isEmpty(content)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//去空格</span></span><br><span class=\"line\">    content = content.replaceAll(<span class=\"string\">\" \"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (TextUtils.isEmpty(content)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//卡号限制为16位</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (content.length() &gt; <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\">        content = content.substring(<span class=\"number\">0</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    StringBuilder <span class=\"keyword\">new</span><span class=\"type\">String</span> = <span class=\"keyword\">new</span> <span class=\"type\">StringBuilder</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>; i &lt;= content.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//当为第4位时，并且不是最后一个第4位时</span></span><br><span class=\"line\">        <span class=\"comment\">//拼接字符的同时，拼接一个空格</span></span><br><span class=\"line\">        <span class=\"comment\">//如果在最后一个第四位也拼接，会产生空格无法删除的问题</span></span><br><span class=\"line\">        <span class=\"comment\">//因为一删除，马上触发输入框改变监听，又重新生成了空格</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i % <span class=\"number\">4</span> == <span class=\"number\">0</span> &amp;&amp; i != content.length()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span><span class=\"type\">String</span>.append(content.charAt(i - <span class=\"number\">1</span>) + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果不是4位的倍数，则直接拼接字符即可</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span><span class=\"type\">String</span>.append(content.charAt(i - <span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span><span class=\"type\">String</span>.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里每一步的含义，我都写了注释，应该问题不大，下面运行一下：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/et_2.gif\" alt=\"\"><br>完美！空格正常添加了！<br>但是光标乱跳的问题，我特地演示了一下。<br>用字符排序的方式来做这个功能的原因是这个，当用户从中间删除字符时，我们需要将所有添加的空格位置都进行审查，并重新进行空格的添加，所以我认为重新排序字符是非常恰当的一种做法。当然这仅仅是我的愚见，可能有更优的做法。<br>现在我们就要进行第二步，当用户删除中间字符时，我们要判断用户本次操作是删除字符，并且保存本次删除的光标位置，在删除完成、排序完成之后，将光标移动到保存的光标位置。<br>思路有了，下面就看最终代码好了。</p>\n<h2 id=\"功能展示\"><a href=\"#功能展示\" class=\"headerlink\" title=\"功能展示\"></a>功能展示</h2><p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/et_3.gif\" alt=\"\"><br>输入框监听的代码：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">et_credit_number.addTextChangedListener(<span class=\"keyword\">new</span> <span class=\"type\">TextWatcher</span>() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    <span class=\"keyword\">public</span> void beforeTextChanged(CharSequence s, int start, int count, int after) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    <span class=\"keyword\">public</span> void onTextChanged(CharSequence s, int start, int before, int count) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//因为重新排序之后setText的存在</span></span><br><span class=\"line\">        <span class=\"comment\">//会导致输入框的内容从0开始输入，这里是为了避免这种情况产生一系列问题</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (start == <span class=\"number\">0</span> &amp;&amp; count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">String</span> editTextContent = EditTextUtils.getText(et_credit_number);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TextUtils.isEmpty(editTextContent) || TextUtils.isEmpty(lastString)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        editTextContent = AppUtils.addSpeaceByCredit(editTextContent);</span><br><span class=\"line\">        <span class=\"comment\">//如果最新的长度 &lt; 上次的长度，代表进行了删除</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (editTextContent.length() &lt;= lastString.length()) &#123;</span><br><span class=\"line\">            deleteSelect = start;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            deleteSelect = editTextContent.length();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    <span class=\"keyword\">public</span> void afterTextChanged(Editable s) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取输入框中的内容,不可以去空格</span></span><br><span class=\"line\">        <span class=\"keyword\">String</span> etContent = EditTextUtils.getText(et_credit_number);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TextUtils.isEmpty(etContent)) &#123;</span><br><span class=\"line\">            bt_submit.setEnabled(<span class=\"literal\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//重新拼接字符串</span></span><br><span class=\"line\">        <span class=\"keyword\">String</span> <span class=\"keyword\">new</span><span class=\"type\">Content</span> = AppUtils.addSpeaceByCredit(etContent);</span><br><span class=\"line\">        <span class=\"comment\">//保存本次字符串数据</span></span><br><span class=\"line\">        lastString = <span class=\"keyword\">new</span><span class=\"type\">Content</span>;</span><br><span class=\"line\">        <span class=\"comment\">//如果有改变，则重新填充</span></span><br><span class=\"line\">        <span class=\"comment\">//防止EditText无限setText()产生死循环</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!etContent.equals(<span class=\"keyword\">new</span><span class=\"type\">Content</span>)) &#123;</span><br><span class=\"line\">            et_credit_number.setText(<span class=\"keyword\">new</span><span class=\"type\">Content</span>);</span><br><span class=\"line\">            <span class=\"comment\">//保证光标的位置</span></span><br><span class=\"line\">            et_credit_number.setSelection(deleteSelect &gt; <span class=\"keyword\">new</span><span class=\"type\">Content</span>.length() ? <span class=\"keyword\">new</span><span class=\"type\">Content</span>.length() : <span class=\"type\">deleteSelect</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否满足信用卡格式，注意去空格判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (MatcheUtils.isCreditNumber(<span class=\"keyword\">new</span><span class=\"type\">Content</span>.replaceAll(<span class=\"string\">\" \"</span>, <span class=\"string\">\"\"</span>))) &#123;</span><br><span class=\"line\">            bt_submit.setEnabled(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        bt_submit.setEnabled(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p> 这边主要利用了<code>onTextChanged()</code>的监听，判断用户操作是删除操作时，保存光标的位置。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>项目我已经上传到了<a href=\"https://github.com/YuanTiger/EditText_Card_Limit\" target=\"_blank\" rel=\"noopener\">我的GitHub</a>，有兴趣的同学可以去参考一下。<br>这个功能的坑远远超出了我的想象，我才不会说这个项目我就运行了100遍而已！<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/%E9%80%80%E5%87%BA%E8%A3%85%E9%80%BC%E7%95%8C.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本功能\"><a href=\"#基本功能\" class=\"headerlink\" title=\"基本功能\"></a>基本功能</h2><p>刚拿到需求，很简单的一个功能，二话不说，很快就出来了：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/et_1.gif\" alt=\"\"><br>完美！顺利上线！<br>没过几天领导拿着手机过来说：“这一堆数字在一起看着很费劲，像其他App一样，加个空格吧！“<br>小Kiss，当即就答应了下来。</p>\n<h2 id=\"拓展功能\"><a href=\"#拓展功能\" class=\"headerlink\" title=\"拓展功能\"></a>拓展功能</h2><p>下面就来在基本功能上做拓展：每4位，自动添加空格。<br>看似很小的功能，在开发的过程中，遇到了非常多的问题与难点：</p>\n<ul>\n<li>EditText输入框监听死循环</li>\n<li>输入框中的空格无法删除（删除又添加）</li>\n<li>从中间删除一个数字产生的一系列问题</li>\n<li>输入框光标位置的控制问题</li>\n</ul>\n<p>之前踩坑的过程就不再赘述了，太心酸….<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/%E6%83%A8%E4%B8%8D%E5%BF%8D%E7%9D%B9.png\" alt=\"\"><br>经过一系列实验，最后定下来的思路如下：</p>\n<ol>\n<li>当输入框的内容改变时，就将内容取出拆分为一个一个的字符，在每4位的中间添加空格，最后一个4位不能添加。用这种拼接字符的方法是为了解决当用户删除中间的数字，会导致空格位置错位的问题。</li>\n<li>当用户删除中间的字符时，要记录该动作并且记录光标位置，保证重新排序完成后，光标的位置在应该在的位置。</li>\n</ol>\n<p>大概就这2步，就可以实现这个功能，下面一步一来,我们先实现空格的添加，保证内容永远满足4位后一个空格：<br>下面先看EditText的监听：<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">et_credit_number.addTextChangedListener(<span class=\"keyword\">new</span> TextWatcher() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">beforeTextChanged</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> count, <span class=\"keyword\">int</span> after)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onTextChanged</span><span class=\"params\">(CharSequence s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> before, <span class=\"keyword\">int</span> count)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">afterTextChanged</span><span class=\"params\">(Editable s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取输入框中的内容,不可以去空格</span></span><br><span class=\"line\">        String etContent = EditTextUtils.getText(et_credit_number);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TextUtils.isEmpty(etContent)) &#123;</span><br><span class=\"line\">            bt_submit.setEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//重新拼接字符串</span></span><br><span class=\"line\">        String newContent = AppUtils.addSpeaceByCredit(etContent);</span><br><span class=\"line\">        <span class=\"comment\">//如果有改变，则重新填充</span></span><br><span class=\"line\">        <span class=\"comment\">//防止EditText无限setText()产生死循环</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!etContent.equals(newContent)) &#123;</span><br><span class=\"line\">            et_credit_number.setText(newContent);</span><br><span class=\"line\">            <span class=\"comment\">//保证光标在最后，因为每次setText都会导致光标重置</span></span><br><span class=\"line\">            <span class=\"comment\">//这样最基本地解决了光标乱跳的问题</span></span><br><span class=\"line\">            et_credit_number.setSelection(newContent.length());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否满足信用卡格式，注意去空格判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (MatcheUtils.isCreditNumber(newContent.replaceAll(<span class=\"string\">\" \"</span>, <span class=\"string\">\"\"</span>))) &#123;</span><br><span class=\"line\">            bt_submit.setEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        bt_submit.setEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>没有难点，重新拼接字符串我单独封装了出来：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> addSpeaceByCredit(<span class=\"keyword\">String</span> content) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (TextUtils.isEmpty(content)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//去空格</span></span><br><span class=\"line\">    content = content.replaceAll(<span class=\"string\">\" \"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (TextUtils.isEmpty(content)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//卡号限制为16位</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (content.length() &gt; <span class=\"number\">16</span>) &#123;</span><br><span class=\"line\">        content = content.substring(<span class=\"number\">0</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    StringBuilder <span class=\"keyword\">new</span><span class=\"type\">String</span> = <span class=\"keyword\">new</span> <span class=\"type\">StringBuilder</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = <span class=\"number\">1</span>; i &lt;= content.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//当为第4位时，并且不是最后一个第4位时</span></span><br><span class=\"line\">        <span class=\"comment\">//拼接字符的同时，拼接一个空格</span></span><br><span class=\"line\">        <span class=\"comment\">//如果在最后一个第四位也拼接，会产生空格无法删除的问题</span></span><br><span class=\"line\">        <span class=\"comment\">//因为一删除，马上触发输入框改变监听，又重新生成了空格</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i % <span class=\"number\">4</span> == <span class=\"number\">0</span> &amp;&amp; i != content.length()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span><span class=\"type\">String</span>.append(content.charAt(i - <span class=\"number\">1</span>) + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果不是4位的倍数，则直接拼接字符即可</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span><span class=\"type\">String</span>.append(content.charAt(i - <span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span><span class=\"type\">String</span>.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里每一步的含义，我都写了注释，应该问题不大，下面运行一下：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/et_2.gif\" alt=\"\"><br>完美！空格正常添加了！<br>但是光标乱跳的问题，我特地演示了一下。<br>用字符排序的方式来做这个功能的原因是这个，当用户从中间删除字符时，我们需要将所有添加的空格位置都进行审查，并重新进行空格的添加，所以我认为重新排序字符是非常恰当的一种做法。当然这仅仅是我的愚见，可能有更优的做法。<br>现在我们就要进行第二步，当用户删除中间字符时，我们要判断用户本次操作是删除字符，并且保存本次删除的光标位置，在删除完成、排序完成之后，将光标移动到保存的光标位置。<br>思路有了，下面就看最终代码好了。</p>\n<h2 id=\"功能展示\"><a href=\"#功能展示\" class=\"headerlink\" title=\"功能展示\"></a>功能展示</h2><p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/et_3.gif\" alt=\"\"><br>输入框监听的代码：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">et_credit_number.addTextChangedListener(<span class=\"keyword\">new</span> <span class=\"type\">TextWatcher</span>() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    <span class=\"keyword\">public</span> void beforeTextChanged(CharSequence s, int start, int count, int after) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    <span class=\"keyword\">public</span> void onTextChanged(CharSequence s, int start, int before, int count) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//因为重新排序之后setText的存在</span></span><br><span class=\"line\">        <span class=\"comment\">//会导致输入框的内容从0开始输入，这里是为了避免这种情况产生一系列问题</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (start == <span class=\"number\">0</span> &amp;&amp; count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">String</span> editTextContent = EditTextUtils.getText(et_credit_number);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TextUtils.isEmpty(editTextContent) || TextUtils.isEmpty(lastString)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        editTextContent = AppUtils.addSpeaceByCredit(editTextContent);</span><br><span class=\"line\">        <span class=\"comment\">//如果最新的长度 &lt; 上次的长度，代表进行了删除</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (editTextContent.length() &lt;= lastString.length()) &#123;</span><br><span class=\"line\">            deleteSelect = start;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            deleteSelect = editTextContent.length();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    <span class=\"keyword\">public</span> void afterTextChanged(Editable s) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取输入框中的内容,不可以去空格</span></span><br><span class=\"line\">        <span class=\"keyword\">String</span> etContent = EditTextUtils.getText(et_credit_number);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TextUtils.isEmpty(etContent)) &#123;</span><br><span class=\"line\">            bt_submit.setEnabled(<span class=\"literal\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//重新拼接字符串</span></span><br><span class=\"line\">        <span class=\"keyword\">String</span> <span class=\"keyword\">new</span><span class=\"type\">Content</span> = AppUtils.addSpeaceByCredit(etContent);</span><br><span class=\"line\">        <span class=\"comment\">//保存本次字符串数据</span></span><br><span class=\"line\">        lastString = <span class=\"keyword\">new</span><span class=\"type\">Content</span>;</span><br><span class=\"line\">        <span class=\"comment\">//如果有改变，则重新填充</span></span><br><span class=\"line\">        <span class=\"comment\">//防止EditText无限setText()产生死循环</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!etContent.equals(<span class=\"keyword\">new</span><span class=\"type\">Content</span>)) &#123;</span><br><span class=\"line\">            et_credit_number.setText(<span class=\"keyword\">new</span><span class=\"type\">Content</span>);</span><br><span class=\"line\">            <span class=\"comment\">//保证光标的位置</span></span><br><span class=\"line\">            et_credit_number.setSelection(deleteSelect &gt; <span class=\"keyword\">new</span><span class=\"type\">Content</span>.length() ? <span class=\"keyword\">new</span><span class=\"type\">Content</span>.length() : <span class=\"type\">deleteSelect</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否满足信用卡格式，注意去空格判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (MatcheUtils.isCreditNumber(<span class=\"keyword\">new</span><span class=\"type\">Content</span>.replaceAll(<span class=\"string\">\" \"</span>, <span class=\"string\">\"\"</span>))) &#123;</span><br><span class=\"line\">            bt_submit.setEnabled(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        bt_submit.setEnabled(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p> 这边主要利用了<code>onTextChanged()</code>的监听，判断用户操作是删除操作时，保存光标的位置。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>项目我已经上传到了<a href=\"https://github.com/YuanTiger/EditText_Card_Limit\" target=\"_blank\" rel=\"noopener\">我的GitHub</a>，有兴趣的同学可以去参考一下。<br>这个功能的坑远远超出了我的想象，我才不会说这个项目我就运行了100遍而已！<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/%E9%80%80%E5%87%BA%E8%A3%85%E9%80%BC%E7%95%8C.jpg\" alt=\"\"></p>\n"},{"title":"Android_Handler机制","date":"2017-05-15T06:57:07.000Z","_content":"Handler是Android消息通讯当中最常用的方式之一。\n本篇小文将会从Handler的源码角度去浅析Handler。\n## 总结 ##\n因为Handler这个东西其实大家都会用，源码也多多少少地了解过，所以直接将最关键的话，写到前面，对源码感兴趣的看官可以在看完总结后再往下浏览源码：\n\n1. 创建Handler\n```\n    Handler handler = new Handler();\n```\n 在主线程当中，可以直接进行Handler的创建。如果是在子线程当中，在创建之前必须先初始化Looper，否则会RuntimeException:\n```\n    Looper.prepare();\n    Handler handler = new Handler();\n    handler.sendEmptyMessage(8);\n    Looper.loop();\n```\n 在初始化Looper的同时，一定要调用`Looper.loop()`来启动循环，否则Handler仍然无法正常接收。\n 并且因为`Looper.loop()`有死循环的存在，`Looper.loop()`之后的代码将无法执行，所以需要将`Looper.loop()`放在代码的最后，详情可参考`ActivityThread`中的main方法创建Looper的流程。\n 查看Handler的构造方法可以发现，其实Looper是Handler必要元素，但是在主线程初始化的时候，Looper已经初始化完成，所以无需再创建Looper，但是子线程的Looper需要我们自己初始化。\n 并且Looper在每个线程只能存在一个，如果再去手动创建Looper也会抛出RuntimeException。\n\n2. 发送Handler\nhandler的发送有很多方法，包括发送延时Handler、即时Handler、MessageHandler等等，但是查看这些发送方法的源码，就会发现这些发送Message的方法最终都会调用`MessageQueue.enqueueMessage()`方法。\n这个方法其实就是将我们发送的Message入队到MessageQueue队列中，这样，我们的消息就已经发送成功，等待执行了。\n3. 取出Handler\n在`Looper.prepare()`的同时，总会执行`looper.loop()`语句与之对应。\n查看`loop()`源码会发现，这个方法中有一个for(;;)的死循环，会无限执行`MessageQueue.next()`，而`MessageQueue`就是我们上一步将Meesage入队的对象。\n也就是说在创建Looper时，就会启动`MessageQueue`的无限遍历。如果`MessageQueue`为空，`Looper.loop()`就会进入休眠，直到再有Message插入到`MessageQueue`中。\n如果取到Message则会调用message.target.dispatchMessage()，将消息分发给对应的Handler。\n4. 如何在`loop()`休眠之后唤醒`loop()`？\n在Meesage入队的时候，也就是执行`MessageQueue.enqueueMessage()`方法时，`enqueueMessage()`有一个`nativeWeak()`的native方法，如果有消息进入，并且Looper是休眠状态，则会执行该方法唤醒Looper:\n```\n// We can assume mPtr != 0 because mQuitting is false.\nif (needWake) {\n    nativeWake(mPtr);\n}\n```\n5. 整体流程\n先调用`Looper.prepare()`创建Looper，在创建的同时会自动调用`Looper.loop()`执行死循环loop()。注意`Looper.loop()`一定放到代码的最后一行。\n死循环中会执行`MessageQueue.next()`方法去取出队列中的消息，当消息为空时，`MessageQueue.next()`方法中会执行`nativePollOnce()`的native方法休眠`Looper.loop()`死循环。当有新的消息插入到`MessageQueue`中，也就是调用`MessageQueue.enqueueMessage()`方法，这个方法当中会判断Looper是否是休眠状态，如果是休眠状态会执行`nativeWeak()`的native方法来唤醒Looper()。\n\n## Handler的使用 ##\n\n1. 主线程\n在`主线程`当中，Handler可以作为一个成员变量直接进行创建：\n    ```\n    //注意，Handler属于android.os包\n   private Handler handler = new Handler() {\n        @Override\n        public void handleMessage(Message msg) {\n            System.out.println(\"主线程的Handler\");\n        }\n    };\n    ```\n\n 接着我们试着发送Handler：\n    ```\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        //发送一个空Handler，what为888，延迟3秒到达\n        handler.sendEmptyMessageDelayed(888,3000);\n    }\n    ```\n 发送Handler有很多方法：发送空Message、发送延迟的空Message、发送Message、发送延迟的Message等：\n![](http://7xvzby.com1.z0.glb.clouddn.com/handler/handler_send_funcation.png)\n\n 接着我们运行项目，就会发现3s后控制台有Log的打印。\n2. 子线程\n在`子线程`中创建Handler的流程，和在`主线程`基本一致，只是多了一步而已，但这一步非常关键。\n我们先按照`主线程`的步骤，看看会有什么问题。\n在`子线程`中创建Handler：\n```\nnew Thread(){\n    @Override\n    public void run() {\n        super.run();\n        Handler handler = new Handler(){\n             @Override\n            public void handleMessage(Message msg) {\n                System.out.println(\"子线程的Handler\");\n            }\n        };\n    }\n}.start();\n```\n 接着我们运行项目，会发现项目崩溃了：\n```\njava.lang.RuntimeException: Can''t create handler inside thread that has not called Looper.prepare()\nat android.os.Handler.<init>(Handler.java:200)\nat android.os.Handler.<init>(Handler.java:114)\nat com.my.oo.MainActivity$2$1.<init>(MainActivity.java:0)\n```\n 很明显，错误信息说的是**在当前线程中创建Handler失败因为没有执行Looper.prepare()**。\n 那我们按照错误原因，在创建Handler之前，加上`Looper.prepare()`:\n```\n//子线程\nnew Thread(){\n    @Override\n    public void run() {\n        super.run();\n        //添加Looper.prepare()；\n        Looper.prepare();\n        //之后再创建Handler\n        Handler handler = new Handler(){\n             @Override\n            public void handleMessage(Message msg) {\n                System.out.println(\"子线程的Handler\");\n            }\n        };\n        //发送消息\n        handler.sendEmptyMessage(111);\n    }\n}.start();\n```\n 这次再运行项目，我们就会发现项目正常运行没有问题。但是发送Handler仍然无法接收，那是因为我们没有启动Looper的遍历：\n```\n//子线程\nnew Thread(){\n    @Override\n    public void run() {\n        super.run();\n        //添加Looper.prepare()；\n        Looper.prepare();\n        //之后再创建Handler\n        Handler handler = new Handler(){\n             @Override\n            public void handleMessage(Message msg) {\n                System.out.println(\"子线程的Handler\");\n            }\n        };\n        //发送消息\n        handler.sendEmptyMessage(111);\n        //启动Looper的遍历功能\n        Looper.loop();\n    }\n}.start();\n```\n 这里一定要注意，**`Looper.loop()`必须放到代码的最后。因为`Looper.loop()`中有死循环，会导致之后的代码无法执行**。这里可以等到查看`主线程`创建过程的源码时证实。\n3. 使用总结\nHandler的使用就是这么简单，要注意的就是`子线程`当中使用Handler时，一定要先调用`Looper.prepare()`，最后调用`Looper.loop()`，否则项目会崩溃或无法接收Handler。至于为什么会这样，我们在源码里面找原因。\n\n## 源码解析 ##\n1. Handler创建\n我们先看Handler的构造方法：\n```\npublic Handler(Callback callback, boolean async) {\n    //....省略部分代码\n    mLooper = Looper.myLooper();\n    if (mLooper == null) {\n        throw new RuntimeException(\n            \"Can't create handler inside thread that has not called Looper.prepare()\");\n    }\n    mQueue = mLooper.mQueue;\n    mCallback = callback;\n    mAsynchronous = async;\n}\n```\n 我们可以看到，Handler的构造方法当中是去获取了一个叫做`Looper`的类对象，如果该对象为空，就会抛出刚才我们上面发生的异常。所以我们需要在创建Handler之前，一定要先执行`Looper.prepare()`。\n 那么问题来了，为什么`主线程`就不需要执行`Looper.prepare()`就可以直接创建Handler呢？\n 我们可以随意根据代码猜测一下：\n 这里Handler的构造方法的代码已经很明显了，`Looper`类是必要的，那么`主线程`可以成功创建Handler，是不是就代表着主线程的`Looper`不为空呢？\n![](http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/zhenxiang_just_one.jpeg)\n 是不是主线程在初始化的时候`Looper`也跟着初始化了呢！？带着看破一切(瞎猜)的思路，我们来看`主线程`的初始化源码。\n经过了长时间的Google，我们知道了主线程类叫做:`ActivityThread`。\n 该类当中有main方法：\n```\npublic static void main(String[] args) {\n    //....省略部分代码\n    Looper.prepareMainLooper();\n    ActivityThread thread = new ActivityThread();\n    thread.attach(false);\n    if (sMainThreadHandler == null) {\n        sMainThreadHandler = thread.getHandler();\n    }\n    if (false) {\n        Looper.myLooper().setMessageLogging(new\n                LogPrinter(Log.DEBUG, \"ActivityThread\"));\n    }\n    // End of event ActivityThreadMain.\n    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\n    Looper.loop();\n    throw new RuntimeException(\"Main thread loop unexpectedly exited\");\n}\n```\n 我们很自然（惊奇）地发现，在主线程创建的过程中，果然（真的）有与`Looper`类相关的内容。\n 这里有重点（敲黑板）：之前说的Looper.loop()后的代码不会执行，这里得到了证实：\n```\nLooper.loop();\nthrow new RuntimeException(\"Main thread loop unexpectedly exited\");\n```\n 下面异常的意思是：主线程的Looper意外退出。\n 也就是当Looper.loop()执行失败的意思，但是当Looper.loop()执行成功时，是不会执行下面的代码的！因为**`Looper.loop()`必须放到方法的最后，否则会导致后面的代码无法执行**。\n 好的，接着往下看，点进`prepareMainLooper()`会发现，其实内部就是调用了`prepare()`：\n```\npublic static void prepareMainLooper() {\n    prepare(false);\n    synchronized (Looper.class) {\n        if (sMainLooper != null) {\n            throw new IllegalStateException(\"The main Looper has already been prepared.\");\n        }\n        sMainLooper = myLooper();\n    }\n}\n```\n 所以到现在，我们解决了我们的第一个问题：为什么主线程当中不需要执行`Looper.prepare()`。\n 接着，我们去浏览`Looper.prepare()`：\n```\nprivate static void prepare(boolean quitAllowed) {\n    if (sThreadLocal.get() != null) {\n        throw new RuntimeException(\"Only one Looper may be created per thread\");\n    }\n    //new Looper()并设置给当前线程\n    sThreadLocal.set(new Looper(quitAllowed));\n}\n```\n 没什么东西，前面对线程当中的Looper进行了判空，如果不为空则会抛出`RuntimeEception`。\n 这也就是说，每个线程当中只能有一个Looper，当你尝试去创建第二时，就会发生异常，所以`Looper.prepare()`每个线程中只能调用一次。\n 后面则new了Looper并且设置给当前线程。\n`new Looper()`中初始化了`MessageQueue`：\n```\nprivate Looper(boolean quitAllowed) {\n    mQueue = new MessageQueue(quitAllowed);\n    mThread = Thread.currentThread();\n}\n```\n 到这里，Handler的创建就完成了！\n\n2. Handler发送Meesage\nHandler的发送方法有很多，包括发送延时Handler、及时Handler、空Hanlder等等。\n查看源码会发现，所有发送方法最后调用的都是同一个方法：`MessageQueue`的`enqueueMessage()`。\n有的看官就会问：Handler中怎么会有`MeesageQueue`？\n这个在上面`new Looper()`的源码中已经体现了：\n`new Handler()`中`new Looper()`，\n`new Looper()`中`new MessageQueue()`。\n所以其实初始化Handler的同时，`Looper`和`MeesageQueue`都已经初始化完成了。\n下面我们来看消息入队方法`MessageQueue.enqueueMessage()`的全部源码：\n```\nboolean enqueueMessage(Message msg, long when) {\n        //Meesage是否可用\n        //这里的msg.target指的就是发送该Message的Handler\n        if (msg.target == null) {\n            throw new IllegalArgumentException(\"Message must have a target.\");\n        }\n        if (msg.isInUse()) {\n            throw new IllegalStateException(msg + \" This message is already in use.\");\n        }\n        //同步锁\n        synchronized (this) {\n            //判断是否调用了quit()方法，即取消信息\n            //如果调用了，则其实Handler的Looper已经销毁，无法发送消息\n            if (mQuitting) {\n                IllegalStateException e = new IllegalStateException(\n                        msg.target + \" sending message to a Handler on a dead thread\");\n                Log.w(TAG, e.getMessage(), e);\n                msg.recycle();\n                return false;\n            }\n\n            //将消息添加到MessageQueue的具体操作\n            //每来一个新的消息，就会按照延迟时间的先后重新进行排序\n            msg.markInUse();\n            msg.when = when;\n            Message p = mMessages;\n            boolean needWake;\n            if (p == null || when == 0 || when < p.when) {\n                // New head, wake up the event queue if blocked.\n                msg.next = p;\n                mMessages = msg;\n                needWake = mBlocked;\n            } else {\n                Message prev;\n                for (;;) {\n                    prev = p;\n                    p = p.next;\n                    if (p == null || when < p.when) {\n                        break;\n                    }\n                    if (needWake && p.isAsynchronous()) {\n                        needWake = false;\n                    }\n                }\n                msg.next = p; // invariant: p == prev.next\n                prev.next = msg;\n            }\n\n            //如果Looper.loop()是休眠状态\n            //则调用native方法唤醒loop()\n            //---重点---Looper的唤醒\n            if (needWake) {\n                nativeWake(mPtr);\n            }\n        }\n        return true;\n    }\n```\n 将Message入队到`MeesageQueue`的核心代码，就是这些。\n 根据注释也基本能理解该方法的作用。\n3. 取出Message\n取出Meesage想必大家都知道在哪里取出：`Looper.loop()`：\n```\npublic static void loop() {\n    //Looper的判空\n    final Looper me = myLooper();\n    if (me == null) {\n        throw new RuntimeException(\"No Looper; Looper.prepare() wasn't called on this thread.\");\n    }\n    final MessageQueue queue = me.mQueue;\n    // Make sure the identity of this thread is that of the local process,\n    // and keep track of what that identity token actually is.\n    Binder.clearCallingIdentity();\n    final long ident = Binder.clearCallingIdentity();\n    //取出Message，死循环\n    for (;;) {\n        //取出Meesage的核心代码\n        //在当next()返回为空时，next()中会休眠loop()\n        Message msg = queue.next(); // might block\n        if (msg == null) {\n            // No message indicates that the message queue is quitting.\n            return;\n        }\n        // This must be in a local variable, in case a UI event sets the logger\n        final Printer logging = me.mLogging;\n        if (logging != null) {\n            logging.println(\">>>>> Dispatching to \" + msg.target + \" \" +\n                    msg.callback + \": \" + msg.what);\n        }\n        final long traceTag = me.mTraceTag;\n        if (traceTag != 0 && Trace.isTagEnabled(traceTag)) {\n            Trace.traceBegin(traceTag, msg.target.getTraceName(msg));\n        }\n        try {\n            msg.target.dispatchMessage(msg);\n        } finally {\n            if (traceTag != 0) {\n                Trace.traceEnd(traceTag);\n            }\n        }\n        if (logging != null) {\n            logging.println(\"<<<<< Finished to \" + msg.target + \" \" + msg.callback);\n        }\n        // Make sure that during the course of dispatching the\n        // identity of the thread wasn't corrupted.\n        final long newIdent = Binder.clearCallingIdentity();\n        if (ident != newIdent) {\n            Log.wtf(TAG, \"Thread identity changed from 0x\"\n                    + Long.toHexString(ident) + \" to 0x\"\n                    + Long.toHexString(newIdent) + \" while dispatching to \"\n                    + msg.target.getClass().getName() + \" \"\n                    + msg.callback + \" what=\" + msg.what);\n        }\n        msg.recycleUnchecked();\n    }\n}\n```\n `Looper.loop()`的核心就是取出Message，而取出Message的核心就是`MeesageQueue.next()`：\n```\n Message next() {\n    // Return here if the message loop has already quit and been disposed.\n    // This can happen if the application tries to restart a looper after quit\n    // which is not supported.\n    final long ptr = mPtr;\n    if (ptr == 0) {\n        return null;\n    }\n    int pendingIdleHandlerCount = -1; // -1 only during first iteration\n    int nextPollTimeoutMillis = 0;\n    for (;;) {\n        if (nextPollTimeoutMillis != 0) {\n            Binder.flushPendingCommands();\n        }\n        //唤醒Looper.loop()的native方法\n        nativePollOnce(ptr, nextPollTimeoutMillis);\n        synchronized (this) {\n            // Try to retrieve the next message.  Return if found.\n            final long now = SystemClock.uptimeMillis();\n            Message prevMsg = null;\n            Message msg = mMessages;\n            if (msg != null && msg.target == null) {\n                // Stalled by a barrier.  Find the next asynchronous message in the \n                do {\n                    prevMsg = msg;\n                    msg = msg.next;\n                } while (msg != null && !msg.isAsynchronous());\n            }\n            if (msg != null) {\n                if (now < msg.when) {\n                    // Next message is not ready.  Set a timeout to wake up when it \n                    nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.M\n                } else {\n                    // Got a message.\n                    mBlocked = false;\n                    if (prevMsg != null) {\n                        prevMsg.next = msg.next;\n                    } else {\n                        mMessages = msg.next;\n                    }\n                    msg.next = null;\n                    if (DEBUG) Log.v(TAG, \"Returning message: \" + msg);\n                    msg.markInUse();\n                    return msg;\n                }\n            } else {\n                // No more messages.\n                nextPollTimeoutMillis = -1;\n            }\n            // Process the quit message now that all pending messages have been hand\n            if (mQuitting) {\n                dispose();\n                return null;\n            }\n            // If first time idle, then get the number of idlers to run.\n            // Idle handles only run if the queue is empty or if the first message\n            // in the queue (possibly a barrier) is due to be handled in the future.\n            if (pendingIdleHandlerCount < 0\n                    && (mMessages == null || now < mMessages.when)) {\n                pendingIdleHandlerCount = mIdleHandlers.size();\n            }\n            if (pendingIdleHandlerCount <= 0) {\n                // No idle handlers to run.  Loop and wait some more.\n                mBlocked = true;\n                continue;\n            }\n            if (mPendingIdleHandlers == null) {\n                mPendingIdleHandlers = new IdleHandler[Math.max(pendingIdleHandlerCo\n            }\n            mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);\n        }\n        // Run the idle handlers.\n        // We only ever reach this code block during the first iteration.\n        for (int i = 0; i < pendingIdleHandlerCount; i++) {\n            final IdleHandler idler = mPendingIdleHandlers[i];\n            mPendingIdleHandlers[i] = null; // release the reference to the handler\n            boolean keep = false;\n            try {\n                keep = idler.queueIdle();\n            } catch (Throwable t) {\n                Log.wtf(TAG, \"IdleHandler threw exception\", t);\n            }\n            if (!keep) {\n                synchronized (this) {\n                    mIdleHandlers.remove(idler);\n                }\n            }\n        }\n        // Reset the idle handler count to 0 so we do not run them again.\n        pendingIdleHandlerCount = 0;\n        // While calling an idle handler, a new message could have been delivered\n        // so go back and look again for a pending message without waiting.\n        nextPollTimeoutMillis = 0;\n    }\n}\n```\n 取出Meesage的代码有些多，大部分都是一些优化逻辑：next() 方法还做了其他一些事情，这些其它事情是为了提高系统效果，利用消息队列在空闲时通过 idle handler 做一些事情，比如 gc 等等。\n\n## 结语 ##\n到这里Handler源码的浅析就结束了，总结在最上方，建议各位看官再去看一下总结加深印象。\n\n","source":"_posts/Android-Handler.md","raw":"---\ntitle: Android_Handler机制\ndate: 2017-05-15 14:57:07\ntags:\n   - Android\n---\nHandler是Android消息通讯当中最常用的方式之一。\n本篇小文将会从Handler的源码角度去浅析Handler。\n## 总结 ##\n因为Handler这个东西其实大家都会用，源码也多多少少地了解过，所以直接将最关键的话，写到前面，对源码感兴趣的看官可以在看完总结后再往下浏览源码：\n\n1. 创建Handler\n```\n    Handler handler = new Handler();\n```\n 在主线程当中，可以直接进行Handler的创建。如果是在子线程当中，在创建之前必须先初始化Looper，否则会RuntimeException:\n```\n    Looper.prepare();\n    Handler handler = new Handler();\n    handler.sendEmptyMessage(8);\n    Looper.loop();\n```\n 在初始化Looper的同时，一定要调用`Looper.loop()`来启动循环，否则Handler仍然无法正常接收。\n 并且因为`Looper.loop()`有死循环的存在，`Looper.loop()`之后的代码将无法执行，所以需要将`Looper.loop()`放在代码的最后，详情可参考`ActivityThread`中的main方法创建Looper的流程。\n 查看Handler的构造方法可以发现，其实Looper是Handler必要元素，但是在主线程初始化的时候，Looper已经初始化完成，所以无需再创建Looper，但是子线程的Looper需要我们自己初始化。\n 并且Looper在每个线程只能存在一个，如果再去手动创建Looper也会抛出RuntimeException。\n\n2. 发送Handler\nhandler的发送有很多方法，包括发送延时Handler、即时Handler、MessageHandler等等，但是查看这些发送方法的源码，就会发现这些发送Message的方法最终都会调用`MessageQueue.enqueueMessage()`方法。\n这个方法其实就是将我们发送的Message入队到MessageQueue队列中，这样，我们的消息就已经发送成功，等待执行了。\n3. 取出Handler\n在`Looper.prepare()`的同时，总会执行`looper.loop()`语句与之对应。\n查看`loop()`源码会发现，这个方法中有一个for(;;)的死循环，会无限执行`MessageQueue.next()`，而`MessageQueue`就是我们上一步将Meesage入队的对象。\n也就是说在创建Looper时，就会启动`MessageQueue`的无限遍历。如果`MessageQueue`为空，`Looper.loop()`就会进入休眠，直到再有Message插入到`MessageQueue`中。\n如果取到Message则会调用message.target.dispatchMessage()，将消息分发给对应的Handler。\n4. 如何在`loop()`休眠之后唤醒`loop()`？\n在Meesage入队的时候，也就是执行`MessageQueue.enqueueMessage()`方法时，`enqueueMessage()`有一个`nativeWeak()`的native方法，如果有消息进入，并且Looper是休眠状态，则会执行该方法唤醒Looper:\n```\n// We can assume mPtr != 0 because mQuitting is false.\nif (needWake) {\n    nativeWake(mPtr);\n}\n```\n5. 整体流程\n先调用`Looper.prepare()`创建Looper，在创建的同时会自动调用`Looper.loop()`执行死循环loop()。注意`Looper.loop()`一定放到代码的最后一行。\n死循环中会执行`MessageQueue.next()`方法去取出队列中的消息，当消息为空时，`MessageQueue.next()`方法中会执行`nativePollOnce()`的native方法休眠`Looper.loop()`死循环。当有新的消息插入到`MessageQueue`中，也就是调用`MessageQueue.enqueueMessage()`方法，这个方法当中会判断Looper是否是休眠状态，如果是休眠状态会执行`nativeWeak()`的native方法来唤醒Looper()。\n\n## Handler的使用 ##\n\n1. 主线程\n在`主线程`当中，Handler可以作为一个成员变量直接进行创建：\n    ```\n    //注意，Handler属于android.os包\n   private Handler handler = new Handler() {\n        @Override\n        public void handleMessage(Message msg) {\n            System.out.println(\"主线程的Handler\");\n        }\n    };\n    ```\n\n 接着我们试着发送Handler：\n    ```\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        //发送一个空Handler，what为888，延迟3秒到达\n        handler.sendEmptyMessageDelayed(888,3000);\n    }\n    ```\n 发送Handler有很多方法：发送空Message、发送延迟的空Message、发送Message、发送延迟的Message等：\n![](http://7xvzby.com1.z0.glb.clouddn.com/handler/handler_send_funcation.png)\n\n 接着我们运行项目，就会发现3s后控制台有Log的打印。\n2. 子线程\n在`子线程`中创建Handler的流程，和在`主线程`基本一致，只是多了一步而已，但这一步非常关键。\n我们先按照`主线程`的步骤，看看会有什么问题。\n在`子线程`中创建Handler：\n```\nnew Thread(){\n    @Override\n    public void run() {\n        super.run();\n        Handler handler = new Handler(){\n             @Override\n            public void handleMessage(Message msg) {\n                System.out.println(\"子线程的Handler\");\n            }\n        };\n    }\n}.start();\n```\n 接着我们运行项目，会发现项目崩溃了：\n```\njava.lang.RuntimeException: Can''t create handler inside thread that has not called Looper.prepare()\nat android.os.Handler.<init>(Handler.java:200)\nat android.os.Handler.<init>(Handler.java:114)\nat com.my.oo.MainActivity$2$1.<init>(MainActivity.java:0)\n```\n 很明显，错误信息说的是**在当前线程中创建Handler失败因为没有执行Looper.prepare()**。\n 那我们按照错误原因，在创建Handler之前，加上`Looper.prepare()`:\n```\n//子线程\nnew Thread(){\n    @Override\n    public void run() {\n        super.run();\n        //添加Looper.prepare()；\n        Looper.prepare();\n        //之后再创建Handler\n        Handler handler = new Handler(){\n             @Override\n            public void handleMessage(Message msg) {\n                System.out.println(\"子线程的Handler\");\n            }\n        };\n        //发送消息\n        handler.sendEmptyMessage(111);\n    }\n}.start();\n```\n 这次再运行项目，我们就会发现项目正常运行没有问题。但是发送Handler仍然无法接收，那是因为我们没有启动Looper的遍历：\n```\n//子线程\nnew Thread(){\n    @Override\n    public void run() {\n        super.run();\n        //添加Looper.prepare()；\n        Looper.prepare();\n        //之后再创建Handler\n        Handler handler = new Handler(){\n             @Override\n            public void handleMessage(Message msg) {\n                System.out.println(\"子线程的Handler\");\n            }\n        };\n        //发送消息\n        handler.sendEmptyMessage(111);\n        //启动Looper的遍历功能\n        Looper.loop();\n    }\n}.start();\n```\n 这里一定要注意，**`Looper.loop()`必须放到代码的最后。因为`Looper.loop()`中有死循环，会导致之后的代码无法执行**。这里可以等到查看`主线程`创建过程的源码时证实。\n3. 使用总结\nHandler的使用就是这么简单，要注意的就是`子线程`当中使用Handler时，一定要先调用`Looper.prepare()`，最后调用`Looper.loop()`，否则项目会崩溃或无法接收Handler。至于为什么会这样，我们在源码里面找原因。\n\n## 源码解析 ##\n1. Handler创建\n我们先看Handler的构造方法：\n```\npublic Handler(Callback callback, boolean async) {\n    //....省略部分代码\n    mLooper = Looper.myLooper();\n    if (mLooper == null) {\n        throw new RuntimeException(\n            \"Can't create handler inside thread that has not called Looper.prepare()\");\n    }\n    mQueue = mLooper.mQueue;\n    mCallback = callback;\n    mAsynchronous = async;\n}\n```\n 我们可以看到，Handler的构造方法当中是去获取了一个叫做`Looper`的类对象，如果该对象为空，就会抛出刚才我们上面发生的异常。所以我们需要在创建Handler之前，一定要先执行`Looper.prepare()`。\n 那么问题来了，为什么`主线程`就不需要执行`Looper.prepare()`就可以直接创建Handler呢？\n 我们可以随意根据代码猜测一下：\n 这里Handler的构造方法的代码已经很明显了，`Looper`类是必要的，那么`主线程`可以成功创建Handler，是不是就代表着主线程的`Looper`不为空呢？\n![](http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/zhenxiang_just_one.jpeg)\n 是不是主线程在初始化的时候`Looper`也跟着初始化了呢！？带着看破一切(瞎猜)的思路，我们来看`主线程`的初始化源码。\n经过了长时间的Google，我们知道了主线程类叫做:`ActivityThread`。\n 该类当中有main方法：\n```\npublic static void main(String[] args) {\n    //....省略部分代码\n    Looper.prepareMainLooper();\n    ActivityThread thread = new ActivityThread();\n    thread.attach(false);\n    if (sMainThreadHandler == null) {\n        sMainThreadHandler = thread.getHandler();\n    }\n    if (false) {\n        Looper.myLooper().setMessageLogging(new\n                LogPrinter(Log.DEBUG, \"ActivityThread\"));\n    }\n    // End of event ActivityThreadMain.\n    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\n    Looper.loop();\n    throw new RuntimeException(\"Main thread loop unexpectedly exited\");\n}\n```\n 我们很自然（惊奇）地发现，在主线程创建的过程中，果然（真的）有与`Looper`类相关的内容。\n 这里有重点（敲黑板）：之前说的Looper.loop()后的代码不会执行，这里得到了证实：\n```\nLooper.loop();\nthrow new RuntimeException(\"Main thread loop unexpectedly exited\");\n```\n 下面异常的意思是：主线程的Looper意外退出。\n 也就是当Looper.loop()执行失败的意思，但是当Looper.loop()执行成功时，是不会执行下面的代码的！因为**`Looper.loop()`必须放到方法的最后，否则会导致后面的代码无法执行**。\n 好的，接着往下看，点进`prepareMainLooper()`会发现，其实内部就是调用了`prepare()`：\n```\npublic static void prepareMainLooper() {\n    prepare(false);\n    synchronized (Looper.class) {\n        if (sMainLooper != null) {\n            throw new IllegalStateException(\"The main Looper has already been prepared.\");\n        }\n        sMainLooper = myLooper();\n    }\n}\n```\n 所以到现在，我们解决了我们的第一个问题：为什么主线程当中不需要执行`Looper.prepare()`。\n 接着，我们去浏览`Looper.prepare()`：\n```\nprivate static void prepare(boolean quitAllowed) {\n    if (sThreadLocal.get() != null) {\n        throw new RuntimeException(\"Only one Looper may be created per thread\");\n    }\n    //new Looper()并设置给当前线程\n    sThreadLocal.set(new Looper(quitAllowed));\n}\n```\n 没什么东西，前面对线程当中的Looper进行了判空，如果不为空则会抛出`RuntimeEception`。\n 这也就是说，每个线程当中只能有一个Looper，当你尝试去创建第二时，就会发生异常，所以`Looper.prepare()`每个线程中只能调用一次。\n 后面则new了Looper并且设置给当前线程。\n`new Looper()`中初始化了`MessageQueue`：\n```\nprivate Looper(boolean quitAllowed) {\n    mQueue = new MessageQueue(quitAllowed);\n    mThread = Thread.currentThread();\n}\n```\n 到这里，Handler的创建就完成了！\n\n2. Handler发送Meesage\nHandler的发送方法有很多，包括发送延时Handler、及时Handler、空Hanlder等等。\n查看源码会发现，所有发送方法最后调用的都是同一个方法：`MessageQueue`的`enqueueMessage()`。\n有的看官就会问：Handler中怎么会有`MeesageQueue`？\n这个在上面`new Looper()`的源码中已经体现了：\n`new Handler()`中`new Looper()`，\n`new Looper()`中`new MessageQueue()`。\n所以其实初始化Handler的同时，`Looper`和`MeesageQueue`都已经初始化完成了。\n下面我们来看消息入队方法`MessageQueue.enqueueMessage()`的全部源码：\n```\nboolean enqueueMessage(Message msg, long when) {\n        //Meesage是否可用\n        //这里的msg.target指的就是发送该Message的Handler\n        if (msg.target == null) {\n            throw new IllegalArgumentException(\"Message must have a target.\");\n        }\n        if (msg.isInUse()) {\n            throw new IllegalStateException(msg + \" This message is already in use.\");\n        }\n        //同步锁\n        synchronized (this) {\n            //判断是否调用了quit()方法，即取消信息\n            //如果调用了，则其实Handler的Looper已经销毁，无法发送消息\n            if (mQuitting) {\n                IllegalStateException e = new IllegalStateException(\n                        msg.target + \" sending message to a Handler on a dead thread\");\n                Log.w(TAG, e.getMessage(), e);\n                msg.recycle();\n                return false;\n            }\n\n            //将消息添加到MessageQueue的具体操作\n            //每来一个新的消息，就会按照延迟时间的先后重新进行排序\n            msg.markInUse();\n            msg.when = when;\n            Message p = mMessages;\n            boolean needWake;\n            if (p == null || when == 0 || when < p.when) {\n                // New head, wake up the event queue if blocked.\n                msg.next = p;\n                mMessages = msg;\n                needWake = mBlocked;\n            } else {\n                Message prev;\n                for (;;) {\n                    prev = p;\n                    p = p.next;\n                    if (p == null || when < p.when) {\n                        break;\n                    }\n                    if (needWake && p.isAsynchronous()) {\n                        needWake = false;\n                    }\n                }\n                msg.next = p; // invariant: p == prev.next\n                prev.next = msg;\n            }\n\n            //如果Looper.loop()是休眠状态\n            //则调用native方法唤醒loop()\n            //---重点---Looper的唤醒\n            if (needWake) {\n                nativeWake(mPtr);\n            }\n        }\n        return true;\n    }\n```\n 将Message入队到`MeesageQueue`的核心代码，就是这些。\n 根据注释也基本能理解该方法的作用。\n3. 取出Message\n取出Meesage想必大家都知道在哪里取出：`Looper.loop()`：\n```\npublic static void loop() {\n    //Looper的判空\n    final Looper me = myLooper();\n    if (me == null) {\n        throw new RuntimeException(\"No Looper; Looper.prepare() wasn't called on this thread.\");\n    }\n    final MessageQueue queue = me.mQueue;\n    // Make sure the identity of this thread is that of the local process,\n    // and keep track of what that identity token actually is.\n    Binder.clearCallingIdentity();\n    final long ident = Binder.clearCallingIdentity();\n    //取出Message，死循环\n    for (;;) {\n        //取出Meesage的核心代码\n        //在当next()返回为空时，next()中会休眠loop()\n        Message msg = queue.next(); // might block\n        if (msg == null) {\n            // No message indicates that the message queue is quitting.\n            return;\n        }\n        // This must be in a local variable, in case a UI event sets the logger\n        final Printer logging = me.mLogging;\n        if (logging != null) {\n            logging.println(\">>>>> Dispatching to \" + msg.target + \" \" +\n                    msg.callback + \": \" + msg.what);\n        }\n        final long traceTag = me.mTraceTag;\n        if (traceTag != 0 && Trace.isTagEnabled(traceTag)) {\n            Trace.traceBegin(traceTag, msg.target.getTraceName(msg));\n        }\n        try {\n            msg.target.dispatchMessage(msg);\n        } finally {\n            if (traceTag != 0) {\n                Trace.traceEnd(traceTag);\n            }\n        }\n        if (logging != null) {\n            logging.println(\"<<<<< Finished to \" + msg.target + \" \" + msg.callback);\n        }\n        // Make sure that during the course of dispatching the\n        // identity of the thread wasn't corrupted.\n        final long newIdent = Binder.clearCallingIdentity();\n        if (ident != newIdent) {\n            Log.wtf(TAG, \"Thread identity changed from 0x\"\n                    + Long.toHexString(ident) + \" to 0x\"\n                    + Long.toHexString(newIdent) + \" while dispatching to \"\n                    + msg.target.getClass().getName() + \" \"\n                    + msg.callback + \" what=\" + msg.what);\n        }\n        msg.recycleUnchecked();\n    }\n}\n```\n `Looper.loop()`的核心就是取出Message，而取出Message的核心就是`MeesageQueue.next()`：\n```\n Message next() {\n    // Return here if the message loop has already quit and been disposed.\n    // This can happen if the application tries to restart a looper after quit\n    // which is not supported.\n    final long ptr = mPtr;\n    if (ptr == 0) {\n        return null;\n    }\n    int pendingIdleHandlerCount = -1; // -1 only during first iteration\n    int nextPollTimeoutMillis = 0;\n    for (;;) {\n        if (nextPollTimeoutMillis != 0) {\n            Binder.flushPendingCommands();\n        }\n        //唤醒Looper.loop()的native方法\n        nativePollOnce(ptr, nextPollTimeoutMillis);\n        synchronized (this) {\n            // Try to retrieve the next message.  Return if found.\n            final long now = SystemClock.uptimeMillis();\n            Message prevMsg = null;\n            Message msg = mMessages;\n            if (msg != null && msg.target == null) {\n                // Stalled by a barrier.  Find the next asynchronous message in the \n                do {\n                    prevMsg = msg;\n                    msg = msg.next;\n                } while (msg != null && !msg.isAsynchronous());\n            }\n            if (msg != null) {\n                if (now < msg.when) {\n                    // Next message is not ready.  Set a timeout to wake up when it \n                    nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.M\n                } else {\n                    // Got a message.\n                    mBlocked = false;\n                    if (prevMsg != null) {\n                        prevMsg.next = msg.next;\n                    } else {\n                        mMessages = msg.next;\n                    }\n                    msg.next = null;\n                    if (DEBUG) Log.v(TAG, \"Returning message: \" + msg);\n                    msg.markInUse();\n                    return msg;\n                }\n            } else {\n                // No more messages.\n                nextPollTimeoutMillis = -1;\n            }\n            // Process the quit message now that all pending messages have been hand\n            if (mQuitting) {\n                dispose();\n                return null;\n            }\n            // If first time idle, then get the number of idlers to run.\n            // Idle handles only run if the queue is empty or if the first message\n            // in the queue (possibly a barrier) is due to be handled in the future.\n            if (pendingIdleHandlerCount < 0\n                    && (mMessages == null || now < mMessages.when)) {\n                pendingIdleHandlerCount = mIdleHandlers.size();\n            }\n            if (pendingIdleHandlerCount <= 0) {\n                // No idle handlers to run.  Loop and wait some more.\n                mBlocked = true;\n                continue;\n            }\n            if (mPendingIdleHandlers == null) {\n                mPendingIdleHandlers = new IdleHandler[Math.max(pendingIdleHandlerCo\n            }\n            mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);\n        }\n        // Run the idle handlers.\n        // We only ever reach this code block during the first iteration.\n        for (int i = 0; i < pendingIdleHandlerCount; i++) {\n            final IdleHandler idler = mPendingIdleHandlers[i];\n            mPendingIdleHandlers[i] = null; // release the reference to the handler\n            boolean keep = false;\n            try {\n                keep = idler.queueIdle();\n            } catch (Throwable t) {\n                Log.wtf(TAG, \"IdleHandler threw exception\", t);\n            }\n            if (!keep) {\n                synchronized (this) {\n                    mIdleHandlers.remove(idler);\n                }\n            }\n        }\n        // Reset the idle handler count to 0 so we do not run them again.\n        pendingIdleHandlerCount = 0;\n        // While calling an idle handler, a new message could have been delivered\n        // so go back and look again for a pending message without waiting.\n        nextPollTimeoutMillis = 0;\n    }\n}\n```\n 取出Meesage的代码有些多，大部分都是一些优化逻辑：next() 方法还做了其他一些事情，这些其它事情是为了提高系统效果，利用消息队列在空闲时通过 idle handler 做一些事情，比如 gc 等等。\n\n## 结语 ##\n到这里Handler源码的浅析就结束了，总结在最上方，建议各位看官再去看一下总结加深印象。\n\n","slug":"Android-Handler","published":1,"updated":"2018-08-24T09:36:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7sxduw0002hnnfs523eyaf","content":"<p>Handler是Android消息通讯当中最常用的方式之一。<br>本篇小文将会从Handler的源码角度去浅析Handler。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>因为Handler这个东西其实大家都会用，源码也多多少少地了解过，所以直接将最关键的话，写到前面，对源码感兴趣的看官可以在看完总结后再往下浏览源码：</p>\n<ol>\n<li><p>创建Handler</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Handler</span> <span class=\"keyword\">handler</span> = <span class=\"keyword\">new</span> <span class=\"keyword\">Handler</span>();</span><br></pre></td></tr></table></figure>\n<p>在主线程当中，可以直接进行Handler的创建。如果是在子线程当中，在创建之前必须先初始化Looper，否则会RuntimeException:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Looper.prepare();</span><br><span class=\"line\"><span class=\"keyword\">Handler</span> <span class=\"keyword\">handler</span> = <span class=\"keyword\">new</span> <span class=\"keyword\">Handler</span>();</span><br><span class=\"line\">handler.sendEmptyMessage(<span class=\"number\">8</span>);</span><br><span class=\"line\">Looper.loop();</span><br></pre></td></tr></table></figure>\n<p>在初始化Looper的同时，一定要调用<code>Looper.loop()</code>来启动循环，否则Handler仍然无法正常接收。<br>并且因为<code>Looper.loop()</code>有死循环的存在，<code>Looper.loop()</code>之后的代码将无法执行，所以需要将<code>Looper.loop()</code>放在代码的最后，详情可参考<code>ActivityThread</code>中的main方法创建Looper的流程。<br>查看Handler的构造方法可以发现，其实Looper是Handler必要元素，但是在主线程初始化的时候，Looper已经初始化完成，所以无需再创建Looper，但是子线程的Looper需要我们自己初始化。<br>并且Looper在每个线程只能存在一个，如果再去手动创建Looper也会抛出RuntimeException。</p>\n</li>\n<li><p>发送Handler<br>handler的发送有很多方法，包括发送延时Handler、即时Handler、MessageHandler等等，但是查看这些发送方法的源码，就会发现这些发送Message的方法最终都会调用<code>MessageQueue.enqueueMessage()</code>方法。<br>这个方法其实就是将我们发送的Message入队到MessageQueue队列中，这样，我们的消息就已经发送成功，等待执行了。</p>\n</li>\n<li>取出Handler<br>在<code>Looper.prepare()</code>的同时，总会执行<code>looper.loop()</code>语句与之对应。<br>查看<code>loop()</code>源码会发现，这个方法中有一个for(;;)的死循环，会无限执行<code>MessageQueue.next()</code>，而<code>MessageQueue</code>就是我们上一步将Meesage入队的对象。<br>也就是说在创建Looper时，就会启动<code>MessageQueue</code>的无限遍历。如果<code>MessageQueue</code>为空，<code>Looper.loop()</code>就会进入休眠，直到再有Message插入到<code>MessageQueue</code>中。<br>如果取到Message则会调用message.target.dispatchMessage()，将消息分发给对应的Handler。</li>\n<li><p>如何在<code>loop()</code>休眠之后唤醒<code>loop()</code>？<br>在Meesage入队的时候，也就是执行<code>MessageQueue.enqueueMessage()</code>方法时，<code>enqueueMessage()</code>有一个<code>nativeWeak()</code>的native方法，如果有消息进入，并且Looper是休眠状态，则会执行该方法唤醒Looper:</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// We can <span class=\"built_in\">assume</span> mPtr != <span class=\"number\">0</span> because mQuitting <span class=\"built_in\">is</span> <span class=\"literal\">false</span>.</span><br><span class=\"line\"><span class=\"keyword\">if</span> (needWake) &#123;</span><br><span class=\"line\">    nativeWake(mPtr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>整体流程<br>先调用<code>Looper.prepare()</code>创建Looper，在创建的同时会自动调用<code>Looper.loop()</code>执行死循环loop()。注意<code>Looper.loop()</code>一定放到代码的最后一行。<br>死循环中会执行<code>MessageQueue.next()</code>方法去取出队列中的消息，当消息为空时，<code>MessageQueue.next()</code>方法中会执行<code>nativePollOnce()</code>的native方法休眠<code>Looper.loop()</code>死循环。当有新的消息插入到<code>MessageQueue</code>中，也就是调用<code>MessageQueue.enqueueMessage()</code>方法，这个方法当中会判断Looper是否是休眠状态，如果是休眠状态会执行<code>nativeWeak()</code>的native方法来唤醒Looper()。</p>\n</li>\n</ol>\n<h2 id=\"Handler的使用\"><a href=\"#Handler的使用\" class=\"headerlink\" title=\"Handler的使用\"></a>Handler的使用</h2><ol>\n<li><p>主线程<br>在<code>主线程</code>当中，Handler可以作为一个成员变量直接进行创建：</p>\n <figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//注意，Handler属于android.os包</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Handler <span class=\"keyword\">handler</span> = <span class=\"keyword\">new</span> Handler() &#123;</span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"主线程的Handler\"</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>接着我们试着发送Handler：</p>\n <figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//发送一个空Handler，what为888，延迟3秒到达</span></span><br><span class=\"line\">    <span class=\"keyword\">handler</span>.sendEmptyMessageDelayed(<span class=\"number\">888</span>,<span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发送Handler有很多方法：发送空Message、发送延迟的空Message、发送Message、发送延迟的Message等：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/handler/handler_send_funcation.png\" alt=\"\"></p>\n<p>接着我们运行项目，就会发现3s后控制台有Log的打印。</p>\n</li>\n<li><p>子线程<br>在<code>子线程</code>中创建Handler的流程，和在<code>主线程</code>基本一致，只是多了一步而已，但这一步非常关键。<br>我们先按照<code>主线程</code>的步骤，看看会有什么问题。<br>在<code>子线程</code>中创建Handler：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Thread()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">        Handler <span class=\"keyword\">handler</span> = <span class=\"keyword\">new</span> Handler()&#123;</span><br><span class=\"line\">             <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"子线程的Handler\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;.start();</span><br></pre></td></tr></table></figure>\n<p>接着我们运行项目，会发现项目崩溃了：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java<span class=\"selector-class\">.lang</span><span class=\"selector-class\">.RuntimeException</span>: Can<span class=\"string\">''</span>t create handler inside thread that has not called Looper.prepare()</span><br><span class=\"line\">at android<span class=\"selector-class\">.os</span><span class=\"selector-class\">.Handler</span>.&lt;init&gt;(Handler<span class=\"selector-class\">.java</span>:<span class=\"number\">200</span>)</span><br><span class=\"line\">at android<span class=\"selector-class\">.os</span><span class=\"selector-class\">.Handler</span>.&lt;init&gt;(Handler<span class=\"selector-class\">.java</span>:<span class=\"number\">114</span>)</span><br><span class=\"line\">at com<span class=\"selector-class\">.my</span><span class=\"selector-class\">.oo</span><span class=\"selector-class\">.MainActivity</span>$<span class=\"number\">2</span>$<span class=\"number\">1</span>.&lt;init&gt;(MainActivity<span class=\"selector-class\">.java</span>:<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>很明显，错误信息说的是<strong>在当前线程中创建Handler失败因为没有执行Looper.prepare()</strong>。<br>那我们按照错误原因，在创建Handler之前，加上<code>Looper.prepare()</code>:</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//子线程</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">        <span class=\"comment\">//添加Looper.prepare()；</span></span><br><span class=\"line\">        Looper.prepare();</span><br><span class=\"line\">        <span class=\"comment\">//之后再创建Handler</span></span><br><span class=\"line\">        Handler <span class=\"keyword\">handler</span> = <span class=\"keyword\">new</span> Handler()&#123;</span><br><span class=\"line\">             <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"子线程的Handler\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//发送消息</span></span><br><span class=\"line\">        <span class=\"keyword\">handler</span>.sendEmptyMessage(<span class=\"number\">111</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;.start();</span><br></pre></td></tr></table></figure>\n<p>这次再运行项目，我们就会发现项目正常运行没有问题。但是发送Handler仍然无法接收，那是因为我们没有启动Looper的遍历：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//子线程</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">        <span class=\"comment\">//添加Looper.prepare()；</span></span><br><span class=\"line\">        Looper.prepare();</span><br><span class=\"line\">        <span class=\"comment\">//之后再创建Handler</span></span><br><span class=\"line\">        Handler <span class=\"keyword\">handler</span> = <span class=\"keyword\">new</span> Handler()&#123;</span><br><span class=\"line\">             <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"子线程的Handler\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//发送消息</span></span><br><span class=\"line\">        <span class=\"keyword\">handler</span>.sendEmptyMessage(<span class=\"number\">111</span>);</span><br><span class=\"line\">        <span class=\"comment\">//启动Looper的遍历功能</span></span><br><span class=\"line\">        Looper.loop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;.start();</span><br></pre></td></tr></table></figure>\n<p>这里一定要注意，<strong><code>Looper.loop()</code>必须放到代码的最后。因为<code>Looper.loop()</code>中有死循环，会导致之后的代码无法执行</strong>。这里可以等到查看<code>主线程</code>创建过程的源码时证实。</p>\n</li>\n<li>使用总结<br>Handler的使用就是这么简单，要注意的就是<code>子线程</code>当中使用Handler时，一定要先调用<code>Looper.prepare()</code>，最后调用<code>Looper.loop()</code>，否则项目会崩溃或无法接收Handler。至于为什么会这样，我们在源码里面找原因。</li>\n</ol>\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><ol>\n<li><p>Handler创建<br>我们先看Handler的构造方法：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span>(<span class=\"params\">Callback callback, boolean <span class=\"keyword\">async</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//....省略部分代码</span></span><br><span class=\"line\">    mLooper = Looper.myLooper();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mLooper == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</span><br><span class=\"line\">            <span class=\"string\">\"Can't create handler inside thread that has not called Looper.prepare()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mQueue = mLooper.mQueue;</span><br><span class=\"line\">    mCallback = callback;</span><br><span class=\"line\">    mAsynchronous = <span class=\"keyword\">async</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看到，Handler的构造方法当中是去获取了一个叫做<code>Looper</code>的类对象，如果该对象为空，就会抛出刚才我们上面发生的异常。所以我们需要在创建Handler之前，一定要先执行<code>Looper.prepare()</code>。<br>那么问题来了，为什么<code>主线程</code>就不需要执行<code>Looper.prepare()</code>就可以直接创建Handler呢？<br>我们可以随意根据代码猜测一下：<br>这里Handler的构造方法的代码已经很明显了，<code>Looper</code>类是必要的，那么<code>主线程</code>可以成功创建Handler，是不是就代表着主线程的<code>Looper</code>不为空呢？<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/zhenxiang_just_one.jpeg\" alt=\"\"><br>是不是主线程在初始化的时候<code>Looper</code>也跟着初始化了呢！？带着看破一切(瞎猜)的思路，我们来看<code>主线程</code>的初始化源码。<br>经过了长时间的Google，我们知道了主线程类叫做:<code>ActivityThread</code>。<br>该类当中有main方法：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> void main(<span class=\"keyword\">String</span>[] args) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//....省略部分代码</span></span><br><span class=\"line\">    Looper.prepareMainLooper();</span><br><span class=\"line\">    ActivityThread thread = <span class=\"keyword\">new</span> <span class=\"type\">ActivityThread</span>();</span><br><span class=\"line\">    thread.attach(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sMainThreadHandler == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        sMainThreadHandler = thread.getHandler();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        Looper.myLooper().setMessageLogging(<span class=\"keyword\">new</span><span class=\"type\"></span></span><br><span class=\"line\"><span class=\"type\"></span>                LogPrinter(Log.DEBUG, <span class=\"string\">\"ActivityThread\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// End of event ActivityThreadMain.</span></span><br><span class=\"line\">    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class=\"line\">    Looper.loop();</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">RuntimeException</span>(<span class=\"string\">\"Main thread loop unexpectedly exited\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们很自然（惊奇）地发现，在主线程创建的过程中，果然（真的）有与<code>Looper</code>类相关的内容。<br>这里有重点（敲黑板）：之前说的Looper.loop()后的代码不会执行，这里得到了证实：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Looper.<span class=\"built_in\">loop</span>();</span><br><span class=\"line\"><span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Main thread loop unexpectedly exited\"</span>);</span><br></pre></td></tr></table></figure>\n<p>下面异常的意思是：主线程的Looper意外退出。<br>也就是当Looper.loop()执行失败的意思，但是当Looper.loop()执行成功时，是不会执行下面的代码的！因为<strong><code>Looper.loop()</code>必须放到方法的最后，否则会导致后面的代码无法执行</strong>。<br>好的，接着往下看，点进<code>prepareMainLooper()</code>会发现，其实内部就是调用了<code>prepare()</code>：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">prepareMainLooper</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    prepare(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (Looper.class) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sMainLooper != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"The main Looper has already been prepared.\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sMainLooper = myLooper();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以到现在，我们解决了我们的第一个问题：为什么主线程当中不需要执行<code>Looper.prepare()</code>。<br>接着，我们去浏览<code>Looper.prepare()</code>：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span>(<span class=\"params\">boolean quitAllowed</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sThreadLocal.<span class=\"keyword\">get</span>() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Only one Looper may be created per thread\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//new Looper()并设置给当前线程</span></span><br><span class=\"line\">    sThreadLocal.<span class=\"keyword\">set</span>(<span class=\"keyword\">new</span> Looper(quitAllowed));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>没什么东西，前面对线程当中的Looper进行了判空，如果不为空则会抛出<code>RuntimeEception</code>。<br>这也就是说，每个线程当中只能有一个Looper，当你尝试去创建第二时，就会发生异常，所以<code>Looper.prepare()</code>每个线程中只能调用一次。<br>后面则new了Looper并且设置给当前线程。<br><code>new Looper()</code>中初始化了<code>MessageQueue</code>：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Looper</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class=\"line\">    mQueue = <span class=\"keyword\">new</span> MessageQueue(quitAllowed);</span><br><span class=\"line\">    mThread = Thread.currentThread();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到这里，Handler的创建就完成了！</p>\n</li>\n<li><p>Handler发送Meesage<br>Handler的发送方法有很多，包括发送延时Handler、及时Handler、空Hanlder等等。<br>查看源码会发现，所有发送方法最后调用的都是同一个方法：<code>MessageQueue</code>的<code>enqueueMessage()</code>。<br>有的看官就会问：Handler中怎么会有<code>MeesageQueue</code>？<br>这个在上面<code>new Looper()</code>的源码中已经体现了：<br><code>new Handler()</code>中<code>new Looper()</code>，<br><code>new Looper()</code>中<code>new MessageQueue()</code>。<br>所以其实初始化Handler的同时，<code>Looper</code>和<code>MeesageQueue</code>都已经初始化完成了。<br>下面我们来看消息入队方法<code>MessageQueue.enqueueMessage()</code>的全部源码：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean enqueueMessage(Message msg, long <span class=\"keyword\">when</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Meesage是否可用</span></span><br><span class=\"line\">        <span class=\"comment\">//这里的msg.target指的就是发送该Message的Handler</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (msg.target == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> new IllegalArgumentException(<span class=\"string\">\"Message must have a target.\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (msg.isInUse()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> new IllegalStateException(msg + <span class=\"string\">\" This message is already in use.\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//同步锁</span></span><br><span class=\"line\">        synchronized (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//判断是否调用了quit()方法，即取消信息</span></span><br><span class=\"line\">            <span class=\"comment\">//如果调用了，则其实Handler的Looper已经销毁，无法发送消息</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mQuitting) &#123;</span><br><span class=\"line\">                IllegalStateException e = new IllegalStateException(</span><br><span class=\"line\">                        msg.target + <span class=\"string\">\" sending message to a Handler on a dead thread\"</span>);</span><br><span class=\"line\">                Log.w(TAG, e.getMessage(), e);</span><br><span class=\"line\">                msg.recycle();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//将消息添加到MessageQueue的具体操作</span></span><br><span class=\"line\">            <span class=\"comment\">//每来一个新的消息，就会按照延迟时间的先后重新进行排序</span></span><br><span class=\"line\">            msg.markInUse();</span><br><span class=\"line\">            msg.<span class=\"keyword\">when</span> = <span class=\"keyword\">when</span>;</span><br><span class=\"line\">            Message p = mMessages;</span><br><span class=\"line\">            boolean needWake;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == <span class=\"literal\">null</span> || <span class=\"keyword\">when</span> == <span class=\"number\">0</span> || <span class=\"keyword\">when</span> &lt; p.<span class=\"keyword\">when</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// New head, wake up the event queue if blocked.</span></span><br><span class=\"line\">                msg.next = p;</span><br><span class=\"line\">                mMessages = msg;</span><br><span class=\"line\">                needWake = mBlocked;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                Message prev;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">                    prev = p;</span><br><span class=\"line\">                    p = p.next;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (p == <span class=\"literal\">null</span> || <span class=\"keyword\">when</span> &lt; p.<span class=\"keyword\">when</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class=\"line\">                        needWake = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                msg.next = p; <span class=\"comment\">// invariant: p == prev.next</span></span><br><span class=\"line\">                prev.next = msg;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//如果Looper.loop()是休眠状态</span></span><br><span class=\"line\">            <span class=\"comment\">//则调用native方法唤醒loop()</span></span><br><span class=\"line\">            <span class=\"comment\">//---重点---Looper的唤醒</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (needWake) &#123;</span><br><span class=\"line\">                nativeWake(mPtr);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>将Message入队到<code>MeesageQueue</code>的核心代码，就是这些。<br>根据注释也基本能理解该方法的作用。</p>\n</li>\n<li><p>取出Message<br>取出Meesage想必大家都知道在哪里取出：<code>Looper.loop()</code>：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Looper的判空</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Looper me = myLooper();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (me == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"No Looper; Looper.prepare() wasn't called on this thread.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> MessageQueue queue = me.mQueue;</span><br><span class=\"line\">    <span class=\"comment\">// Make sure the identity of this thread is that of the local process,</span></span><br><span class=\"line\">    <span class=\"comment\">// and keep track of what that identity token actually is.</span></span><br><span class=\"line\">    Binder.clearCallingIdentity();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> ident = Binder.clearCallingIdentity();</span><br><span class=\"line\">    <span class=\"comment\">//取出Message，死循环</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//取出Meesage的核心代码</span></span><br><span class=\"line\">        <span class=\"comment\">//在当next()返回为空时，next()中会休眠loop()</span></span><br><span class=\"line\">        Message msg = queue.next(); <span class=\"comment\">// might block</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (msg == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// No message indicates that the message queue is quitting.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// This must be in a local variable, in case a UI event sets the logger</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Printer logging = me.mLogging;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logging != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            logging.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt; Dispatching to \"</span> + msg.<span class=\"keyword\">target</span> + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                    msg.callback + <span class=\"string\">\": \"</span> + msg.what);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> traceTag = me.mTraceTag;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (traceTag != <span class=\"number\">0</span> &amp;&amp; Trace.isTagEnabled(traceTag)) &#123;</span><br><span class=\"line\">            Trace.traceBegin(traceTag, msg.<span class=\"keyword\">target</span>.getTraceName(msg));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            msg.<span class=\"keyword\">target</span>.dispatchMessage(msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (traceTag != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                Trace.traceEnd(traceTag);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logging != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            logging.println(<span class=\"string\">\"&lt;&lt;&lt;&lt;&lt; Finished to \"</span> + msg.<span class=\"keyword\">target</span> + <span class=\"string\">\" \"</span> + msg.callback);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Make sure that during the course of dispatching the</span></span><br><span class=\"line\">        <span class=\"comment\">// identity of the thread wasn't corrupted.</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> newIdent = Binder.clearCallingIdentity();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ident != newIdent) &#123;</span><br><span class=\"line\">            Log.wtf(TAG, <span class=\"string\">\"Thread identity changed from 0x\"</span></span><br><span class=\"line\">                    + Long.toHexString(ident) + <span class=\"string\">\" to 0x\"</span></span><br><span class=\"line\">                    + Long.toHexString(newIdent) + <span class=\"string\">\" while dispatching to \"</span></span><br><span class=\"line\">                    + msg.<span class=\"keyword\">target</span>.getClass().getName() + <span class=\"string\">\" \"</span></span><br><span class=\"line\">                    + msg.callback + <span class=\"string\">\" what=\"</span> + msg.what);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        msg.recycleUnchecked();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Looper.loop()</code>的核心就是取出Message，而取出Message的核心就是<code>MeesageQueue.next()</code>：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Message <span class=\"keyword\">next</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Return here if the message loop has already quit and been disposed.</span></span><br><span class=\"line\">    <span class=\"comment\">// This can happen if the application tries to restart a looper after quit</span></span><br><span class=\"line\">    <span class=\"comment\">// which is not supported.</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> ptr = mPtr;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ptr == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pendingIdleHandlerCount = -<span class=\"number\">1</span>; <span class=\"comment\">// -1 only during first iteration</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> nextPollTimeoutMillis = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextPollTimeoutMillis != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            Binder.flushPendingCommands();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//唤醒Looper.loop()的native方法</span></span><br><span class=\"line\">        nativePollOnce(ptr, nextPollTimeoutMillis);</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Try to retrieve the next message.  Return if found.</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> now = SystemClock.uptimeMillis();</span><br><span class=\"line\">            Message prevMsg = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            Message msg = mMessages;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span> &amp;&amp; msg.target == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Stalled by a barrier.  Find the next asynchronous message in the </span></span><br><span class=\"line\">                <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                    prevMsg = msg;</span><br><span class=\"line\">                    msg = msg.<span class=\"keyword\">next</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">while</span> (msg != <span class=\"keyword\">null</span> &amp;&amp; !msg.isAsynchronous());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (now &lt; msg.when) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Next message is not ready.  Set a timeout to wake up when it </span></span><br><span class=\"line\">                    nextPollTimeoutMillis = (<span class=\"keyword\">int</span>) Math.min(msg.when - now, Integer.M</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Got a message.</span></span><br><span class=\"line\">                    mBlocked = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (prevMsg != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        prevMsg.<span class=\"keyword\">next</span> = msg.<span class=\"keyword\">next</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        mMessages = msg.<span class=\"keyword\">next</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    msg.<span class=\"keyword\">next</span> = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) Log.v(TAG, <span class=\"string\">\"Returning message: \"</span> + msg);</span><br><span class=\"line\">                    msg.markInUse();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// No more messages.</span></span><br><span class=\"line\">                nextPollTimeoutMillis = -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// Process the quit message now that all pending messages have been hand</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mQuitting) &#123;</span><br><span class=\"line\">                dispose();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// If first time idle, then get the number of idlers to run.</span></span><br><span class=\"line\">            <span class=\"comment\">// Idle handles only run if the queue is empty or if the first message</span></span><br><span class=\"line\">            <span class=\"comment\">// in the queue (possibly a barrier) is due to be handled in the future.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pendingIdleHandlerCount &lt; <span class=\"number\">0</span></span><br><span class=\"line\">                    &amp;&amp; (mMessages == <span class=\"keyword\">null</span> || now &lt; mMessages.when)) &#123;</span><br><span class=\"line\">                pendingIdleHandlerCount = mIdleHandlers.<span class=\"keyword\">size</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pendingIdleHandlerCount &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// No idle handlers to run.  Loop and wait some more.</span></span><br><span class=\"line\">                mBlocked = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mPendingIdleHandlers == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                mPendingIdleHandlers = <span class=\"keyword\">new</span> IdleHandler[Math.max(pendingIdleHandlerCo</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Run the idle handlers.</span></span><br><span class=\"line\">        <span class=\"comment\">// We only ever reach this code block during the first iteration.</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> IdleHandler idler = mPendingIdleHandlers[i];</span><br><span class=\"line\">            mPendingIdleHandlers[i] = <span class=\"keyword\">null</span>; <span class=\"comment\">// release the reference to the handler</span></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> keep = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                keep = idler.queueIdle();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                Log.wtf(TAG, <span class=\"string\">\"IdleHandler threw exception\"</span>, t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!keep) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">                    mIdleHandlers.remove(idler);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Reset the idle handler count to 0 so we do not run them again.</span></span><br><span class=\"line\">        pendingIdleHandlerCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// While calling an idle handler, a new message could have been delivered</span></span><br><span class=\"line\">        <span class=\"comment\">// so go back and look again for a pending message without waiting.</span></span><br><span class=\"line\">        nextPollTimeoutMillis = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>取出Meesage的代码有些多，大部分都是一些优化逻辑：next() 方法还做了其他一些事情，这些其它事情是为了提高系统效果，利用消息队列在空闲时通过 idle handler 做一些事情，比如 gc 等等。</p>\n</li>\n</ol>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>到这里Handler源码的浅析就结束了，总结在最上方，建议各位看官再去看一下总结加深印象。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Handler是Android消息通讯当中最常用的方式之一。<br>本篇小文将会从Handler的源码角度去浅析Handler。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>因为Handler这个东西其实大家都会用，源码也多多少少地了解过，所以直接将最关键的话，写到前面，对源码感兴趣的看官可以在看完总结后再往下浏览源码：</p>\n<ol>\n<li><p>创建Handler</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Handler</span> <span class=\"keyword\">handler</span> = <span class=\"keyword\">new</span> <span class=\"keyword\">Handler</span>();</span><br></pre></td></tr></table></figure>\n<p>在主线程当中，可以直接进行Handler的创建。如果是在子线程当中，在创建之前必须先初始化Looper，否则会RuntimeException:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Looper.prepare();</span><br><span class=\"line\"><span class=\"keyword\">Handler</span> <span class=\"keyword\">handler</span> = <span class=\"keyword\">new</span> <span class=\"keyword\">Handler</span>();</span><br><span class=\"line\">handler.sendEmptyMessage(<span class=\"number\">8</span>);</span><br><span class=\"line\">Looper.loop();</span><br></pre></td></tr></table></figure>\n<p>在初始化Looper的同时，一定要调用<code>Looper.loop()</code>来启动循环，否则Handler仍然无法正常接收。<br>并且因为<code>Looper.loop()</code>有死循环的存在，<code>Looper.loop()</code>之后的代码将无法执行，所以需要将<code>Looper.loop()</code>放在代码的最后，详情可参考<code>ActivityThread</code>中的main方法创建Looper的流程。<br>查看Handler的构造方法可以发现，其实Looper是Handler必要元素，但是在主线程初始化的时候，Looper已经初始化完成，所以无需再创建Looper，但是子线程的Looper需要我们自己初始化。<br>并且Looper在每个线程只能存在一个，如果再去手动创建Looper也会抛出RuntimeException。</p>\n</li>\n<li><p>发送Handler<br>handler的发送有很多方法，包括发送延时Handler、即时Handler、MessageHandler等等，但是查看这些发送方法的源码，就会发现这些发送Message的方法最终都会调用<code>MessageQueue.enqueueMessage()</code>方法。<br>这个方法其实就是将我们发送的Message入队到MessageQueue队列中，这样，我们的消息就已经发送成功，等待执行了。</p>\n</li>\n<li>取出Handler<br>在<code>Looper.prepare()</code>的同时，总会执行<code>looper.loop()</code>语句与之对应。<br>查看<code>loop()</code>源码会发现，这个方法中有一个for(;;)的死循环，会无限执行<code>MessageQueue.next()</code>，而<code>MessageQueue</code>就是我们上一步将Meesage入队的对象。<br>也就是说在创建Looper时，就会启动<code>MessageQueue</code>的无限遍历。如果<code>MessageQueue</code>为空，<code>Looper.loop()</code>就会进入休眠，直到再有Message插入到<code>MessageQueue</code>中。<br>如果取到Message则会调用message.target.dispatchMessage()，将消息分发给对应的Handler。</li>\n<li><p>如何在<code>loop()</code>休眠之后唤醒<code>loop()</code>？<br>在Meesage入队的时候，也就是执行<code>MessageQueue.enqueueMessage()</code>方法时，<code>enqueueMessage()</code>有一个<code>nativeWeak()</code>的native方法，如果有消息进入，并且Looper是休眠状态，则会执行该方法唤醒Looper:</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// We can <span class=\"built_in\">assume</span> mPtr != <span class=\"number\">0</span> because mQuitting <span class=\"built_in\">is</span> <span class=\"literal\">false</span>.</span><br><span class=\"line\"><span class=\"keyword\">if</span> (needWake) &#123;</span><br><span class=\"line\">    nativeWake(mPtr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>整体流程<br>先调用<code>Looper.prepare()</code>创建Looper，在创建的同时会自动调用<code>Looper.loop()</code>执行死循环loop()。注意<code>Looper.loop()</code>一定放到代码的最后一行。<br>死循环中会执行<code>MessageQueue.next()</code>方法去取出队列中的消息，当消息为空时，<code>MessageQueue.next()</code>方法中会执行<code>nativePollOnce()</code>的native方法休眠<code>Looper.loop()</code>死循环。当有新的消息插入到<code>MessageQueue</code>中，也就是调用<code>MessageQueue.enqueueMessage()</code>方法，这个方法当中会判断Looper是否是休眠状态，如果是休眠状态会执行<code>nativeWeak()</code>的native方法来唤醒Looper()。</p>\n</li>\n</ol>\n<h2 id=\"Handler的使用\"><a href=\"#Handler的使用\" class=\"headerlink\" title=\"Handler的使用\"></a>Handler的使用</h2><ol>\n<li><p>主线程<br>在<code>主线程</code>当中，Handler可以作为一个成员变量直接进行创建：</p>\n <figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//注意，Handler属于android.os包</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Handler <span class=\"keyword\">handler</span> = <span class=\"keyword\">new</span> Handler() &#123;</span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"主线程的Handler\"</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>接着我们试着发送Handler：</p>\n <figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//发送一个空Handler，what为888，延迟3秒到达</span></span><br><span class=\"line\">    <span class=\"keyword\">handler</span>.sendEmptyMessageDelayed(<span class=\"number\">888</span>,<span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发送Handler有很多方法：发送空Message、发送延迟的空Message、发送Message、发送延迟的Message等：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/handler/handler_send_funcation.png\" alt=\"\"></p>\n<p>接着我们运行项目，就会发现3s后控制台有Log的打印。</p>\n</li>\n<li><p>子线程<br>在<code>子线程</code>中创建Handler的流程，和在<code>主线程</code>基本一致，只是多了一步而已，但这一步非常关键。<br>我们先按照<code>主线程</code>的步骤，看看会有什么问题。<br>在<code>子线程</code>中创建Handler：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Thread()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">        Handler <span class=\"keyword\">handler</span> = <span class=\"keyword\">new</span> Handler()&#123;</span><br><span class=\"line\">             <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"子线程的Handler\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;.start();</span><br></pre></td></tr></table></figure>\n<p>接着我们运行项目，会发现项目崩溃了：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java<span class=\"selector-class\">.lang</span><span class=\"selector-class\">.RuntimeException</span>: Can<span class=\"string\">''</span>t create handler inside thread that has not called Looper.prepare()</span><br><span class=\"line\">at android<span class=\"selector-class\">.os</span><span class=\"selector-class\">.Handler</span>.&lt;init&gt;(Handler<span class=\"selector-class\">.java</span>:<span class=\"number\">200</span>)</span><br><span class=\"line\">at android<span class=\"selector-class\">.os</span><span class=\"selector-class\">.Handler</span>.&lt;init&gt;(Handler<span class=\"selector-class\">.java</span>:<span class=\"number\">114</span>)</span><br><span class=\"line\">at com<span class=\"selector-class\">.my</span><span class=\"selector-class\">.oo</span><span class=\"selector-class\">.MainActivity</span>$<span class=\"number\">2</span>$<span class=\"number\">1</span>.&lt;init&gt;(MainActivity<span class=\"selector-class\">.java</span>:<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>很明显，错误信息说的是<strong>在当前线程中创建Handler失败因为没有执行Looper.prepare()</strong>。<br>那我们按照错误原因，在创建Handler之前，加上<code>Looper.prepare()</code>:</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//子线程</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">        <span class=\"comment\">//添加Looper.prepare()；</span></span><br><span class=\"line\">        Looper.prepare();</span><br><span class=\"line\">        <span class=\"comment\">//之后再创建Handler</span></span><br><span class=\"line\">        Handler <span class=\"keyword\">handler</span> = <span class=\"keyword\">new</span> Handler()&#123;</span><br><span class=\"line\">             <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"子线程的Handler\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//发送消息</span></span><br><span class=\"line\">        <span class=\"keyword\">handler</span>.sendEmptyMessage(<span class=\"number\">111</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;.start();</span><br></pre></td></tr></table></figure>\n<p>这次再运行项目，我们就会发现项目正常运行没有问题。但是发送Handler仍然无法接收，那是因为我们没有启动Looper的遍历：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//子线程</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.run();</span><br><span class=\"line\">        <span class=\"comment\">//添加Looper.prepare()；</span></span><br><span class=\"line\">        Looper.prepare();</span><br><span class=\"line\">        <span class=\"comment\">//之后再创建Handler</span></span><br><span class=\"line\">        Handler <span class=\"keyword\">handler</span> = <span class=\"keyword\">new</span> Handler()&#123;</span><br><span class=\"line\">             <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"子线程的Handler\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//发送消息</span></span><br><span class=\"line\">        <span class=\"keyword\">handler</span>.sendEmptyMessage(<span class=\"number\">111</span>);</span><br><span class=\"line\">        <span class=\"comment\">//启动Looper的遍历功能</span></span><br><span class=\"line\">        Looper.loop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;.start();</span><br></pre></td></tr></table></figure>\n<p>这里一定要注意，<strong><code>Looper.loop()</code>必须放到代码的最后。因为<code>Looper.loop()</code>中有死循环，会导致之后的代码无法执行</strong>。这里可以等到查看<code>主线程</code>创建过程的源码时证实。</p>\n</li>\n<li>使用总结<br>Handler的使用就是这么简单，要注意的就是<code>子线程</code>当中使用Handler时，一定要先调用<code>Looper.prepare()</code>，最后调用<code>Looper.loop()</code>，否则项目会崩溃或无法接收Handler。至于为什么会这样，我们在源码里面找原因。</li>\n</ol>\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><ol>\n<li><p>Handler创建<br>我们先看Handler的构造方法：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span>(<span class=\"params\">Callback callback, boolean <span class=\"keyword\">async</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//....省略部分代码</span></span><br><span class=\"line\">    mLooper = Looper.myLooper();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mLooper == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</span><br><span class=\"line\">            <span class=\"string\">\"Can't create handler inside thread that has not called Looper.prepare()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mQueue = mLooper.mQueue;</span><br><span class=\"line\">    mCallback = callback;</span><br><span class=\"line\">    mAsynchronous = <span class=\"keyword\">async</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看到，Handler的构造方法当中是去获取了一个叫做<code>Looper</code>的类对象，如果该对象为空，就会抛出刚才我们上面发生的异常。所以我们需要在创建Handler之前，一定要先执行<code>Looper.prepare()</code>。<br>那么问题来了，为什么<code>主线程</code>就不需要执行<code>Looper.prepare()</code>就可以直接创建Handler呢？<br>我们可以随意根据代码猜测一下：<br>这里Handler的构造方法的代码已经很明显了，<code>Looper</code>类是必要的，那么<code>主线程</code>可以成功创建Handler，是不是就代表着主线程的<code>Looper</code>不为空呢？<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/zhenxiang_just_one.jpeg\" alt=\"\"><br>是不是主线程在初始化的时候<code>Looper</code>也跟着初始化了呢！？带着看破一切(瞎猜)的思路，我们来看<code>主线程</code>的初始化源码。<br>经过了长时间的Google，我们知道了主线程类叫做:<code>ActivityThread</code>。<br>该类当中有main方法：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> void main(<span class=\"keyword\">String</span>[] args) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//....省略部分代码</span></span><br><span class=\"line\">    Looper.prepareMainLooper();</span><br><span class=\"line\">    ActivityThread thread = <span class=\"keyword\">new</span> <span class=\"type\">ActivityThread</span>();</span><br><span class=\"line\">    thread.attach(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sMainThreadHandler == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        sMainThreadHandler = thread.getHandler();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        Looper.myLooper().setMessageLogging(<span class=\"keyword\">new</span><span class=\"type\"></span></span><br><span class=\"line\"><span class=\"type\"></span>                LogPrinter(Log.DEBUG, <span class=\"string\">\"ActivityThread\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// End of event ActivityThreadMain.</span></span><br><span class=\"line\">    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class=\"line\">    Looper.loop();</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">RuntimeException</span>(<span class=\"string\">\"Main thread loop unexpectedly exited\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们很自然（惊奇）地发现，在主线程创建的过程中，果然（真的）有与<code>Looper</code>类相关的内容。<br>这里有重点（敲黑板）：之前说的Looper.loop()后的代码不会执行，这里得到了证实：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Looper.<span class=\"built_in\">loop</span>();</span><br><span class=\"line\"><span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Main thread loop unexpectedly exited\"</span>);</span><br></pre></td></tr></table></figure>\n<p>下面异常的意思是：主线程的Looper意外退出。<br>也就是当Looper.loop()执行失败的意思，但是当Looper.loop()执行成功时，是不会执行下面的代码的！因为<strong><code>Looper.loop()</code>必须放到方法的最后，否则会导致后面的代码无法执行</strong>。<br>好的，接着往下看，点进<code>prepareMainLooper()</code>会发现，其实内部就是调用了<code>prepare()</code>：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">prepareMainLooper</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    prepare(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (Looper.class) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sMainLooper != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"The main Looper has already been prepared.\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sMainLooper = myLooper();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以到现在，我们解决了我们的第一个问题：为什么主线程当中不需要执行<code>Looper.prepare()</code>。<br>接着，我们去浏览<code>Looper.prepare()</code>：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span>(<span class=\"params\">boolean quitAllowed</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sThreadLocal.<span class=\"keyword\">get</span>() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Only one Looper may be created per thread\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//new Looper()并设置给当前线程</span></span><br><span class=\"line\">    sThreadLocal.<span class=\"keyword\">set</span>(<span class=\"keyword\">new</span> Looper(quitAllowed));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>没什么东西，前面对线程当中的Looper进行了判空，如果不为空则会抛出<code>RuntimeEception</code>。<br>这也就是说，每个线程当中只能有一个Looper，当你尝试去创建第二时，就会发生异常，所以<code>Looper.prepare()</code>每个线程中只能调用一次。<br>后面则new了Looper并且设置给当前线程。<br><code>new Looper()</code>中初始化了<code>MessageQueue</code>：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Looper</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class=\"line\">    mQueue = <span class=\"keyword\">new</span> MessageQueue(quitAllowed);</span><br><span class=\"line\">    mThread = Thread.currentThread();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到这里，Handler的创建就完成了！</p>\n</li>\n<li><p>Handler发送Meesage<br>Handler的发送方法有很多，包括发送延时Handler、及时Handler、空Hanlder等等。<br>查看源码会发现，所有发送方法最后调用的都是同一个方法：<code>MessageQueue</code>的<code>enqueueMessage()</code>。<br>有的看官就会问：Handler中怎么会有<code>MeesageQueue</code>？<br>这个在上面<code>new Looper()</code>的源码中已经体现了：<br><code>new Handler()</code>中<code>new Looper()</code>，<br><code>new Looper()</code>中<code>new MessageQueue()</code>。<br>所以其实初始化Handler的同时，<code>Looper</code>和<code>MeesageQueue</code>都已经初始化完成了。<br>下面我们来看消息入队方法<code>MessageQueue.enqueueMessage()</code>的全部源码：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean enqueueMessage(Message msg, long <span class=\"keyword\">when</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Meesage是否可用</span></span><br><span class=\"line\">        <span class=\"comment\">//这里的msg.target指的就是发送该Message的Handler</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (msg.target == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> new IllegalArgumentException(<span class=\"string\">\"Message must have a target.\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (msg.isInUse()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> new IllegalStateException(msg + <span class=\"string\">\" This message is already in use.\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//同步锁</span></span><br><span class=\"line\">        synchronized (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//判断是否调用了quit()方法，即取消信息</span></span><br><span class=\"line\">            <span class=\"comment\">//如果调用了，则其实Handler的Looper已经销毁，无法发送消息</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mQuitting) &#123;</span><br><span class=\"line\">                IllegalStateException e = new IllegalStateException(</span><br><span class=\"line\">                        msg.target + <span class=\"string\">\" sending message to a Handler on a dead thread\"</span>);</span><br><span class=\"line\">                Log.w(TAG, e.getMessage(), e);</span><br><span class=\"line\">                msg.recycle();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//将消息添加到MessageQueue的具体操作</span></span><br><span class=\"line\">            <span class=\"comment\">//每来一个新的消息，就会按照延迟时间的先后重新进行排序</span></span><br><span class=\"line\">            msg.markInUse();</span><br><span class=\"line\">            msg.<span class=\"keyword\">when</span> = <span class=\"keyword\">when</span>;</span><br><span class=\"line\">            Message p = mMessages;</span><br><span class=\"line\">            boolean needWake;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == <span class=\"literal\">null</span> || <span class=\"keyword\">when</span> == <span class=\"number\">0</span> || <span class=\"keyword\">when</span> &lt; p.<span class=\"keyword\">when</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// New head, wake up the event queue if blocked.</span></span><br><span class=\"line\">                msg.next = p;</span><br><span class=\"line\">                mMessages = msg;</span><br><span class=\"line\">                needWake = mBlocked;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                Message prev;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">                    prev = p;</span><br><span class=\"line\">                    p = p.next;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (p == <span class=\"literal\">null</span> || <span class=\"keyword\">when</span> &lt; p.<span class=\"keyword\">when</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class=\"line\">                        needWake = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                msg.next = p; <span class=\"comment\">// invariant: p == prev.next</span></span><br><span class=\"line\">                prev.next = msg;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//如果Looper.loop()是休眠状态</span></span><br><span class=\"line\">            <span class=\"comment\">//则调用native方法唤醒loop()</span></span><br><span class=\"line\">            <span class=\"comment\">//---重点---Looper的唤醒</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (needWake) &#123;</span><br><span class=\"line\">                nativeWake(mPtr);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>将Message入队到<code>MeesageQueue</code>的核心代码，就是这些。<br>根据注释也基本能理解该方法的作用。</p>\n</li>\n<li><p>取出Message<br>取出Meesage想必大家都知道在哪里取出：<code>Looper.loop()</code>：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Looper的判空</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Looper me = myLooper();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (me == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"No Looper; Looper.prepare() wasn't called on this thread.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> MessageQueue queue = me.mQueue;</span><br><span class=\"line\">    <span class=\"comment\">// Make sure the identity of this thread is that of the local process,</span></span><br><span class=\"line\">    <span class=\"comment\">// and keep track of what that identity token actually is.</span></span><br><span class=\"line\">    Binder.clearCallingIdentity();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> ident = Binder.clearCallingIdentity();</span><br><span class=\"line\">    <span class=\"comment\">//取出Message，死循环</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//取出Meesage的核心代码</span></span><br><span class=\"line\">        <span class=\"comment\">//在当next()返回为空时，next()中会休眠loop()</span></span><br><span class=\"line\">        Message msg = queue.next(); <span class=\"comment\">// might block</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (msg == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// No message indicates that the message queue is quitting.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// This must be in a local variable, in case a UI event sets the logger</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> Printer logging = me.mLogging;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logging != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            logging.println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt; Dispatching to \"</span> + msg.<span class=\"keyword\">target</span> + <span class=\"string\">\" \"</span> +</span><br><span class=\"line\">                    msg.callback + <span class=\"string\">\": \"</span> + msg.what);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> traceTag = me.mTraceTag;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (traceTag != <span class=\"number\">0</span> &amp;&amp; Trace.isTagEnabled(traceTag)) &#123;</span><br><span class=\"line\">            Trace.traceBegin(traceTag, msg.<span class=\"keyword\">target</span>.getTraceName(msg));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            msg.<span class=\"keyword\">target</span>.dispatchMessage(msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (traceTag != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                Trace.traceEnd(traceTag);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logging != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            logging.println(<span class=\"string\">\"&lt;&lt;&lt;&lt;&lt; Finished to \"</span> + msg.<span class=\"keyword\">target</span> + <span class=\"string\">\" \"</span> + msg.callback);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Make sure that during the course of dispatching the</span></span><br><span class=\"line\">        <span class=\"comment\">// identity of the thread wasn't corrupted.</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> newIdent = Binder.clearCallingIdentity();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ident != newIdent) &#123;</span><br><span class=\"line\">            Log.wtf(TAG, <span class=\"string\">\"Thread identity changed from 0x\"</span></span><br><span class=\"line\">                    + Long.toHexString(ident) + <span class=\"string\">\" to 0x\"</span></span><br><span class=\"line\">                    + Long.toHexString(newIdent) + <span class=\"string\">\" while dispatching to \"</span></span><br><span class=\"line\">                    + msg.<span class=\"keyword\">target</span>.getClass().getName() + <span class=\"string\">\" \"</span></span><br><span class=\"line\">                    + msg.callback + <span class=\"string\">\" what=\"</span> + msg.what);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        msg.recycleUnchecked();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Looper.loop()</code>的核心就是取出Message，而取出Message的核心就是<code>MeesageQueue.next()</code>：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Message <span class=\"keyword\">next</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Return here if the message loop has already quit and been disposed.</span></span><br><span class=\"line\">    <span class=\"comment\">// This can happen if the application tries to restart a looper after quit</span></span><br><span class=\"line\">    <span class=\"comment\">// which is not supported.</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> ptr = mPtr;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ptr == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pendingIdleHandlerCount = -<span class=\"number\">1</span>; <span class=\"comment\">// -1 only during first iteration</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> nextPollTimeoutMillis = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextPollTimeoutMillis != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            Binder.flushPendingCommands();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//唤醒Looper.loop()的native方法</span></span><br><span class=\"line\">        nativePollOnce(ptr, nextPollTimeoutMillis);</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Try to retrieve the next message.  Return if found.</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> now = SystemClock.uptimeMillis();</span><br><span class=\"line\">            Message prevMsg = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            Message msg = mMessages;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span> &amp;&amp; msg.target == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Stalled by a barrier.  Find the next asynchronous message in the </span></span><br><span class=\"line\">                <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                    prevMsg = msg;</span><br><span class=\"line\">                    msg = msg.<span class=\"keyword\">next</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">while</span> (msg != <span class=\"keyword\">null</span> &amp;&amp; !msg.isAsynchronous());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (now &lt; msg.when) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Next message is not ready.  Set a timeout to wake up when it </span></span><br><span class=\"line\">                    nextPollTimeoutMillis = (<span class=\"keyword\">int</span>) Math.min(msg.when - now, Integer.M</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Got a message.</span></span><br><span class=\"line\">                    mBlocked = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (prevMsg != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        prevMsg.<span class=\"keyword\">next</span> = msg.<span class=\"keyword\">next</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        mMessages = msg.<span class=\"keyword\">next</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    msg.<span class=\"keyword\">next</span> = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (DEBUG) Log.v(TAG, <span class=\"string\">\"Returning message: \"</span> + msg);</span><br><span class=\"line\">                    msg.markInUse();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// No more messages.</span></span><br><span class=\"line\">                nextPollTimeoutMillis = -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// Process the quit message now that all pending messages have been hand</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mQuitting) &#123;</span><br><span class=\"line\">                dispose();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// If first time idle, then get the number of idlers to run.</span></span><br><span class=\"line\">            <span class=\"comment\">// Idle handles only run if the queue is empty or if the first message</span></span><br><span class=\"line\">            <span class=\"comment\">// in the queue (possibly a barrier) is due to be handled in the future.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pendingIdleHandlerCount &lt; <span class=\"number\">0</span></span><br><span class=\"line\">                    &amp;&amp; (mMessages == <span class=\"keyword\">null</span> || now &lt; mMessages.when)) &#123;</span><br><span class=\"line\">                pendingIdleHandlerCount = mIdleHandlers.<span class=\"keyword\">size</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pendingIdleHandlerCount &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// No idle handlers to run.  Loop and wait some more.</span></span><br><span class=\"line\">                mBlocked = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mPendingIdleHandlers == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                mPendingIdleHandlers = <span class=\"keyword\">new</span> IdleHandler[Math.max(pendingIdleHandlerCo</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Run the idle handlers.</span></span><br><span class=\"line\">        <span class=\"comment\">// We only ever reach this code block during the first iteration.</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> IdleHandler idler = mPendingIdleHandlers[i];</span><br><span class=\"line\">            mPendingIdleHandlers[i] = <span class=\"keyword\">null</span>; <span class=\"comment\">// release the reference to the handler</span></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> keep = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                keep = idler.queueIdle();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                Log.wtf(TAG, <span class=\"string\">\"IdleHandler threw exception\"</span>, t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!keep) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">                    mIdleHandlers.remove(idler);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Reset the idle handler count to 0 so we do not run them again.</span></span><br><span class=\"line\">        pendingIdleHandlerCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// While calling an idle handler, a new message could have been delivered</span></span><br><span class=\"line\">        <span class=\"comment\">// so go back and look again for a pending message without waiting.</span></span><br><span class=\"line\">        nextPollTimeoutMillis = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>取出Meesage的代码有些多，大部分都是一些优化逻辑：next() 方法还做了其他一些事情，这些其它事情是为了提高系统效果，利用消息队列在空闲时通过 idle handler 做一些事情，比如 gc 等等。</p>\n</li>\n</ol>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>到这里Handler源码的浅析就结束了，总结在最上方，建议各位看官再去看一下总结加深印象。</p>\n"},{"title":"Android获取图片的正确姿势","date":"2017-07-27T07:55:01.000Z","_content":"## 前言 ##\n很多项目中都会有用户修改头像或者类似的功能。\n该功能会访问用户的相册、相机来获取图片，然后显示到页面上。\n实现该功能还是比较简单的，网上的资料也非常多，简单查阅之后复制粘贴便能实现，但是很多细节其实并不理解。\n并且由于Android安全性的提升，包括Android6.0（API 23）的权限系统升级、Android7.0（API 24）的私有文件访问限制，很多地方稍不注意就会发生崩溃。\n最近再次用到了这个功能，这次打算用一篇文章来详细记录这个功能点所对应的知识点，并解决掉之前的很多疑问。\n\n## 打开相册 ##\n打开手机相册的方式有多种：\n第一种：\n```\nIntent intent = new Intent();\nintent.setAction(Intent.ACTION_PICK);\n// 设置文件类型\nintent.setType(\"image/*\");\nactivity.startActivityForResult(intent, requestCode);\n```\n第二种：\n```\nIntent intent = new Intent();\nintent.setAction(Intent.ACTION_GET_CONTENT);\n// 设置文件类型\nintent.setType(\"image/*\");\nactivity.startActivityForResult(intent, requestCode);\n```\n第三种：\n```\nIntent intent = new Intent();\nintent.setAction(Intent.ACTION_OPEN_DOCUMENT);\n// 设置文件类型\nintent.setType(\"image/*\");\nactivity.startActivityForResult(intent, requestCode);\n```\n这几种方式都可以在获取到读取文件权限的前提下，完美实现图片选择。\n第三种[ACTION_OPEN_DOCUMENT](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_OPEN_DOCUMENT)是在Android5.0(API 19)之后新添加的意图，如果使用的话需要进行\n```\nif(Build.VERSION.SDK_INT>=Build.VERSION_CODES.KITKAT){\n\t//TODO\n}\n```\n我们这里先不介绍[ACTION_OPEN_DOCUMENT](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_OPEN_DOCUMENT)。\n第二种[ACTION_GET_CONTENT](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT)与第一种[ACTION_PICK](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_PICK)这两个意图类型的作用也非常类似，都是用来获取手机内容，包括联系人、相册等。\n通过`intent.setType(\"image/*\")`来指定**MIME Type**，让系统知道要打开的应用。\n这里需要注意，必须指定**MIME Type**，否则项目会崩溃：\n```\nandroid.content.ActivityNotFoundException: No Activity found to handle Intent { act=android.intent.action.GET_CONTENT }\nandroid.content.ActivityNotFoundException: No Activity found to handle Intent { act=android.intent.action.ACTION_PICK }\n```\n根据不同的**MIME Type**，可以跳转到不同的应用。\n那么这两者有什么区别呢？\n[ACTION_GET_CONTENT](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT)与[ACTION_PICK](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_PICK)的官方解释在这里。\n英语比较差，跟着百度翻译看了半天还是不懂。\n![](http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/%E6%83%A8%E4%B8%8D%E5%BF%8D%E7%9D%B9.png)\n英语好的同学可自行食用上面的链接，应该不需要翻墙。\n两者的区别介绍都写在了[ACTION_GET_CONTENT](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT)，大概是在说：\n如果你有一些特定的集合（由URI标识）想让用户选择，使用[ACTION_PICK](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_PICK)。\n如果让用户基于**MIME Type**选择数据，使用[ACTION_GET_CONTENT](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT)。\n在平局的情况下，建议使用[ACTION_GET_CONTENT](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT)。\n这个还是需要各位看官自己好好理解，我也没能完全了解两者的使用区别。\n并且我发现两者返回的Uri格式是不同的：\n[关于Android中Uri的介绍，可以参考这篇文章](http://www.jianshu.com/p/5572b42fc63f)。\n\n两种意图分别唤起相册后，选择同一张图片的回调，也就是在onActivityResult中接收：\n```\n@Override\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    super.onActivityResult(requestCode, resultCode, data);\n    if (resultCode != RESULT_OK) {\n        return;\n    }\n    switch (requestCode) {\n        case REQUEST_CODE_ALBUM://相册\n            Uri dataUri = data.getData();\n            Log.i(\"mengyuanuri\",\"uri:\"+dataUri.getScheme()+\":\"+dataUri.getSchemeSpecificPart());\n            break;\n    }\n}\n```\n\n接下来我们来看看两个意图类型下选择同一张照片返回的数据：\n[ACTION_GET_CONTENT](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT)：\n```\ncontent://com.android.providers.media.documents/document/image:2116\n```\n[ACTION_PICK](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_PICK)：\n```\ncontent://media/external/images/media/2116\n```\n没有其他的东西，两者都是返回一个Uri。\n为什么不直接返回给我们图片，而是一个Uri呢？\n[因为Intent传输有大小的限制。](http://blog.csdn.net/wingichoy/article/details/50679322)\n所以我们需要根据Uri来获取到文件的具体路径。\n但是我们发现，就算是同一张照片，两种意图下，返回的Uri也是不一致的。\n这主要是因为Uri在Android中的类型也分为很多种，比如这两个意图的Uri种类就不一致。\n这里就不做赘述了，我们可以通过网上大神封装的解析Uri的方法将它们统一转化成File路径：\n```\npublic static String getPath( final Uri uri) {\n        // DocumentProvider\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT && DocumentsContract.isDocumentUri(App.context, uri)) {\n            // ExternalStorageProvider\n            if (isExternalStorageDocument(uri)) {\n                final String docId = DocumentsContract.getDocumentId(uri);\n                final String[] split = docId.split(\":\");\n                final String type = split[0];\n\n                if (\"primary\".equalsIgnoreCase(type)) {\n                    return Environment.getExternalStorageDirectory() + \"/\" + split[1];\n                }\n                // TODO handle non-primary volumes\n            }\n            // DownloadsProvider\n            else if (isDownloadsDocument(uri)) {\n\n                final String id = DocumentsContract.getDocumentId(uri);\n                final Uri contentUri = ContentUris.withAppendedId(\n                        Uri.parse(\"content://downloads/public_downloads\"), Long.valueOf(id));\n\n                return getDataColumn(App.context, contentUri, null, null);\n            }\n            // MediaProvider\n            else if (isMediaDocument(uri)) {\n                final String docId = DocumentsContract.getDocumentId(uri);\n                final String[] split = docId.split(\":\");\n                final String type = split[0];\n\n                Uri contentUri = null;\n                if (\"image\".equals(type)) {\n                    contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;\n                } else if (\"video\".equals(type)) {\n                    contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;\n                } else if (\"audio\".equals(type)) {\n                    contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;\n                }\n\n                final String selection = \"_id=?\";\n                final String[] selectionArgs = new String[]{\n                        split[1]\n                };\n\n                return getDataColumn(App.context, contentUri, selection, selectionArgs);\n            }\n        }\n        // MediaStore (and general)\n        else if (\"content\".equalsIgnoreCase(uri.getScheme())) {\n            return getDataColumn(App.context, uri, null, null);\n        }\n        // File\n        else if (\"file\".equalsIgnoreCase(uri.getScheme())) {\n            return uri.getPath();\n        }\n\n        return null;\n    }\n```\n调用完成后，会发现不同的Uri对应的是同一个文件路径：\n```\n/storage/emulated/0/temp/kouliang_avatar.jpg\n```\n断点跟进该方法，会发现两个Uri走的是不同的if判断。\n\n\n简单来说，三种方法都可以使用，并且三种方法都是在onActivityResult中返回Uri，而不是图片。\n一般情况使用[ACTION_GET_CONTENT](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT)的会多一些。\n\n## 相机 ##\n打开相机的方式：\n```\n//指定相机意图\nIntent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n//设置相片保存的地址\nintent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(file));\nactivity.startActivityForResult(intent, requestCode);\n```\n相机图片的获取方式不同于相册，相机图片获取需要先指定图片的保存路径，在拍摄成功后，我们只需直接去指定路径获取即可:\n```\nswitch (requestCode) {\n    //相册\n    case REQUEST_CODE_ALBUM:\n        Uri dataUri = data.getData();\n        Log.i(\"mengyuanuri\", \"相册uri:\" + dataUri.getScheme() + \":\" + dataUri.getSchemeSpecificPart());\n        break;\n    //相机，注意，相机的回调中Intent为空，不要使用\n    case REQUEST_CODE_CAMER:\n        File bgPath = Constant.bgPath;\n        Bitmap bitmap = BitmapFactory.decodeFile(bgPath.getPath());\n        iv_bg.setImageBitmap(bitmap);\n        break;\n}\n```\n非常简单，在相机回调中去指定路径中读取图片并显示。\n但是我们应该可以想到，**有些手机没有相机**，也就是没有[MediaStore.ACTION_IMAGE_CAPTURE](https://developer.android.google.cn/reference/android/provider/MediaStore.html#ACTION_IMAGE_CAPTURE)意图对应的应用。\n如果没有对其进行判断就会抛出[ActivityNotFound](https://developer.android.google.cn/reference/android/content/ActivityNotFoundException.html)的异常。\n如何解决这个问题：\n1. try-catch，简单粗暴；\n2. 通过PackageManager去查询[MediaStore.ACTION_IMAGE_CAPTURE](https://developer.android.google.cn/reference/android/provider/MediaStore.html#ACTION_IMAGE_CAPTURE)意图是否存在。\n\n两种做法都很简单，这里展示如何用PackageManager：\n```\n/**\n * 判断某个意图是否存在\n */\npublic static boolean isHaveCame(String intentName) {\n    PackageManager packageManager = App.context.getPackageManager();\n    Intent intent = new Intent(intentName);\n    List<ResolveInfo> list = packageManager.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);\n    return list.size() > 0;\n}\n```\n接着我们运行，十分成功。\n但是在7.1的虚拟机中，打开相机崩溃了：\n```\nandroid.os.FileUriExposedException: file:///storage/emulated/0/photo_bg.jpg exposed beyond app through ClipData.Item.getUri(\n    at android.os.StrictMode.onFileUriExposed(StrictMode.java:1799)\n    at android.net.Uri.checkFileUriExposed(Uri.java:2346)\n    at android.content.ClipData.prepareToLeaveProcess(ClipData.java:845)\n    at android.content.Intent.prepareToLeaveProcess(Intent.java:8941)\n    at android.content.Intent.prepareToLeaveProcess(Intent.java:8926)\n    at android.app.Instrumentation.execStartActivity(Instrumentation.java:1517)\n    at android.app.Activity.startActivityForResult(Activity.java:4225)\n    at android.support.v4.app.BaseFragmentActivityJB.startActivityForResult(BaseFragmentActivityJB.java:54)\n    at android.support.v4.app.FragmentActivity.startActivityForResult(FragmentActivity.java:75)\n    at android.app.Activity.startActivityForResult(Activity.java:4183)\n    at android.support.v4.app.FragmentActivity.startActivityForResult(FragmentActivity.java:708)\n    at com.my.photoget.utils.AppUtils.startCamer(AppUtils.java:37)\n```\n崩溃的主要原因是因为在7.0(API 24)中对文件读取进行了安全性的提升，[这篇文章详细介绍了解决方案](http://www.jianshu.com/p/3f9e3fc38eae)。\n这里提一下，这和当初Android6.0(API 23)权限管理改版一致，如果**build.gradle**中的`targetSdkVersion`<23，则会沿用以前的权限管理机制，无需进行权限管理改版，[权限管理详见这篇小文](http://www.jianshu.com/p/9271efd71450)。\n同理，这里如果你的`targetSdkVersion`<24的话，则无需进行上述崩溃的适配。\n但是更新一定是往更好的方向去的，还是建议各位看官及时更新，及时适配，保证`targetSdkVersion`为最新SDK。\n\n## 裁剪 ##\n裁剪功能是可选功能，如果想要对获取到的图片进行裁剪，我们可以继续使用裁剪Intent来对图片进行裁剪：\n```\nIntent intent = new Intent(\"com.android.camera.action.CROP\");\n//设置要裁剪的图片Uri\nintent.setDataAndType(cropBean.dataUri, \"image/*\");\n//配置一系列裁剪参数\nintent.putExtra(\"outputX\", cropBean.outputX);\nintent.putExtra(\"outputY\", cropBean.outputY);\nintent.putExtra(\"scale\", cropBean.scale);\nintent.putExtra(\"aspectX\", cropBean.aspectX);\nintent.putExtra(\"aspectY\", cropBean.aspectY);\nintent.putExtra(\"outputFormat\", cropBean.outputFormat);\nintent.putExtra(\"return-data\", cropBean.isReturnData);\nintent.putExtra(\"output\", cropBean.saveUri);\n//跳转\nactivity.startActivityForResult(intent, requestCode);\n```\n裁剪参数的含义可以参考[这篇文章](https://github.com/showdy/Android_Note/blob/master/showdy_note/android/strategy/%E4%BD%BF%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%86%8C%E5%9B%BE%E7%89%87%E6%88%96%E6%8B%8D%E7%85%A7%E5%B9%B6%E8%A3%81%E5%89%AA%E4%B9%8BAndroid_N%E9%80%82%E9%85%8D.md)：\n\n| 附加选项  | 数据类型 | 描述 |\n| :------------ |:---------------:| -----:|\n| crop     | String | 发送裁剪信号 |\n| aspectX     | int       |X方向上的比例   |\n|aspectY|int|Y方向上的比例|\n|outputX|int|裁剪区的宽|\n|outputY|int|裁剪区的高|\n|scale|boolean|是否保留比例|\n|return-data|boolean|是否将数据保留在Bitmap中返回|\n|data|Parcelable|相应的Bitmap数据|\n|circleCrop|String|圆形裁剪区域|\n|output|URI|将URI指向相应的file://|\n|outputFormat|String|图片输出格式|\n|noFaceDetection|boolean| 是否取消人脸识别|\n\n每个属性的解释都很清晰，这里我将裁剪参数封装为了一个Bean对象：\n```\npublic class CropBean {\n\n    //要裁剪的图片Uri\n    public Uri dataUri;\n\n    //裁剪宽度\n    public int outputX;\n    //裁剪高度\n    public int outputY;\n\n    //X方向上的比例\n    public int aspectX;\n    //Y方向上的比例\n    public int aspectY;\n\n    //是否保留比例\n    public boolean scale;\n\n    //是否将数据保存在Bitmap中返回\n    public boolean isReturnData;\n    //相应的Bitmap数据\n    public Parcelable returnData;\n\n    //如果不需要将图片在Bitmap中返回，需要传递保存图片的Uri\n    public Uri saveUri;\n\n    //圆形裁剪区域\n    public String circleCrop;\n\n    //图片输出格式，默认JPEG\n    public String outputFormat = Bitmap.CompressFormat.JPEG.toString();\n\n    //是否取消人脸识别\n    public boolean noFaceDetection;\n\n    /**\n     * 根据宽高计算裁剪比例\n     */\n    public void caculateAspect() {\n\n        scale = true;\n\n        if (outputX == outputY) {\n            aspectX = 1;\n            aspectY = 1;\n            return;\n        }\n        float proportion = (float) outputX / (float) outputY;\n\n        aspectX = (int) (proportion * 100);\n        aspectY = 100;\n    }\n}\n```\n关于封装对象中`caculateAspect()`方法，因为**aspectX**与**aspectY**是用来设定裁剪框宽高比例的，所以我选择在指定完**outputX**与**outputY**（也就是裁剪图片的宽度和高度）之后，直接根据宽高来计算裁剪框的大小。\n`caculateAspect()`中就是具体的计算过程。\n还有几个比较重要的参数需要提一下：\n- **intent.setData(Uri uri)**是必须指定的，它代表着要裁剪的图片的Uri。\n- **return-data**参数代表是否要返回数据，如果为true，则返回Bitmap对象，如果为false，则会将图片直接保存到另一个参数**output**中。也就是说，当**return-data**为true时，**output**是没有用的，直接在**onActivityResult**中取data当中的Bitmap即可。如果为false，则直接在onActivityResult中去之前指定到**output**中的地址取出图片即可。\n- 综上一点，强烈建议设置**return-data**为false并且设置**output**，[因为Intent传输是有大小限制的](http://blog.csdn.net/wingichoy/article/details/50679322)。为防止超出大小的现象发生，通过Uri传输最为安全。\n\n## 总结 ##\n到此为止，获取图片显示的功能已经完成了。\n[整个项目已经上传至GitHub](https://github.com/YuanTiger/PhotoGet)，简单总结一下：\n1. 通过相册获取图片的方式有很多，但是在onActivityResult中都是以Uri的方式传递的。\n2. 裁剪功能不是必要的，如果没有裁剪需求可忽略。强烈建议不要将**return-data**设置为true，可能会超出Intent传输大小限制。\n3. 当你的targetSdkVersion>=23时，需要进行[权限管理的升级](http://www.jianshu.com/p/9271efd71450)，当你的targetSdkVersion>=24时，需要进行[FileProvider的适配](http://www.jianshu.com/p/3f9e3fc38eae)。强烈建议进行适配，提升应用的安全性。\n\n\n\n## 感谢 ##\n[使用系统裁剪](https://github.com/showdy/Android_Note/blob/master/showdy_note/android/strategy/%E4%BD%BF%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%86%8C%E5%9B%BE%E7%89%87%E6%88%96%E6%8B%8D%E7%85%A7%E5%B9%B6%E8%A3%81%E5%89%AA%E4%B9%8BAndroid_N%E9%80%82%E9%85%8D.md)\n[Intent传输大小实战](http://blog.csdn.net/wingichoy/article/details/50679322)\n[相机7.0图片选择适配](http://www.jianshu.com/p/3f9e3fc38eae)\n","source":"_posts/Android-Photo-Select.md","raw":"---\ntitle: Android获取图片的正确姿势\ndate: 2017-07-27 15:55:01\ntags:\n   - Android\n   - 原理\n---\n## 前言 ##\n很多项目中都会有用户修改头像或者类似的功能。\n该功能会访问用户的相册、相机来获取图片，然后显示到页面上。\n实现该功能还是比较简单的，网上的资料也非常多，简单查阅之后复制粘贴便能实现，但是很多细节其实并不理解。\n并且由于Android安全性的提升，包括Android6.0（API 23）的权限系统升级、Android7.0（API 24）的私有文件访问限制，很多地方稍不注意就会发生崩溃。\n最近再次用到了这个功能，这次打算用一篇文章来详细记录这个功能点所对应的知识点，并解决掉之前的很多疑问。\n\n## 打开相册 ##\n打开手机相册的方式有多种：\n第一种：\n```\nIntent intent = new Intent();\nintent.setAction(Intent.ACTION_PICK);\n// 设置文件类型\nintent.setType(\"image/*\");\nactivity.startActivityForResult(intent, requestCode);\n```\n第二种：\n```\nIntent intent = new Intent();\nintent.setAction(Intent.ACTION_GET_CONTENT);\n// 设置文件类型\nintent.setType(\"image/*\");\nactivity.startActivityForResult(intent, requestCode);\n```\n第三种：\n```\nIntent intent = new Intent();\nintent.setAction(Intent.ACTION_OPEN_DOCUMENT);\n// 设置文件类型\nintent.setType(\"image/*\");\nactivity.startActivityForResult(intent, requestCode);\n```\n这几种方式都可以在获取到读取文件权限的前提下，完美实现图片选择。\n第三种[ACTION_OPEN_DOCUMENT](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_OPEN_DOCUMENT)是在Android5.0(API 19)之后新添加的意图，如果使用的话需要进行\n```\nif(Build.VERSION.SDK_INT>=Build.VERSION_CODES.KITKAT){\n\t//TODO\n}\n```\n我们这里先不介绍[ACTION_OPEN_DOCUMENT](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_OPEN_DOCUMENT)。\n第二种[ACTION_GET_CONTENT](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT)与第一种[ACTION_PICK](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_PICK)这两个意图类型的作用也非常类似，都是用来获取手机内容，包括联系人、相册等。\n通过`intent.setType(\"image/*\")`来指定**MIME Type**，让系统知道要打开的应用。\n这里需要注意，必须指定**MIME Type**，否则项目会崩溃：\n```\nandroid.content.ActivityNotFoundException: No Activity found to handle Intent { act=android.intent.action.GET_CONTENT }\nandroid.content.ActivityNotFoundException: No Activity found to handle Intent { act=android.intent.action.ACTION_PICK }\n```\n根据不同的**MIME Type**，可以跳转到不同的应用。\n那么这两者有什么区别呢？\n[ACTION_GET_CONTENT](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT)与[ACTION_PICK](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_PICK)的官方解释在这里。\n英语比较差，跟着百度翻译看了半天还是不懂。\n![](http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/%E6%83%A8%E4%B8%8D%E5%BF%8D%E7%9D%B9.png)\n英语好的同学可自行食用上面的链接，应该不需要翻墙。\n两者的区别介绍都写在了[ACTION_GET_CONTENT](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT)，大概是在说：\n如果你有一些特定的集合（由URI标识）想让用户选择，使用[ACTION_PICK](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_PICK)。\n如果让用户基于**MIME Type**选择数据，使用[ACTION_GET_CONTENT](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT)。\n在平局的情况下，建议使用[ACTION_GET_CONTENT](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT)。\n这个还是需要各位看官自己好好理解，我也没能完全了解两者的使用区别。\n并且我发现两者返回的Uri格式是不同的：\n[关于Android中Uri的介绍，可以参考这篇文章](http://www.jianshu.com/p/5572b42fc63f)。\n\n两种意图分别唤起相册后，选择同一张图片的回调，也就是在onActivityResult中接收：\n```\n@Override\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    super.onActivityResult(requestCode, resultCode, data);\n    if (resultCode != RESULT_OK) {\n        return;\n    }\n    switch (requestCode) {\n        case REQUEST_CODE_ALBUM://相册\n            Uri dataUri = data.getData();\n            Log.i(\"mengyuanuri\",\"uri:\"+dataUri.getScheme()+\":\"+dataUri.getSchemeSpecificPart());\n            break;\n    }\n}\n```\n\n接下来我们来看看两个意图类型下选择同一张照片返回的数据：\n[ACTION_GET_CONTENT](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT)：\n```\ncontent://com.android.providers.media.documents/document/image:2116\n```\n[ACTION_PICK](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_PICK)：\n```\ncontent://media/external/images/media/2116\n```\n没有其他的东西，两者都是返回一个Uri。\n为什么不直接返回给我们图片，而是一个Uri呢？\n[因为Intent传输有大小的限制。](http://blog.csdn.net/wingichoy/article/details/50679322)\n所以我们需要根据Uri来获取到文件的具体路径。\n但是我们发现，就算是同一张照片，两种意图下，返回的Uri也是不一致的。\n这主要是因为Uri在Android中的类型也分为很多种，比如这两个意图的Uri种类就不一致。\n这里就不做赘述了，我们可以通过网上大神封装的解析Uri的方法将它们统一转化成File路径：\n```\npublic static String getPath( final Uri uri) {\n        // DocumentProvider\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT && DocumentsContract.isDocumentUri(App.context, uri)) {\n            // ExternalStorageProvider\n            if (isExternalStorageDocument(uri)) {\n                final String docId = DocumentsContract.getDocumentId(uri);\n                final String[] split = docId.split(\":\");\n                final String type = split[0];\n\n                if (\"primary\".equalsIgnoreCase(type)) {\n                    return Environment.getExternalStorageDirectory() + \"/\" + split[1];\n                }\n                // TODO handle non-primary volumes\n            }\n            // DownloadsProvider\n            else if (isDownloadsDocument(uri)) {\n\n                final String id = DocumentsContract.getDocumentId(uri);\n                final Uri contentUri = ContentUris.withAppendedId(\n                        Uri.parse(\"content://downloads/public_downloads\"), Long.valueOf(id));\n\n                return getDataColumn(App.context, contentUri, null, null);\n            }\n            // MediaProvider\n            else if (isMediaDocument(uri)) {\n                final String docId = DocumentsContract.getDocumentId(uri);\n                final String[] split = docId.split(\":\");\n                final String type = split[0];\n\n                Uri contentUri = null;\n                if (\"image\".equals(type)) {\n                    contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;\n                } else if (\"video\".equals(type)) {\n                    contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;\n                } else if (\"audio\".equals(type)) {\n                    contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;\n                }\n\n                final String selection = \"_id=?\";\n                final String[] selectionArgs = new String[]{\n                        split[1]\n                };\n\n                return getDataColumn(App.context, contentUri, selection, selectionArgs);\n            }\n        }\n        // MediaStore (and general)\n        else if (\"content\".equalsIgnoreCase(uri.getScheme())) {\n            return getDataColumn(App.context, uri, null, null);\n        }\n        // File\n        else if (\"file\".equalsIgnoreCase(uri.getScheme())) {\n            return uri.getPath();\n        }\n\n        return null;\n    }\n```\n调用完成后，会发现不同的Uri对应的是同一个文件路径：\n```\n/storage/emulated/0/temp/kouliang_avatar.jpg\n```\n断点跟进该方法，会发现两个Uri走的是不同的if判断。\n\n\n简单来说，三种方法都可以使用，并且三种方法都是在onActivityResult中返回Uri，而不是图片。\n一般情况使用[ACTION_GET_CONTENT](https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT)的会多一些。\n\n## 相机 ##\n打开相机的方式：\n```\n//指定相机意图\nIntent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n//设置相片保存的地址\nintent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(file));\nactivity.startActivityForResult(intent, requestCode);\n```\n相机图片的获取方式不同于相册，相机图片获取需要先指定图片的保存路径，在拍摄成功后，我们只需直接去指定路径获取即可:\n```\nswitch (requestCode) {\n    //相册\n    case REQUEST_CODE_ALBUM:\n        Uri dataUri = data.getData();\n        Log.i(\"mengyuanuri\", \"相册uri:\" + dataUri.getScheme() + \":\" + dataUri.getSchemeSpecificPart());\n        break;\n    //相机，注意，相机的回调中Intent为空，不要使用\n    case REQUEST_CODE_CAMER:\n        File bgPath = Constant.bgPath;\n        Bitmap bitmap = BitmapFactory.decodeFile(bgPath.getPath());\n        iv_bg.setImageBitmap(bitmap);\n        break;\n}\n```\n非常简单，在相机回调中去指定路径中读取图片并显示。\n但是我们应该可以想到，**有些手机没有相机**，也就是没有[MediaStore.ACTION_IMAGE_CAPTURE](https://developer.android.google.cn/reference/android/provider/MediaStore.html#ACTION_IMAGE_CAPTURE)意图对应的应用。\n如果没有对其进行判断就会抛出[ActivityNotFound](https://developer.android.google.cn/reference/android/content/ActivityNotFoundException.html)的异常。\n如何解决这个问题：\n1. try-catch，简单粗暴；\n2. 通过PackageManager去查询[MediaStore.ACTION_IMAGE_CAPTURE](https://developer.android.google.cn/reference/android/provider/MediaStore.html#ACTION_IMAGE_CAPTURE)意图是否存在。\n\n两种做法都很简单，这里展示如何用PackageManager：\n```\n/**\n * 判断某个意图是否存在\n */\npublic static boolean isHaveCame(String intentName) {\n    PackageManager packageManager = App.context.getPackageManager();\n    Intent intent = new Intent(intentName);\n    List<ResolveInfo> list = packageManager.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);\n    return list.size() > 0;\n}\n```\n接着我们运行，十分成功。\n但是在7.1的虚拟机中，打开相机崩溃了：\n```\nandroid.os.FileUriExposedException: file:///storage/emulated/0/photo_bg.jpg exposed beyond app through ClipData.Item.getUri(\n    at android.os.StrictMode.onFileUriExposed(StrictMode.java:1799)\n    at android.net.Uri.checkFileUriExposed(Uri.java:2346)\n    at android.content.ClipData.prepareToLeaveProcess(ClipData.java:845)\n    at android.content.Intent.prepareToLeaveProcess(Intent.java:8941)\n    at android.content.Intent.prepareToLeaveProcess(Intent.java:8926)\n    at android.app.Instrumentation.execStartActivity(Instrumentation.java:1517)\n    at android.app.Activity.startActivityForResult(Activity.java:4225)\n    at android.support.v4.app.BaseFragmentActivityJB.startActivityForResult(BaseFragmentActivityJB.java:54)\n    at android.support.v4.app.FragmentActivity.startActivityForResult(FragmentActivity.java:75)\n    at android.app.Activity.startActivityForResult(Activity.java:4183)\n    at android.support.v4.app.FragmentActivity.startActivityForResult(FragmentActivity.java:708)\n    at com.my.photoget.utils.AppUtils.startCamer(AppUtils.java:37)\n```\n崩溃的主要原因是因为在7.0(API 24)中对文件读取进行了安全性的提升，[这篇文章详细介绍了解决方案](http://www.jianshu.com/p/3f9e3fc38eae)。\n这里提一下，这和当初Android6.0(API 23)权限管理改版一致，如果**build.gradle**中的`targetSdkVersion`<23，则会沿用以前的权限管理机制，无需进行权限管理改版，[权限管理详见这篇小文](http://www.jianshu.com/p/9271efd71450)。\n同理，这里如果你的`targetSdkVersion`<24的话，则无需进行上述崩溃的适配。\n但是更新一定是往更好的方向去的，还是建议各位看官及时更新，及时适配，保证`targetSdkVersion`为最新SDK。\n\n## 裁剪 ##\n裁剪功能是可选功能，如果想要对获取到的图片进行裁剪，我们可以继续使用裁剪Intent来对图片进行裁剪：\n```\nIntent intent = new Intent(\"com.android.camera.action.CROP\");\n//设置要裁剪的图片Uri\nintent.setDataAndType(cropBean.dataUri, \"image/*\");\n//配置一系列裁剪参数\nintent.putExtra(\"outputX\", cropBean.outputX);\nintent.putExtra(\"outputY\", cropBean.outputY);\nintent.putExtra(\"scale\", cropBean.scale);\nintent.putExtra(\"aspectX\", cropBean.aspectX);\nintent.putExtra(\"aspectY\", cropBean.aspectY);\nintent.putExtra(\"outputFormat\", cropBean.outputFormat);\nintent.putExtra(\"return-data\", cropBean.isReturnData);\nintent.putExtra(\"output\", cropBean.saveUri);\n//跳转\nactivity.startActivityForResult(intent, requestCode);\n```\n裁剪参数的含义可以参考[这篇文章](https://github.com/showdy/Android_Note/blob/master/showdy_note/android/strategy/%E4%BD%BF%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%86%8C%E5%9B%BE%E7%89%87%E6%88%96%E6%8B%8D%E7%85%A7%E5%B9%B6%E8%A3%81%E5%89%AA%E4%B9%8BAndroid_N%E9%80%82%E9%85%8D.md)：\n\n| 附加选项  | 数据类型 | 描述 |\n| :------------ |:---------------:| -----:|\n| crop     | String | 发送裁剪信号 |\n| aspectX     | int       |X方向上的比例   |\n|aspectY|int|Y方向上的比例|\n|outputX|int|裁剪区的宽|\n|outputY|int|裁剪区的高|\n|scale|boolean|是否保留比例|\n|return-data|boolean|是否将数据保留在Bitmap中返回|\n|data|Parcelable|相应的Bitmap数据|\n|circleCrop|String|圆形裁剪区域|\n|output|URI|将URI指向相应的file://|\n|outputFormat|String|图片输出格式|\n|noFaceDetection|boolean| 是否取消人脸识别|\n\n每个属性的解释都很清晰，这里我将裁剪参数封装为了一个Bean对象：\n```\npublic class CropBean {\n\n    //要裁剪的图片Uri\n    public Uri dataUri;\n\n    //裁剪宽度\n    public int outputX;\n    //裁剪高度\n    public int outputY;\n\n    //X方向上的比例\n    public int aspectX;\n    //Y方向上的比例\n    public int aspectY;\n\n    //是否保留比例\n    public boolean scale;\n\n    //是否将数据保存在Bitmap中返回\n    public boolean isReturnData;\n    //相应的Bitmap数据\n    public Parcelable returnData;\n\n    //如果不需要将图片在Bitmap中返回，需要传递保存图片的Uri\n    public Uri saveUri;\n\n    //圆形裁剪区域\n    public String circleCrop;\n\n    //图片输出格式，默认JPEG\n    public String outputFormat = Bitmap.CompressFormat.JPEG.toString();\n\n    //是否取消人脸识别\n    public boolean noFaceDetection;\n\n    /**\n     * 根据宽高计算裁剪比例\n     */\n    public void caculateAspect() {\n\n        scale = true;\n\n        if (outputX == outputY) {\n            aspectX = 1;\n            aspectY = 1;\n            return;\n        }\n        float proportion = (float) outputX / (float) outputY;\n\n        aspectX = (int) (proportion * 100);\n        aspectY = 100;\n    }\n}\n```\n关于封装对象中`caculateAspect()`方法，因为**aspectX**与**aspectY**是用来设定裁剪框宽高比例的，所以我选择在指定完**outputX**与**outputY**（也就是裁剪图片的宽度和高度）之后，直接根据宽高来计算裁剪框的大小。\n`caculateAspect()`中就是具体的计算过程。\n还有几个比较重要的参数需要提一下：\n- **intent.setData(Uri uri)**是必须指定的，它代表着要裁剪的图片的Uri。\n- **return-data**参数代表是否要返回数据，如果为true，则返回Bitmap对象，如果为false，则会将图片直接保存到另一个参数**output**中。也就是说，当**return-data**为true时，**output**是没有用的，直接在**onActivityResult**中取data当中的Bitmap即可。如果为false，则直接在onActivityResult中去之前指定到**output**中的地址取出图片即可。\n- 综上一点，强烈建议设置**return-data**为false并且设置**output**，[因为Intent传输是有大小限制的](http://blog.csdn.net/wingichoy/article/details/50679322)。为防止超出大小的现象发生，通过Uri传输最为安全。\n\n## 总结 ##\n到此为止，获取图片显示的功能已经完成了。\n[整个项目已经上传至GitHub](https://github.com/YuanTiger/PhotoGet)，简单总结一下：\n1. 通过相册获取图片的方式有很多，但是在onActivityResult中都是以Uri的方式传递的。\n2. 裁剪功能不是必要的，如果没有裁剪需求可忽略。强烈建议不要将**return-data**设置为true，可能会超出Intent传输大小限制。\n3. 当你的targetSdkVersion>=23时，需要进行[权限管理的升级](http://www.jianshu.com/p/9271efd71450)，当你的targetSdkVersion>=24时，需要进行[FileProvider的适配](http://www.jianshu.com/p/3f9e3fc38eae)。强烈建议进行适配，提升应用的安全性。\n\n\n\n## 感谢 ##\n[使用系统裁剪](https://github.com/showdy/Android_Note/blob/master/showdy_note/android/strategy/%E4%BD%BF%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%86%8C%E5%9B%BE%E7%89%87%E6%88%96%E6%8B%8D%E7%85%A7%E5%B9%B6%E8%A3%81%E5%89%AA%E4%B9%8BAndroid_N%E9%80%82%E9%85%8D.md)\n[Intent传输大小实战](http://blog.csdn.net/wingichoy/article/details/50679322)\n[相机7.0图片选择适配](http://www.jianshu.com/p/3f9e3fc38eae)\n","slug":"Android-Photo-Select","published":1,"updated":"2018-08-24T09:36:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7sxdv50004hnnfrhfj2sql","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>很多项目中都会有用户修改头像或者类似的功能。<br>该功能会访问用户的相册、相机来获取图片，然后显示到页面上。<br>实现该功能还是比较简单的，网上的资料也非常多，简单查阅之后复制粘贴便能实现，但是很多细节其实并不理解。<br>并且由于Android安全性的提升，包括Android6.0（API 23）的权限系统升级、Android7.0（API 24）的私有文件访问限制，很多地方稍不注意就会发生崩溃。<br>最近再次用到了这个功能，这次打算用一篇文章来详细记录这个功能点所对应的知识点，并解决掉之前的很多疑问。</p>\n<h2 id=\"打开相册\"><a href=\"#打开相册\" class=\"headerlink\" title=\"打开相册\"></a>打开相册</h2><p>打开手机相册的方式有多种：<br>第一种：<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Intent</span> <span class=\"keyword\">intent</span> = new <span class=\"keyword\">Intent</span>();</span><br><span class=\"line\"><span class=\"keyword\">intent</span>.setAction(<span class=\"keyword\">Intent</span>.ACTION_PICK);</span><br><span class=\"line\">// 设置文件类型</span><br><span class=\"line\"><span class=\"keyword\">intent</span>.setType(<span class=\"string\">\"image/*\"</span>);</span><br><span class=\"line\">activity.startActivityForResult(<span class=\"keyword\">intent</span>, requestCode);</span><br></pre></td></tr></table></figure></p>\n<p>第二种：<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Intent</span> <span class=\"keyword\">intent</span> = new <span class=\"keyword\">Intent</span>();</span><br><span class=\"line\"><span class=\"keyword\">intent</span>.setAction(<span class=\"keyword\">Intent</span>.ACTION_GET_CONTENT);</span><br><span class=\"line\">// 设置文件类型</span><br><span class=\"line\"><span class=\"keyword\">intent</span>.setType(<span class=\"string\">\"image/*\"</span>);</span><br><span class=\"line\">activity.startActivityForResult(<span class=\"keyword\">intent</span>, requestCode);</span><br></pre></td></tr></table></figure></p>\n<p>第三种：<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Intent</span> <span class=\"keyword\">intent</span> = new <span class=\"keyword\">Intent</span>();</span><br><span class=\"line\"><span class=\"keyword\">intent</span>.setAction(<span class=\"keyword\">Intent</span>.ACTION_OPEN_DOCUMENT);</span><br><span class=\"line\">// 设置文件类型</span><br><span class=\"line\"><span class=\"keyword\">intent</span>.setType(<span class=\"string\">\"image/*\"</span>);</span><br><span class=\"line\">activity.startActivityForResult(<span class=\"keyword\">intent</span>, requestCode);</span><br></pre></td></tr></table></figure></p>\n<p>这几种方式都可以在获取到读取文件权限的前提下，完美实现图片选择。<br>第三种<a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_OPEN_DOCUMENT\" target=\"_blank\" rel=\"noopener\">ACTION_OPEN_DOCUMENT</a>是在Android5.0(API 19)之后新添加的意图，如果使用的话需要进行<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">if</span><span class=\"params\">(Build.VERSION.SDK_INT&gt;=Build.VERSION_CODES.KITKAT)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//TODO</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们这里先不介绍<a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_OPEN_DOCUMENT\" target=\"_blank\" rel=\"noopener\">ACTION_OPEN_DOCUMENT</a>。<br>第二种<a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT\" target=\"_blank\" rel=\"noopener\">ACTION_GET_CONTENT</a>与第一种<a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_PICK\" target=\"_blank\" rel=\"noopener\">ACTION_PICK</a>这两个意图类型的作用也非常类似，都是用来获取手机内容，包括联系人、相册等。<br>通过<code>intent.setType(&quot;image/*&quot;)</code>来指定<strong>MIME Type</strong>，让系统知道要打开的应用。<br>这里需要注意，必须指定<strong>MIME Type</strong>，否则项目会崩溃：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android<span class=\"selector-class\">.content</span><span class=\"selector-class\">.ActivityNotFoundException</span>: No Activity found to handle Intent &#123; act=android<span class=\"selector-class\">.intent</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.GET_CONTENT</span> &#125;</span><br><span class=\"line\">android<span class=\"selector-class\">.content</span><span class=\"selector-class\">.ActivityNotFoundException</span>: No Activity found to handle Intent &#123; act=android<span class=\"selector-class\">.intent</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.ACTION_PICK</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据不同的<strong>MIME Type</strong>，可以跳转到不同的应用。<br>那么这两者有什么区别呢？<br><a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT\" target=\"_blank\" rel=\"noopener\">ACTION_GET_CONTENT</a>与<a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_PICK\" target=\"_blank\" rel=\"noopener\">ACTION_PICK</a>的官方解释在这里。<br>英语比较差，跟着百度翻译看了半天还是不懂。<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/%E6%83%A8%E4%B8%8D%E5%BF%8D%E7%9D%B9.png\" alt=\"\"><br>英语好的同学可自行食用上面的链接，应该不需要翻墙。<br>两者的区别介绍都写在了<a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT\" target=\"_blank\" rel=\"noopener\">ACTION_GET_CONTENT</a>，大概是在说：<br>如果你有一些特定的集合（由URI标识）想让用户选择，使用<a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_PICK\" target=\"_blank\" rel=\"noopener\">ACTION_PICK</a>。<br>如果让用户基于<strong>MIME Type</strong>选择数据，使用<a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT\" target=\"_blank\" rel=\"noopener\">ACTION_GET_CONTENT</a>。<br>在平局的情况下，建议使用<a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT\" target=\"_blank\" rel=\"noopener\">ACTION_GET_CONTENT</a>。<br>这个还是需要各位看官自己好好理解，我也没能完全了解两者的使用区别。<br>并且我发现两者返回的Uri格式是不同的：<br><a href=\"http://www.jianshu.com/p/5572b42fc63f\" target=\"_blank\" rel=\"noopener\">关于Android中Uri的介绍，可以参考这篇文章</a>。</p>\n<p>两种意图分别唤起相册后，选择同一张图片的回调，也就是在onActivityResult中接收：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> onActivityResult(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (resultCode != RESULT_OK) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (requestCode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">REQUEST_CODE_ALBUM:</span><span class=\"comment\">//相册</span></span><br><span class=\"line\">            Uri dataUri = data.getData();</span><br><span class=\"line\">            Log.i(<span class=\"string\">\"mengyuanuri\"</span>,<span class=\"string\">\"uri:\"</span>+dataUri.getScheme()+<span class=\"string\">\":\"</span>+dataUri.getSchemeSpecificPart());</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来我们来看看两个意图类型下选择同一张照片返回的数据：<br><a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT\" target=\"_blank\" rel=\"noopener\">ACTION_GET_CONTENT</a>：<br><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">content:</span>//<span class=\"keyword\">com</span>.android.providers.media.documents/document/image:<span class=\"number\">2116</span></span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_PICK\" target=\"_blank\" rel=\"noopener\">ACTION_PICK</a>：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content:<span class=\"regexp\">//m</span>edia<span class=\"regexp\">/external/im</span>ages<span class=\"regexp\">/media/</span><span class=\"number\">2116</span></span><br></pre></td></tr></table></figure></p>\n<p>没有其他的东西，两者都是返回一个Uri。<br>为什么不直接返回给我们图片，而是一个Uri呢？<br><a href=\"http://blog.csdn.net/wingichoy/article/details/50679322\" target=\"_blank\" rel=\"noopener\">因为Intent传输有大小的限制。</a><br>所以我们需要根据Uri来获取到文件的具体路径。<br>但是我们发现，就算是同一张照片，两种意图下，返回的Uri也是不一致的。<br>这主要是因为Uri在Android中的类型也分为很多种，比如这两个意图的Uri种类就不一致。<br>这里就不做赘述了，我们可以通过网上大神封装的解析Uri的方法将它们统一转化成File路径：<br><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> getPath( <span class=\"keyword\">final</span> Uri uri) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// DocumentProvider</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT &amp;&amp; DocumentsContract.isDocumentUri(App.context, uri)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ExternalStorageProvider</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isExternalStorageDocument(uri)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> docId = DocumentsContract.getDocumentId(uri);</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">String</span>[] <span class=\"built_in\">split</span> = docId.<span class=\"built_in\">split</span>(<span class=\"string\">\":\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> type = <span class=\"built_in\">split</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">\"primary\"</span>.equalsIgnoreCase(type)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Environment.getExternalStorageDirectory() + <span class=\"string\">\"/\"</span> + <span class=\"built_in\">split</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// TODO handle non-primary volumes</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// DownloadsProvider</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isDownloadsDocument(uri)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> id = DocumentsContract.getDocumentId(uri);</span><br><span class=\"line\">                <span class=\"keyword\">final</span> Uri contentUri = ContentUris.withAppendedId(</span><br><span class=\"line\">                        Uri.parse(<span class=\"string\">\"content://downloads/public_downloads\"</span>), Long.valueOf(id));</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> getDataColumn(App.context, contentUri, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// MediaProvider</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isMediaDocument(uri)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> docId = DocumentsContract.getDocumentId(uri);</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">String</span>[] <span class=\"built_in\">split</span> = docId.<span class=\"built_in\">split</span>(<span class=\"string\">\":\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> type = <span class=\"built_in\">split</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">                Uri contentUri = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">\"image\"</span>.equals(type)) &#123;</span><br><span class=\"line\">                    contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"video\"</span>.equals(type)) &#123;</span><br><span class=\"line\">                    contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"audio\"</span>.equals(type)) &#123;</span><br><span class=\"line\">                    contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> selection = <span class=\"string\">\"_id=?\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">String</span>[] selectionArgs = <span class=\"keyword\">new</span> <span class=\"keyword\">String</span>[]&#123;</span><br><span class=\"line\">                        <span class=\"built_in\">split</span>[<span class=\"number\">1</span>]</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> getDataColumn(App.context, contentUri, selection, selectionArgs);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// MediaStore (and general)</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"content\"</span>.equalsIgnoreCase(uri.getScheme())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getDataColumn(App.context, uri, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// File</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"file\"</span>.equalsIgnoreCase(uri.getScheme())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> uri.getPath();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>调用完成后，会发现不同的Uri对应的是同一个文件路径：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/storage/</span>emulated<span class=\"regexp\">/0/</span>temp<span class=\"regexp\">/kouliang_avatar.jpg</span></span><br></pre></td></tr></table></figure></p>\n<p>断点跟进该方法，会发现两个Uri走的是不同的if判断。</p>\n<p>简单来说，三种方法都可以使用，并且三种方法都是在onActivityResult中返回Uri，而不是图片。<br>一般情况使用<a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT\" target=\"_blank\" rel=\"noopener\">ACTION_GET_CONTENT</a>的会多一些。</p>\n<h2 id=\"相机\"><a href=\"#相机\" class=\"headerlink\" title=\"相机\"></a>相机</h2><p>打开相机的方式：<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//指定相机意图</span><br><span class=\"line\"><span class=\"keyword\">Intent</span> <span class=\"keyword\">intent</span> = new <span class=\"keyword\">Intent</span>(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class=\"line\">//设置相片保存的地址</span><br><span class=\"line\"><span class=\"keyword\">intent</span>.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(<span class=\"keyword\">file</span>));</span><br><span class=\"line\">activity.startActivityForResult(<span class=\"keyword\">intent</span>, requestCode);</span><br></pre></td></tr></table></figure></p>\n<p>相机图片的获取方式不同于相册，相机图片获取需要先指定图片的保存路径，在拍摄成功后，我们只需直接去指定路径获取即可:<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch </span>(requestCode) &#123;</span><br><span class=\"line\">    //相册</span><br><span class=\"line\">    case REQUEST_CODE_ALBUM:</span><br><span class=\"line\">        Uri dataUri = <span class=\"meta\">data</span>.getData()<span class=\"comment\">;</span></span><br><span class=\"line\">        Log.i(<span class=\"string\">\"mengyuanuri\"</span>, <span class=\"string\">\"相册uri:\"</span> + dataUri.getScheme() + <span class=\"string\">\":\"</span> + dataUri.getSchemeSpecificPart())<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">break;</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>   //相机，注意，相机的回调中Intent为空，不要使用</span><br><span class=\"line\">    case REQUEST_CODE_CAMER:</span><br><span class=\"line\">        File <span class=\"keyword\">bgPath </span>= Constant.<span class=\"keyword\">bgPath;</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>       <span class=\"keyword\">Bitmap </span><span class=\"keyword\">bitmap </span>= <span class=\"keyword\">BitmapFactory.decodeFile(bgPath.getPath());</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>       iv_bg.setImageBitmap(<span class=\"keyword\">bitmap);</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>       <span class=\"keyword\">break;</span></span><br><span class=\"line\"><span class=\"keyword\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>非常简单，在相机回调中去指定路径中读取图片并显示。<br>但是我们应该可以想到，<strong>有些手机没有相机</strong>，也就是没有<a href=\"https://developer.android.google.cn/reference/android/provider/MediaStore.html#ACTION_IMAGE_CAPTURE\" target=\"_blank\" rel=\"noopener\">MediaStore.ACTION_IMAGE_CAPTURE</a>意图对应的应用。<br>如果没有对其进行判断就会抛出<a href=\"https://developer.android.google.cn/reference/android/content/ActivityNotFoundException.html\" target=\"_blank\" rel=\"noopener\">ActivityNotFound</a>的异常。<br>如何解决这个问题：</p>\n<ol>\n<li>try-catch，简单粗暴；</li>\n<li>通过PackageManager去查询<a href=\"https://developer.android.google.cn/reference/android/provider/MediaStore.html#ACTION_IMAGE_CAPTURE\" target=\"_blank\" rel=\"noopener\">MediaStore.ACTION_IMAGE_CAPTURE</a>意图是否存在。</li>\n</ol>\n<p>两种做法都很简单，这里展示如何用PackageManager：<br><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断某个意图是否存在</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> static <span class=\"built_in\">boolean</span> isHaveCame(<span class=\"built_in\">String</span> intentName) &#123;</span><br><span class=\"line\">    PackageManager packageManager = App.context.getPackageManager();</span><br><span class=\"line\">    Intent intent = <span class=\"literal\">new</span> Intent(intentName);</span><br><span class=\"line\">    <span class=\"built_in\">List</span>&lt;ResolveInfo&gt; <span class=\"built_in\">list</span> = packageManager.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>.size() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接着我们运行，十分成功。<br>但是在7.1的虚拟机中，打开相机崩溃了：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android<span class=\"selector-class\">.os</span><span class=\"selector-class\">.FileUriExposedException</span>: file:<span class=\"comment\">///storage/emulated/0/photo_bg.jpg exposed beyond app through ClipData.Item.getUri(</span></span><br><span class=\"line\">    at android<span class=\"selector-class\">.os</span><span class=\"selector-class\">.StrictMode</span><span class=\"selector-class\">.onFileUriExposed</span>(StrictMode<span class=\"selector-class\">.java</span>:<span class=\"number\">1799</span>)</span><br><span class=\"line\">    at android<span class=\"selector-class\">.net</span><span class=\"selector-class\">.Uri</span><span class=\"selector-class\">.checkFileUriExposed</span>(Uri<span class=\"selector-class\">.java</span>:<span class=\"number\">2346</span>)</span><br><span class=\"line\">    at android<span class=\"selector-class\">.content</span><span class=\"selector-class\">.ClipData</span><span class=\"selector-class\">.prepareToLeaveProcess</span>(ClipData<span class=\"selector-class\">.java</span>:<span class=\"number\">845</span>)</span><br><span class=\"line\">    at android<span class=\"selector-class\">.content</span><span class=\"selector-class\">.Intent</span><span class=\"selector-class\">.prepareToLeaveProcess</span>(Intent<span class=\"selector-class\">.java</span>:<span class=\"number\">8941</span>)</span><br><span class=\"line\">    at android<span class=\"selector-class\">.content</span><span class=\"selector-class\">.Intent</span><span class=\"selector-class\">.prepareToLeaveProcess</span>(Intent<span class=\"selector-class\">.java</span>:<span class=\"number\">8926</span>)</span><br><span class=\"line\">    at android<span class=\"selector-class\">.app</span><span class=\"selector-class\">.Instrumentation</span><span class=\"selector-class\">.execStartActivity</span>(Instrumentation<span class=\"selector-class\">.java</span>:<span class=\"number\">1517</span>)</span><br><span class=\"line\">    at android<span class=\"selector-class\">.app</span><span class=\"selector-class\">.Activity</span><span class=\"selector-class\">.startActivityForResult</span>(Activity<span class=\"selector-class\">.java</span>:<span class=\"number\">4225</span>)</span><br><span class=\"line\">    at android<span class=\"selector-class\">.support</span><span class=\"selector-class\">.v4</span><span class=\"selector-class\">.app</span><span class=\"selector-class\">.BaseFragmentActivityJB</span><span class=\"selector-class\">.startActivityForResult</span>(BaseFragmentActivityJB<span class=\"selector-class\">.java</span>:<span class=\"number\">54</span>)</span><br><span class=\"line\">    at android<span class=\"selector-class\">.support</span><span class=\"selector-class\">.v4</span><span class=\"selector-class\">.app</span><span class=\"selector-class\">.FragmentActivity</span><span class=\"selector-class\">.startActivityForResult</span>(FragmentActivity<span class=\"selector-class\">.java</span>:<span class=\"number\">75</span>)</span><br><span class=\"line\">    at android<span class=\"selector-class\">.app</span><span class=\"selector-class\">.Activity</span><span class=\"selector-class\">.startActivityForResult</span>(Activity<span class=\"selector-class\">.java</span>:<span class=\"number\">4183</span>)</span><br><span class=\"line\">    at android<span class=\"selector-class\">.support</span><span class=\"selector-class\">.v4</span><span class=\"selector-class\">.app</span><span class=\"selector-class\">.FragmentActivity</span><span class=\"selector-class\">.startActivityForResult</span>(FragmentActivity<span class=\"selector-class\">.java</span>:<span class=\"number\">708</span>)</span><br><span class=\"line\">    at com<span class=\"selector-class\">.my</span><span class=\"selector-class\">.photoget</span><span class=\"selector-class\">.utils</span><span class=\"selector-class\">.AppUtils</span><span class=\"selector-class\">.startCamer</span>(AppUtils<span class=\"selector-class\">.java</span>:<span class=\"number\">37</span>)</span><br></pre></td></tr></table></figure></p>\n<p>崩溃的主要原因是因为在7.0(API 24)中对文件读取进行了安全性的提升，<a href=\"http://www.jianshu.com/p/3f9e3fc38eae\" target=\"_blank\" rel=\"noopener\">这篇文章详细介绍了解决方案</a>。<br>这里提一下，这和当初Android6.0(API 23)权限管理改版一致，如果<strong>build.gradle</strong>中的<code>targetSdkVersion</code>&lt;23，则会沿用以前的权限管理机制，无需进行权限管理改版，<a href=\"http://www.jianshu.com/p/9271efd71450\" target=\"_blank\" rel=\"noopener\">权限管理详见这篇小文</a>。<br>同理，这里如果你的<code>targetSdkVersion</code>&lt;24的话，则无需进行上述崩溃的适配。<br>但是更新一定是往更好的方向去的，还是建议各位看官及时更新，及时适配，保证<code>targetSdkVersion</code>为最新SDK。</p>\n<h2 id=\"裁剪\"><a href=\"#裁剪\" class=\"headerlink\" title=\"裁剪\"></a>裁剪</h2><p>裁剪功能是可选功能，如果想要对获取到的图片进行裁剪，我们可以继续使用裁剪Intent来对图片进行裁剪：<br><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"string\">\"com.android.camera.action.CROP\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//设置要裁剪的图片Uri</span></span><br><span class=\"line\">intent.setDataAndType(cropBean.dataUri, <span class=\"string\">\"image/*\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//配置一系列裁剪参数</span></span><br><span class=\"line\">intent.putExtra(<span class=\"string\">\"outputX\"</span>, cropBean.outputX);</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">\"outputY\"</span>, cropBean.outputY);</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">\"scale\"</span>, cropBean.<span class=\"built_in\">scale</span>);</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">\"aspectX\"</span>, cropBean.aspectX);</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">\"aspectY\"</span>, cropBean.aspectY);</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">\"outputFormat\"</span>, cropBean.outputFormat);</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">\"return-data\"</span>, cropBean.isReturnData);</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">\"output\"</span>, cropBean.saveUri);</span><br><span class=\"line\"><span class=\"comment\">//跳转</span></span><br><span class=\"line\">activity.startActivityForResult(intent, requestCode);</span><br></pre></td></tr></table></figure></p>\n<p>裁剪参数的含义可以参考<a href=\"https://github.com/showdy/Android_Note/blob/master/showdy_note/android/strategy/%E4%BD%BF%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%86%8C%E5%9B%BE%E7%89%87%E6%88%96%E6%8B%8D%E7%85%A7%E5%B9%B6%E8%A3%81%E5%89%AA%E4%B9%8BAndroid_N%E9%80%82%E9%85%8D.md\" target=\"_blank\" rel=\"noopener\">这篇文章</a>：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">附加选项</th>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:right\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">crop</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:right\">发送裁剪信号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">aspectX</td>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:right\">X方向上的比例</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">aspectY</td>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:right\">Y方向上的比例</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">outputX</td>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:right\">裁剪区的宽</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">outputY</td>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:right\">裁剪区的高</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">scale</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:right\">是否保留比例</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">return-data</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:right\">是否将数据保留在Bitmap中返回</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">data</td>\n<td style=\"text-align:center\">Parcelable</td>\n<td style=\"text-align:right\">相应的Bitmap数据</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">circleCrop</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:right\">圆形裁剪区域</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">output</td>\n<td style=\"text-align:center\">URI</td>\n<td style=\"text-align:right\">将URI指向相应的file://</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">outputFormat</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:right\">图片输出格式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">noFaceDetection</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:right\">是否取消人脸识别</td>\n</tr>\n</tbody>\n</table>\n<p>每个属性的解释都很清晰，这里我将裁剪参数封装为了一个Bean对象：<br><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> class CropBean &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//要裁剪的图片Uri</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Uri dataUri;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//裁剪宽度</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> outputX;</span><br><span class=\"line\">    <span class=\"comment\">//裁剪高度</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> outputY;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//X方向上的比例</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> aspectX;</span><br><span class=\"line\">    <span class=\"comment\">//Y方向上的比例</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> aspectY;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//是否保留比例</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> <span class=\"built_in\">scale</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//是否将数据保存在Bitmap中返回</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> isReturnData;</span><br><span class=\"line\">    <span class=\"comment\">//相应的Bitmap数据</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Parcelable returnData;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果不需要将图片在Bitmap中返回，需要传递保存图片的Uri</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Uri saveUri;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//圆形裁剪区域</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">String</span> circleCrop;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//图片输出格式，默认JPEG</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">String</span> outputFormat = Bitmap.CompressFormat.JPEG.toString();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//是否取消人脸识别</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> noFaceDetection;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据宽高计算裁剪比例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> caculateAspect() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">scale</span> = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (outputX == outputY) &#123;</span><br><span class=\"line\">            aspectX = <span class=\"number\">1</span>;</span><br><span class=\"line\">            aspectY = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">float</span> proportion = (<span class=\"built_in\">float</span>) outputX / (<span class=\"built_in\">float</span>) outputY;</span><br><span class=\"line\"></span><br><span class=\"line\">        aspectX = (<span class=\"built_in\">int</span>) (proportion * <span class=\"number\">100</span>);</span><br><span class=\"line\">        aspectY = <span class=\"number\">100</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>关于封装对象中<code>caculateAspect()</code>方法，因为<strong>aspectX</strong>与<strong>aspectY</strong>是用来设定裁剪框宽高比例的，所以我选择在指定完<strong>outputX</strong>与<strong>outputY</strong>（也就是裁剪图片的宽度和高度）之后，直接根据宽高来计算裁剪框的大小。<br><code>caculateAspect()</code>中就是具体的计算过程。<br>还有几个比较重要的参数需要提一下：</p>\n<ul>\n<li><strong>intent.setData(Uri uri)</strong>是必须指定的，它代表着要裁剪的图片的Uri。</li>\n<li><strong>return-data</strong>参数代表是否要返回数据，如果为true，则返回Bitmap对象，如果为false，则会将图片直接保存到另一个参数<strong>output</strong>中。也就是说，当<strong>return-data</strong>为true时，<strong>output</strong>是没有用的，直接在<strong>onActivityResult</strong>中取data当中的Bitmap即可。如果为false，则直接在onActivityResult中去之前指定到<strong>output</strong>中的地址取出图片即可。</li>\n<li>综上一点，强烈建议设置<strong>return-data</strong>为false并且设置<strong>output</strong>，<a href=\"http://blog.csdn.net/wingichoy/article/details/50679322\" target=\"_blank\" rel=\"noopener\">因为Intent传输是有大小限制的</a>。为防止超出大小的现象发生，通过Uri传输最为安全。</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到此为止，获取图片显示的功能已经完成了。<br><a href=\"https://github.com/YuanTiger/PhotoGet\" target=\"_blank\" rel=\"noopener\">整个项目已经上传至GitHub</a>，简单总结一下：</p>\n<ol>\n<li>通过相册获取图片的方式有很多，但是在onActivityResult中都是以Uri的方式传递的。</li>\n<li>裁剪功能不是必要的，如果没有裁剪需求可忽略。强烈建议不要将<strong>return-data</strong>设置为true，可能会超出Intent传输大小限制。</li>\n<li>当你的targetSdkVersion&gt;=23时，需要进行<a href=\"http://www.jianshu.com/p/9271efd71450\" target=\"_blank\" rel=\"noopener\">权限管理的升级</a>，当你的targetSdkVersion&gt;=24时，需要进行<a href=\"http://www.jianshu.com/p/3f9e3fc38eae\" target=\"_blank\" rel=\"noopener\">FileProvider的适配</a>。强烈建议进行适配，提升应用的安全性。</li>\n</ol>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p><a href=\"https://github.com/showdy/Android_Note/blob/master/showdy_note/android/strategy/%E4%BD%BF%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%86%8C%E5%9B%BE%E7%89%87%E6%88%96%E6%8B%8D%E7%85%A7%E5%B9%B6%E8%A3%81%E5%89%AA%E4%B9%8BAndroid_N%E9%80%82%E9%85%8D.md\" target=\"_blank\" rel=\"noopener\">使用系统裁剪</a><br><a href=\"http://blog.csdn.net/wingichoy/article/details/50679322\" target=\"_blank\" rel=\"noopener\">Intent传输大小实战</a><br><a href=\"http://www.jianshu.com/p/3f9e3fc38eae\" target=\"_blank\" rel=\"noopener\">相机7.0图片选择适配</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>很多项目中都会有用户修改头像或者类似的功能。<br>该功能会访问用户的相册、相机来获取图片，然后显示到页面上。<br>实现该功能还是比较简单的，网上的资料也非常多，简单查阅之后复制粘贴便能实现，但是很多细节其实并不理解。<br>并且由于Android安全性的提升，包括Android6.0（API 23）的权限系统升级、Android7.0（API 24）的私有文件访问限制，很多地方稍不注意就会发生崩溃。<br>最近再次用到了这个功能，这次打算用一篇文章来详细记录这个功能点所对应的知识点，并解决掉之前的很多疑问。</p>\n<h2 id=\"打开相册\"><a href=\"#打开相册\" class=\"headerlink\" title=\"打开相册\"></a>打开相册</h2><p>打开手机相册的方式有多种：<br>第一种：<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Intent</span> <span class=\"keyword\">intent</span> = new <span class=\"keyword\">Intent</span>();</span><br><span class=\"line\"><span class=\"keyword\">intent</span>.setAction(<span class=\"keyword\">Intent</span>.ACTION_PICK);</span><br><span class=\"line\">// 设置文件类型</span><br><span class=\"line\"><span class=\"keyword\">intent</span>.setType(<span class=\"string\">\"image/*\"</span>);</span><br><span class=\"line\">activity.startActivityForResult(<span class=\"keyword\">intent</span>, requestCode);</span><br></pre></td></tr></table></figure></p>\n<p>第二种：<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Intent</span> <span class=\"keyword\">intent</span> = new <span class=\"keyword\">Intent</span>();</span><br><span class=\"line\"><span class=\"keyword\">intent</span>.setAction(<span class=\"keyword\">Intent</span>.ACTION_GET_CONTENT);</span><br><span class=\"line\">// 设置文件类型</span><br><span class=\"line\"><span class=\"keyword\">intent</span>.setType(<span class=\"string\">\"image/*\"</span>);</span><br><span class=\"line\">activity.startActivityForResult(<span class=\"keyword\">intent</span>, requestCode);</span><br></pre></td></tr></table></figure></p>\n<p>第三种：<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Intent</span> <span class=\"keyword\">intent</span> = new <span class=\"keyword\">Intent</span>();</span><br><span class=\"line\"><span class=\"keyword\">intent</span>.setAction(<span class=\"keyword\">Intent</span>.ACTION_OPEN_DOCUMENT);</span><br><span class=\"line\">// 设置文件类型</span><br><span class=\"line\"><span class=\"keyword\">intent</span>.setType(<span class=\"string\">\"image/*\"</span>);</span><br><span class=\"line\">activity.startActivityForResult(<span class=\"keyword\">intent</span>, requestCode);</span><br></pre></td></tr></table></figure></p>\n<p>这几种方式都可以在获取到读取文件权限的前提下，完美实现图片选择。<br>第三种<a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_OPEN_DOCUMENT\" target=\"_blank\" rel=\"noopener\">ACTION_OPEN_DOCUMENT</a>是在Android5.0(API 19)之后新添加的意图，如果使用的话需要进行<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">if</span><span class=\"params\">(Build.VERSION.SDK_INT&gt;=Build.VERSION_CODES.KITKAT)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//TODO</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们这里先不介绍<a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_OPEN_DOCUMENT\" target=\"_blank\" rel=\"noopener\">ACTION_OPEN_DOCUMENT</a>。<br>第二种<a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT\" target=\"_blank\" rel=\"noopener\">ACTION_GET_CONTENT</a>与第一种<a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_PICK\" target=\"_blank\" rel=\"noopener\">ACTION_PICK</a>这两个意图类型的作用也非常类似，都是用来获取手机内容，包括联系人、相册等。<br>通过<code>intent.setType(&quot;image/*&quot;)</code>来指定<strong>MIME Type</strong>，让系统知道要打开的应用。<br>这里需要注意，必须指定<strong>MIME Type</strong>，否则项目会崩溃：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android<span class=\"selector-class\">.content</span><span class=\"selector-class\">.ActivityNotFoundException</span>: No Activity found to handle Intent &#123; act=android<span class=\"selector-class\">.intent</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.GET_CONTENT</span> &#125;</span><br><span class=\"line\">android<span class=\"selector-class\">.content</span><span class=\"selector-class\">.ActivityNotFoundException</span>: No Activity found to handle Intent &#123; act=android<span class=\"selector-class\">.intent</span><span class=\"selector-class\">.action</span><span class=\"selector-class\">.ACTION_PICK</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据不同的<strong>MIME Type</strong>，可以跳转到不同的应用。<br>那么这两者有什么区别呢？<br><a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT\" target=\"_blank\" rel=\"noopener\">ACTION_GET_CONTENT</a>与<a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_PICK\" target=\"_blank\" rel=\"noopener\">ACTION_PICK</a>的官方解释在这里。<br>英语比较差，跟着百度翻译看了半天还是不懂。<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/%E6%83%A8%E4%B8%8D%E5%BF%8D%E7%9D%B9.png\" alt=\"\"><br>英语好的同学可自行食用上面的链接，应该不需要翻墙。<br>两者的区别介绍都写在了<a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT\" target=\"_blank\" rel=\"noopener\">ACTION_GET_CONTENT</a>，大概是在说：<br>如果你有一些特定的集合（由URI标识）想让用户选择，使用<a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_PICK\" target=\"_blank\" rel=\"noopener\">ACTION_PICK</a>。<br>如果让用户基于<strong>MIME Type</strong>选择数据，使用<a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT\" target=\"_blank\" rel=\"noopener\">ACTION_GET_CONTENT</a>。<br>在平局的情况下，建议使用<a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT\" target=\"_blank\" rel=\"noopener\">ACTION_GET_CONTENT</a>。<br>这个还是需要各位看官自己好好理解，我也没能完全了解两者的使用区别。<br>并且我发现两者返回的Uri格式是不同的：<br><a href=\"http://www.jianshu.com/p/5572b42fc63f\" target=\"_blank\" rel=\"noopener\">关于Android中Uri的介绍，可以参考这篇文章</a>。</p>\n<p>两种意图分别唤起相册后，选择同一张图片的回调，也就是在onActivityResult中接收：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> onActivityResult(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (resultCode != RESULT_OK) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (requestCode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">REQUEST_CODE_ALBUM:</span><span class=\"comment\">//相册</span></span><br><span class=\"line\">            Uri dataUri = data.getData();</span><br><span class=\"line\">            Log.i(<span class=\"string\">\"mengyuanuri\"</span>,<span class=\"string\">\"uri:\"</span>+dataUri.getScheme()+<span class=\"string\">\":\"</span>+dataUri.getSchemeSpecificPart());</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来我们来看看两个意图类型下选择同一张照片返回的数据：<br><a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT\" target=\"_blank\" rel=\"noopener\">ACTION_GET_CONTENT</a>：<br><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">content:</span>//<span class=\"keyword\">com</span>.android.providers.media.documents/document/image:<span class=\"number\">2116</span></span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_PICK\" target=\"_blank\" rel=\"noopener\">ACTION_PICK</a>：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">content:<span class=\"regexp\">//m</span>edia<span class=\"regexp\">/external/im</span>ages<span class=\"regexp\">/media/</span><span class=\"number\">2116</span></span><br></pre></td></tr></table></figure></p>\n<p>没有其他的东西，两者都是返回一个Uri。<br>为什么不直接返回给我们图片，而是一个Uri呢？<br><a href=\"http://blog.csdn.net/wingichoy/article/details/50679322\" target=\"_blank\" rel=\"noopener\">因为Intent传输有大小的限制。</a><br>所以我们需要根据Uri来获取到文件的具体路径。<br>但是我们发现，就算是同一张照片，两种意图下，返回的Uri也是不一致的。<br>这主要是因为Uri在Android中的类型也分为很多种，比如这两个意图的Uri种类就不一致。<br>这里就不做赘述了，我们可以通过网上大神封装的解析Uri的方法将它们统一转化成File路径：<br><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> getPath( <span class=\"keyword\">final</span> Uri uri) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// DocumentProvider</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT &amp;&amp; DocumentsContract.isDocumentUri(App.context, uri)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ExternalStorageProvider</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isExternalStorageDocument(uri)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> docId = DocumentsContract.getDocumentId(uri);</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">String</span>[] <span class=\"built_in\">split</span> = docId.<span class=\"built_in\">split</span>(<span class=\"string\">\":\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> type = <span class=\"built_in\">split</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">\"primary\"</span>.equalsIgnoreCase(type)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Environment.getExternalStorageDirectory() + <span class=\"string\">\"/\"</span> + <span class=\"built_in\">split</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// TODO handle non-primary volumes</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// DownloadsProvider</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isDownloadsDocument(uri)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> id = DocumentsContract.getDocumentId(uri);</span><br><span class=\"line\">                <span class=\"keyword\">final</span> Uri contentUri = ContentUris.withAppendedId(</span><br><span class=\"line\">                        Uri.parse(<span class=\"string\">\"content://downloads/public_downloads\"</span>), Long.valueOf(id));</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> getDataColumn(App.context, contentUri, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// MediaProvider</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isMediaDocument(uri)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> docId = DocumentsContract.getDocumentId(uri);</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">String</span>[] <span class=\"built_in\">split</span> = docId.<span class=\"built_in\">split</span>(<span class=\"string\">\":\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> type = <span class=\"built_in\">split</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">                Uri contentUri = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">\"image\"</span>.equals(type)) &#123;</span><br><span class=\"line\">                    contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"video\"</span>.equals(type)) &#123;</span><br><span class=\"line\">                    contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"audio\"</span>.equals(type)) &#123;</span><br><span class=\"line\">                    contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> selection = <span class=\"string\">\"_id=?\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">String</span>[] selectionArgs = <span class=\"keyword\">new</span> <span class=\"keyword\">String</span>[]&#123;</span><br><span class=\"line\">                        <span class=\"built_in\">split</span>[<span class=\"number\">1</span>]</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> getDataColumn(App.context, contentUri, selection, selectionArgs);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// MediaStore (and general)</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"content\"</span>.equalsIgnoreCase(uri.getScheme())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getDataColumn(App.context, uri, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// File</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"file\"</span>.equalsIgnoreCase(uri.getScheme())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> uri.getPath();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>调用完成后，会发现不同的Uri对应的是同一个文件路径：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/storage/</span>emulated<span class=\"regexp\">/0/</span>temp<span class=\"regexp\">/kouliang_avatar.jpg</span></span><br></pre></td></tr></table></figure></p>\n<p>断点跟进该方法，会发现两个Uri走的是不同的if判断。</p>\n<p>简单来说，三种方法都可以使用，并且三种方法都是在onActivityResult中返回Uri，而不是图片。<br>一般情况使用<a href=\"https://developer.android.google.cn/reference/android/content/Intent.html#ACTION_GET_CONTENT\" target=\"_blank\" rel=\"noopener\">ACTION_GET_CONTENT</a>的会多一些。</p>\n<h2 id=\"相机\"><a href=\"#相机\" class=\"headerlink\" title=\"相机\"></a>相机</h2><p>打开相机的方式：<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//指定相机意图</span><br><span class=\"line\"><span class=\"keyword\">Intent</span> <span class=\"keyword\">intent</span> = new <span class=\"keyword\">Intent</span>(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class=\"line\">//设置相片保存的地址</span><br><span class=\"line\"><span class=\"keyword\">intent</span>.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(<span class=\"keyword\">file</span>));</span><br><span class=\"line\">activity.startActivityForResult(<span class=\"keyword\">intent</span>, requestCode);</span><br></pre></td></tr></table></figure></p>\n<p>相机图片的获取方式不同于相册，相机图片获取需要先指定图片的保存路径，在拍摄成功后，我们只需直接去指定路径获取即可:<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch </span>(requestCode) &#123;</span><br><span class=\"line\">    //相册</span><br><span class=\"line\">    case REQUEST_CODE_ALBUM:</span><br><span class=\"line\">        Uri dataUri = <span class=\"meta\">data</span>.getData()<span class=\"comment\">;</span></span><br><span class=\"line\">        Log.i(<span class=\"string\">\"mengyuanuri\"</span>, <span class=\"string\">\"相册uri:\"</span> + dataUri.getScheme() + <span class=\"string\">\":\"</span> + dataUri.getSchemeSpecificPart())<span class=\"comment\">;</span></span><br><span class=\"line\">        <span class=\"keyword\">break;</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>   //相机，注意，相机的回调中Intent为空，不要使用</span><br><span class=\"line\">    case REQUEST_CODE_CAMER:</span><br><span class=\"line\">        File <span class=\"keyword\">bgPath </span>= Constant.<span class=\"keyword\">bgPath;</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>       <span class=\"keyword\">Bitmap </span><span class=\"keyword\">bitmap </span>= <span class=\"keyword\">BitmapFactory.decodeFile(bgPath.getPath());</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>       iv_bg.setImageBitmap(<span class=\"keyword\">bitmap);</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>       <span class=\"keyword\">break;</span></span><br><span class=\"line\"><span class=\"keyword\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>非常简单，在相机回调中去指定路径中读取图片并显示。<br>但是我们应该可以想到，<strong>有些手机没有相机</strong>，也就是没有<a href=\"https://developer.android.google.cn/reference/android/provider/MediaStore.html#ACTION_IMAGE_CAPTURE\" target=\"_blank\" rel=\"noopener\">MediaStore.ACTION_IMAGE_CAPTURE</a>意图对应的应用。<br>如果没有对其进行判断就会抛出<a href=\"https://developer.android.google.cn/reference/android/content/ActivityNotFoundException.html\" target=\"_blank\" rel=\"noopener\">ActivityNotFound</a>的异常。<br>如何解决这个问题：</p>\n<ol>\n<li>try-catch，简单粗暴；</li>\n<li>通过PackageManager去查询<a href=\"https://developer.android.google.cn/reference/android/provider/MediaStore.html#ACTION_IMAGE_CAPTURE\" target=\"_blank\" rel=\"noopener\">MediaStore.ACTION_IMAGE_CAPTURE</a>意图是否存在。</li>\n</ol>\n<p>两种做法都很简单，这里展示如何用PackageManager：<br><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断某个意图是否存在</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> static <span class=\"built_in\">boolean</span> isHaveCame(<span class=\"built_in\">String</span> intentName) &#123;</span><br><span class=\"line\">    PackageManager packageManager = App.context.getPackageManager();</span><br><span class=\"line\">    Intent intent = <span class=\"literal\">new</span> Intent(intentName);</span><br><span class=\"line\">    <span class=\"built_in\">List</span>&lt;ResolveInfo&gt; <span class=\"built_in\">list</span> = packageManager.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>.size() &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接着我们运行，十分成功。<br>但是在7.1的虚拟机中，打开相机崩溃了：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android<span class=\"selector-class\">.os</span><span class=\"selector-class\">.FileUriExposedException</span>: file:<span class=\"comment\">///storage/emulated/0/photo_bg.jpg exposed beyond app through ClipData.Item.getUri(</span></span><br><span class=\"line\">    at android<span class=\"selector-class\">.os</span><span class=\"selector-class\">.StrictMode</span><span class=\"selector-class\">.onFileUriExposed</span>(StrictMode<span class=\"selector-class\">.java</span>:<span class=\"number\">1799</span>)</span><br><span class=\"line\">    at android<span class=\"selector-class\">.net</span><span class=\"selector-class\">.Uri</span><span class=\"selector-class\">.checkFileUriExposed</span>(Uri<span class=\"selector-class\">.java</span>:<span class=\"number\">2346</span>)</span><br><span class=\"line\">    at android<span class=\"selector-class\">.content</span><span class=\"selector-class\">.ClipData</span><span class=\"selector-class\">.prepareToLeaveProcess</span>(ClipData<span class=\"selector-class\">.java</span>:<span class=\"number\">845</span>)</span><br><span class=\"line\">    at android<span class=\"selector-class\">.content</span><span class=\"selector-class\">.Intent</span><span class=\"selector-class\">.prepareToLeaveProcess</span>(Intent<span class=\"selector-class\">.java</span>:<span class=\"number\">8941</span>)</span><br><span class=\"line\">    at android<span class=\"selector-class\">.content</span><span class=\"selector-class\">.Intent</span><span class=\"selector-class\">.prepareToLeaveProcess</span>(Intent<span class=\"selector-class\">.java</span>:<span class=\"number\">8926</span>)</span><br><span class=\"line\">    at android<span class=\"selector-class\">.app</span><span class=\"selector-class\">.Instrumentation</span><span class=\"selector-class\">.execStartActivity</span>(Instrumentation<span class=\"selector-class\">.java</span>:<span class=\"number\">1517</span>)</span><br><span class=\"line\">    at android<span class=\"selector-class\">.app</span><span class=\"selector-class\">.Activity</span><span class=\"selector-class\">.startActivityForResult</span>(Activity<span class=\"selector-class\">.java</span>:<span class=\"number\">4225</span>)</span><br><span class=\"line\">    at android<span class=\"selector-class\">.support</span><span class=\"selector-class\">.v4</span><span class=\"selector-class\">.app</span><span class=\"selector-class\">.BaseFragmentActivityJB</span><span class=\"selector-class\">.startActivityForResult</span>(BaseFragmentActivityJB<span class=\"selector-class\">.java</span>:<span class=\"number\">54</span>)</span><br><span class=\"line\">    at android<span class=\"selector-class\">.support</span><span class=\"selector-class\">.v4</span><span class=\"selector-class\">.app</span><span class=\"selector-class\">.FragmentActivity</span><span class=\"selector-class\">.startActivityForResult</span>(FragmentActivity<span class=\"selector-class\">.java</span>:<span class=\"number\">75</span>)</span><br><span class=\"line\">    at android<span class=\"selector-class\">.app</span><span class=\"selector-class\">.Activity</span><span class=\"selector-class\">.startActivityForResult</span>(Activity<span class=\"selector-class\">.java</span>:<span class=\"number\">4183</span>)</span><br><span class=\"line\">    at android<span class=\"selector-class\">.support</span><span class=\"selector-class\">.v4</span><span class=\"selector-class\">.app</span><span class=\"selector-class\">.FragmentActivity</span><span class=\"selector-class\">.startActivityForResult</span>(FragmentActivity<span class=\"selector-class\">.java</span>:<span class=\"number\">708</span>)</span><br><span class=\"line\">    at com<span class=\"selector-class\">.my</span><span class=\"selector-class\">.photoget</span><span class=\"selector-class\">.utils</span><span class=\"selector-class\">.AppUtils</span><span class=\"selector-class\">.startCamer</span>(AppUtils<span class=\"selector-class\">.java</span>:<span class=\"number\">37</span>)</span><br></pre></td></tr></table></figure></p>\n<p>崩溃的主要原因是因为在7.0(API 24)中对文件读取进行了安全性的提升，<a href=\"http://www.jianshu.com/p/3f9e3fc38eae\" target=\"_blank\" rel=\"noopener\">这篇文章详细介绍了解决方案</a>。<br>这里提一下，这和当初Android6.0(API 23)权限管理改版一致，如果<strong>build.gradle</strong>中的<code>targetSdkVersion</code>&lt;23，则会沿用以前的权限管理机制，无需进行权限管理改版，<a href=\"http://www.jianshu.com/p/9271efd71450\" target=\"_blank\" rel=\"noopener\">权限管理详见这篇小文</a>。<br>同理，这里如果你的<code>targetSdkVersion</code>&lt;24的话，则无需进行上述崩溃的适配。<br>但是更新一定是往更好的方向去的，还是建议各位看官及时更新，及时适配，保证<code>targetSdkVersion</code>为最新SDK。</p>\n<h2 id=\"裁剪\"><a href=\"#裁剪\" class=\"headerlink\" title=\"裁剪\"></a>裁剪</h2><p>裁剪功能是可选功能，如果想要对获取到的图片进行裁剪，我们可以继续使用裁剪Intent来对图片进行裁剪：<br><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"string\">\"com.android.camera.action.CROP\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//设置要裁剪的图片Uri</span></span><br><span class=\"line\">intent.setDataAndType(cropBean.dataUri, <span class=\"string\">\"image/*\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//配置一系列裁剪参数</span></span><br><span class=\"line\">intent.putExtra(<span class=\"string\">\"outputX\"</span>, cropBean.outputX);</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">\"outputY\"</span>, cropBean.outputY);</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">\"scale\"</span>, cropBean.<span class=\"built_in\">scale</span>);</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">\"aspectX\"</span>, cropBean.aspectX);</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">\"aspectY\"</span>, cropBean.aspectY);</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">\"outputFormat\"</span>, cropBean.outputFormat);</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">\"return-data\"</span>, cropBean.isReturnData);</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">\"output\"</span>, cropBean.saveUri);</span><br><span class=\"line\"><span class=\"comment\">//跳转</span></span><br><span class=\"line\">activity.startActivityForResult(intent, requestCode);</span><br></pre></td></tr></table></figure></p>\n<p>裁剪参数的含义可以参考<a href=\"https://github.com/showdy/Android_Note/blob/master/showdy_note/android/strategy/%E4%BD%BF%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%86%8C%E5%9B%BE%E7%89%87%E6%88%96%E6%8B%8D%E7%85%A7%E5%B9%B6%E8%A3%81%E5%89%AA%E4%B9%8BAndroid_N%E9%80%82%E9%85%8D.md\" target=\"_blank\" rel=\"noopener\">这篇文章</a>：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">附加选项</th>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:right\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">crop</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:right\">发送裁剪信号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">aspectX</td>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:right\">X方向上的比例</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">aspectY</td>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:right\">Y方向上的比例</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">outputX</td>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:right\">裁剪区的宽</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">outputY</td>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:right\">裁剪区的高</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">scale</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:right\">是否保留比例</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">return-data</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:right\">是否将数据保留在Bitmap中返回</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">data</td>\n<td style=\"text-align:center\">Parcelable</td>\n<td style=\"text-align:right\">相应的Bitmap数据</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">circleCrop</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:right\">圆形裁剪区域</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">output</td>\n<td style=\"text-align:center\">URI</td>\n<td style=\"text-align:right\">将URI指向相应的file://</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">outputFormat</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:right\">图片输出格式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">noFaceDetection</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:right\">是否取消人脸识别</td>\n</tr>\n</tbody>\n</table>\n<p>每个属性的解释都很清晰，这里我将裁剪参数封装为了一个Bean对象：<br><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> class CropBean &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//要裁剪的图片Uri</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Uri dataUri;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//裁剪宽度</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> outputX;</span><br><span class=\"line\">    <span class=\"comment\">//裁剪高度</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> outputY;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//X方向上的比例</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> aspectX;</span><br><span class=\"line\">    <span class=\"comment\">//Y方向上的比例</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> aspectY;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//是否保留比例</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> <span class=\"built_in\">scale</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//是否将数据保存在Bitmap中返回</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> isReturnData;</span><br><span class=\"line\">    <span class=\"comment\">//相应的Bitmap数据</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Parcelable returnData;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果不需要将图片在Bitmap中返回，需要传递保存图片的Uri</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Uri saveUri;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//圆形裁剪区域</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">String</span> circleCrop;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//图片输出格式，默认JPEG</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">String</span> outputFormat = Bitmap.CompressFormat.JPEG.toString();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//是否取消人脸识别</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> noFaceDetection;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据宽高计算裁剪比例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> caculateAspect() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">scale</span> = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (outputX == outputY) &#123;</span><br><span class=\"line\">            aspectX = <span class=\"number\">1</span>;</span><br><span class=\"line\">            aspectY = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">float</span> proportion = (<span class=\"built_in\">float</span>) outputX / (<span class=\"built_in\">float</span>) outputY;</span><br><span class=\"line\"></span><br><span class=\"line\">        aspectX = (<span class=\"built_in\">int</span>) (proportion * <span class=\"number\">100</span>);</span><br><span class=\"line\">        aspectY = <span class=\"number\">100</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>关于封装对象中<code>caculateAspect()</code>方法，因为<strong>aspectX</strong>与<strong>aspectY</strong>是用来设定裁剪框宽高比例的，所以我选择在指定完<strong>outputX</strong>与<strong>outputY</strong>（也就是裁剪图片的宽度和高度）之后，直接根据宽高来计算裁剪框的大小。<br><code>caculateAspect()</code>中就是具体的计算过程。<br>还有几个比较重要的参数需要提一下：</p>\n<ul>\n<li><strong>intent.setData(Uri uri)</strong>是必须指定的，它代表着要裁剪的图片的Uri。</li>\n<li><strong>return-data</strong>参数代表是否要返回数据，如果为true，则返回Bitmap对象，如果为false，则会将图片直接保存到另一个参数<strong>output</strong>中。也就是说，当<strong>return-data</strong>为true时，<strong>output</strong>是没有用的，直接在<strong>onActivityResult</strong>中取data当中的Bitmap即可。如果为false，则直接在onActivityResult中去之前指定到<strong>output</strong>中的地址取出图片即可。</li>\n<li>综上一点，强烈建议设置<strong>return-data</strong>为false并且设置<strong>output</strong>，<a href=\"http://blog.csdn.net/wingichoy/article/details/50679322\" target=\"_blank\" rel=\"noopener\">因为Intent传输是有大小限制的</a>。为防止超出大小的现象发生，通过Uri传输最为安全。</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到此为止，获取图片显示的功能已经完成了。<br><a href=\"https://github.com/YuanTiger/PhotoGet\" target=\"_blank\" rel=\"noopener\">整个项目已经上传至GitHub</a>，简单总结一下：</p>\n<ol>\n<li>通过相册获取图片的方式有很多，但是在onActivityResult中都是以Uri的方式传递的。</li>\n<li>裁剪功能不是必要的，如果没有裁剪需求可忽略。强烈建议不要将<strong>return-data</strong>设置为true，可能会超出Intent传输大小限制。</li>\n<li>当你的targetSdkVersion&gt;=23时，需要进行<a href=\"http://www.jianshu.com/p/9271efd71450\" target=\"_blank\" rel=\"noopener\">权限管理的升级</a>，当你的targetSdkVersion&gt;=24时，需要进行<a href=\"http://www.jianshu.com/p/3f9e3fc38eae\" target=\"_blank\" rel=\"noopener\">FileProvider的适配</a>。强烈建议进行适配，提升应用的安全性。</li>\n</ol>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p><a href=\"https://github.com/showdy/Android_Note/blob/master/showdy_note/android/strategy/%E4%BD%BF%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%86%8C%E5%9B%BE%E7%89%87%E6%88%96%E6%8B%8D%E7%85%A7%E5%B9%B6%E8%A3%81%E5%89%AA%E4%B9%8BAndroid_N%E9%80%82%E9%85%8D.md\" target=\"_blank\" rel=\"noopener\">使用系统裁剪</a><br><a href=\"http://blog.csdn.net/wingichoy/article/details/50679322\" target=\"_blank\" rel=\"noopener\">Intent传输大小实战</a><br><a href=\"http://www.jianshu.com/p/3f9e3fc38eae\" target=\"_blank\" rel=\"noopener\">相机7.0图片选择适配</a></p>\n"},{"title":"Android面试技能点","date":"2017-07-25T07:51:57.000Z","_content":"# 技能点 #\n### 主要技能 ###\n1. [面向对象思想](https://YuanTiger.github.io/2017/05/08/Java_understanding-OO/)\n2. [设计模式](https://YuanTiger.github.io/2017/05/31/Design-Catalog/)\n3. 算法基础\n4. Android适配\n5. Android架构\n6. Android动画\n7. [Android事件机制](https://YuanTiger.github.io/2017/05/03/Android_even_distribution/)\n8. [Android消息通讯机制](https://YuanTiger.github.io/2017/05/15/Android-Handler/)\n9. Android数据通传输\n10. Android线程管理\n11. Android内存管理\n12. Android网络管理\n13. Android底层机制以及Linux内核机制\n14. Android JNI编程\n15. Android安全机制\n16. Android单元测试、压力测试\n17. 通过Android源码定位问题\n18. Android流行开源组件、框架\n19. [Android权限管理](https://YuanTiger.github.io/2017/05/09/Android-Premission-Manger/)\n\n### 加分技能 ###\n1. 计算机专业+高学历\n2. 独立开发能力\n3. 知名App的开发经验\n4. Html+JavaScript\n5. C++\n6. 蓝牙开发\n7. 技术难点的攻关能力\n\n","source":"_posts/Android_Interview-Experience.md","raw":"---\ntitle: Android面试技能点\ndate: 2017-07-25 15:51:57\ntags:\n   - Android\n   - Java\n---\n# 技能点 #\n### 主要技能 ###\n1. [面向对象思想](https://YuanTiger.github.io/2017/05/08/Java_understanding-OO/)\n2. [设计模式](https://YuanTiger.github.io/2017/05/31/Design-Catalog/)\n3. 算法基础\n4. Android适配\n5. Android架构\n6. Android动画\n7. [Android事件机制](https://YuanTiger.github.io/2017/05/03/Android_even_distribution/)\n8. [Android消息通讯机制](https://YuanTiger.github.io/2017/05/15/Android-Handler/)\n9. Android数据通传输\n10. Android线程管理\n11. Android内存管理\n12. Android网络管理\n13. Android底层机制以及Linux内核机制\n14. Android JNI编程\n15. Android安全机制\n16. Android单元测试、压力测试\n17. 通过Android源码定位问题\n18. Android流行开源组件、框架\n19. [Android权限管理](https://YuanTiger.github.io/2017/05/09/Android-Premission-Manger/)\n\n### 加分技能 ###\n1. 计算机专业+高学历\n2. 独立开发能力\n3. 知名App的开发经验\n4. Html+JavaScript\n5. C++\n6. 蓝牙开发\n7. 技术难点的攻关能力\n\n","slug":"Android_Interview-Experience","published":1,"updated":"2018-08-24T09:36:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7sxdvc0005hnnffo54t7lr","content":"<h1 id=\"技能点\"><a href=\"#技能点\" class=\"headerlink\" title=\"技能点\"></a>技能点</h1><h3 id=\"主要技能\"><a href=\"#主要技能\" class=\"headerlink\" title=\"主要技能\"></a>主要技能</h3><ol>\n<li><a href=\"https://YuanTiger.github.io/2017/05/08/Java_understanding-OO/\" target=\"_blank\" rel=\"noopener\">面向对象思想</a></li>\n<li><a href=\"https://YuanTiger.github.io/2017/05/31/Design-Catalog/\" target=\"_blank\" rel=\"noopener\">设计模式</a></li>\n<li>算法基础</li>\n<li>Android适配</li>\n<li>Android架构</li>\n<li>Android动画</li>\n<li><a href=\"https://YuanTiger.github.io/2017/05/03/Android_even_distribution/\" target=\"_blank\" rel=\"noopener\">Android事件机制</a></li>\n<li><a href=\"https://YuanTiger.github.io/2017/05/15/Android-Handler/\" target=\"_blank\" rel=\"noopener\">Android消息通讯机制</a></li>\n<li>Android数据通传输</li>\n<li>Android线程管理</li>\n<li>Android内存管理</li>\n<li>Android网络管理</li>\n<li>Android底层机制以及Linux内核机制</li>\n<li>Android JNI编程</li>\n<li>Android安全机制</li>\n<li>Android单元测试、压力测试</li>\n<li>通过Android源码定位问题</li>\n<li>Android流行开源组件、框架</li>\n<li><a href=\"https://YuanTiger.github.io/2017/05/09/Android-Premission-Manger/\" target=\"_blank\" rel=\"noopener\">Android权限管理</a></li>\n</ol>\n<h3 id=\"加分技能\"><a href=\"#加分技能\" class=\"headerlink\" title=\"加分技能\"></a>加分技能</h3><ol>\n<li>计算机专业+高学历</li>\n<li>独立开发能力</li>\n<li>知名App的开发经验</li>\n<li>Html+JavaScript</li>\n<li>C++</li>\n<li>蓝牙开发</li>\n<li>技术难点的攻关能力</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"技能点\"><a href=\"#技能点\" class=\"headerlink\" title=\"技能点\"></a>技能点</h1><h3 id=\"主要技能\"><a href=\"#主要技能\" class=\"headerlink\" title=\"主要技能\"></a>主要技能</h3><ol>\n<li><a href=\"https://YuanTiger.github.io/2017/05/08/Java_understanding-OO/\" target=\"_blank\" rel=\"noopener\">面向对象思想</a></li>\n<li><a href=\"https://YuanTiger.github.io/2017/05/31/Design-Catalog/\" target=\"_blank\" rel=\"noopener\">设计模式</a></li>\n<li>算法基础</li>\n<li>Android适配</li>\n<li>Android架构</li>\n<li>Android动画</li>\n<li><a href=\"https://YuanTiger.github.io/2017/05/03/Android_even_distribution/\" target=\"_blank\" rel=\"noopener\">Android事件机制</a></li>\n<li><a href=\"https://YuanTiger.github.io/2017/05/15/Android-Handler/\" target=\"_blank\" rel=\"noopener\">Android消息通讯机制</a></li>\n<li>Android数据通传输</li>\n<li>Android线程管理</li>\n<li>Android内存管理</li>\n<li>Android网络管理</li>\n<li>Android底层机制以及Linux内核机制</li>\n<li>Android JNI编程</li>\n<li>Android安全机制</li>\n<li>Android单元测试、压力测试</li>\n<li>通过Android源码定位问题</li>\n<li>Android流行开源组件、框架</li>\n<li><a href=\"https://YuanTiger.github.io/2017/05/09/Android-Premission-Manger/\" target=\"_blank\" rel=\"noopener\">Android权限管理</a></li>\n</ol>\n<h3 id=\"加分技能\"><a href=\"#加分技能\" class=\"headerlink\" title=\"加分技能\"></a>加分技能</h3><ol>\n<li>计算机专业+高学历</li>\n<li>独立开发能力</li>\n<li>知名App的开发经验</li>\n<li>Html+JavaScript</li>\n<li>C++</li>\n<li>蓝牙开发</li>\n<li>技术难点的攻关能力</li>\n</ol>\n"},{"title":"Android权限管理简单描述","date":"2017-05-09T10:38:37.000Z","_content":"首先安利一个大家都知道的事情，Google推出了[Android开发文档中文版](https://developer.android.google.cn/index.html)。\n还有[谷歌开发者中文博客](http://developers.googleblog.cn/)。\n好的，进入正题：\n说到权限变化大家马上就想到Android API23（6.0）之后权限系统大改。**当`build.gradle`中`targetSdkVersion`设置小于23时，会继续引用旧版本权限管理机制，当`targetSdkVersion`大于等于23时，则会使用新的权限管理。**\n\n## targetSdkVersion < 23 ##\n当`targetSdkVersion`小于23时，你的项目会继续使用旧版本的权限机制：\n1. 用户在安装时获取到所有权限，在使用权限时无需进行预判断。\n2. 虽然使用旧版的权限机制，但是在```设置-App详情```中也可以找到权限管理将其关闭。如果用户手动来到设置将权限关闭，我们的项目在用到该权限时会发生Crash，所以如果使用低版本权限管理，请将需要用到权限的地方`try-catch`起来。\n3. 那些低版本权限提示弹窗都是手机厂商自定义的。他们拥有系统权限，在检测到你的App使用权限时会提示用户权限授权，如果用户拒绝则替用户到设置中心关闭权限。\n4. 综上，不想使用最新的权限管理，则将`targetSdkVersion`设置为小于23即可，并且将用到权限的代码`try-catch`起来。这里需要知道不是所有的权限都可以关闭的，只有涉及用户隐私的权限才会在设置中展示出来，方便用户进行手动关闭。\n\n## targetSdkVersion >= 23 ##\n\n1. 将权限分为了`普通权限`和`隐私权限`，普通权限在清单文件中声明则直接获取。隐私权限也需要在清单文件中声明，但是在安装完成后，所有的隐私权限都为拒绝状态，需要在用到隐私权限时判断权限是否开启，否则项目直接发生Crash。\n2. 第一次使用隐私权限时直接弹出系统的权限授权弹窗，用户授权则永久授权，拒绝则无法使用此权限。第二次或者之后用到此权限我们需要做一个自己的弹窗来描述该权限的作用，然后关闭我们自己的弹窗后会弹出系统的权限授权弹窗，此时弹窗上会有不再提醒的提示文字，如果用户勾选了不再提醒则再也不会提醒并且权限关闭。\n3. 检测权限关闭并且勾选了不再提醒我们可以提示用户到设置中心中手动打开权限。用户如果打开则永久授权（当然还是可以再关闭的）。\n4. 权限组的概念也需要知道，比如获取写文件权限时，用户授权则会同时获取读文件的权限，因为他们属于同一个权限组。\n5. 综上，新版本权限的适配也很简单，主要工作是在所有用到隐私权限的地方添加权限是否授权的判断、后续的一些判断细节以及回调。Google写的权限工具[easypermissions](https://github.com/googlesamples/easypermissions)是我在权限改版时用的，还是非常好用的。demo可参考[官方demo](https://github.com/googlesamples/easypermissions)。\n\n\n## 小结 ##\n推荐各位看官最好都及时地进行权限管理的高版本适配，毕竟用户对权限很敏感，这是一个趋势。","source":"_posts/Android-Premission-Manger.md","raw":"---\ntitle: Android权限管理简单描述\ndate: 2017-05-09 18:38:37\ntags:\n   - Android\n---\n首先安利一个大家都知道的事情，Google推出了[Android开发文档中文版](https://developer.android.google.cn/index.html)。\n还有[谷歌开发者中文博客](http://developers.googleblog.cn/)。\n好的，进入正题：\n说到权限变化大家马上就想到Android API23（6.0）之后权限系统大改。**当`build.gradle`中`targetSdkVersion`设置小于23时，会继续引用旧版本权限管理机制，当`targetSdkVersion`大于等于23时，则会使用新的权限管理。**\n\n## targetSdkVersion < 23 ##\n当`targetSdkVersion`小于23时，你的项目会继续使用旧版本的权限机制：\n1. 用户在安装时获取到所有权限，在使用权限时无需进行预判断。\n2. 虽然使用旧版的权限机制，但是在```设置-App详情```中也可以找到权限管理将其关闭。如果用户手动来到设置将权限关闭，我们的项目在用到该权限时会发生Crash，所以如果使用低版本权限管理，请将需要用到权限的地方`try-catch`起来。\n3. 那些低版本权限提示弹窗都是手机厂商自定义的。他们拥有系统权限，在检测到你的App使用权限时会提示用户权限授权，如果用户拒绝则替用户到设置中心关闭权限。\n4. 综上，不想使用最新的权限管理，则将`targetSdkVersion`设置为小于23即可，并且将用到权限的代码`try-catch`起来。这里需要知道不是所有的权限都可以关闭的，只有涉及用户隐私的权限才会在设置中展示出来，方便用户进行手动关闭。\n\n## targetSdkVersion >= 23 ##\n\n1. 将权限分为了`普通权限`和`隐私权限`，普通权限在清单文件中声明则直接获取。隐私权限也需要在清单文件中声明，但是在安装完成后，所有的隐私权限都为拒绝状态，需要在用到隐私权限时判断权限是否开启，否则项目直接发生Crash。\n2. 第一次使用隐私权限时直接弹出系统的权限授权弹窗，用户授权则永久授权，拒绝则无法使用此权限。第二次或者之后用到此权限我们需要做一个自己的弹窗来描述该权限的作用，然后关闭我们自己的弹窗后会弹出系统的权限授权弹窗，此时弹窗上会有不再提醒的提示文字，如果用户勾选了不再提醒则再也不会提醒并且权限关闭。\n3. 检测权限关闭并且勾选了不再提醒我们可以提示用户到设置中心中手动打开权限。用户如果打开则永久授权（当然还是可以再关闭的）。\n4. 权限组的概念也需要知道，比如获取写文件权限时，用户授权则会同时获取读文件的权限，因为他们属于同一个权限组。\n5. 综上，新版本权限的适配也很简单，主要工作是在所有用到隐私权限的地方添加权限是否授权的判断、后续的一些判断细节以及回调。Google写的权限工具[easypermissions](https://github.com/googlesamples/easypermissions)是我在权限改版时用的，还是非常好用的。demo可参考[官方demo](https://github.com/googlesamples/easypermissions)。\n\n\n## 小结 ##\n推荐各位看官最好都及时地进行权限管理的高版本适配，毕竟用户对权限很敏感，这是一个趋势。","slug":"Android-Premission-Manger","published":1,"updated":"2018-08-24T09:36:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7sxdvq0006hnnfhmy18k07","content":"<p>首先安利一个大家都知道的事情，Google推出了<a href=\"https://developer.android.google.cn/index.html\" target=\"_blank\" rel=\"noopener\">Android开发文档中文版</a>。<br>还有<a href=\"http://developers.googleblog.cn/\" target=\"_blank\" rel=\"noopener\">谷歌开发者中文博客</a>。<br>好的，进入正题：<br>说到权限变化大家马上就想到Android API23（6.0）之后权限系统大改。<strong>当<code>build.gradle</code>中<code>targetSdkVersion</code>设置小于23时，会继续引用旧版本权限管理机制，当<code>targetSdkVersion</code>大于等于23时，则会使用新的权限管理。</strong></p>\n<h2 id=\"targetSdkVersion-lt-23\"><a href=\"#targetSdkVersion-lt-23\" class=\"headerlink\" title=\"targetSdkVersion &lt; 23\"></a>targetSdkVersion &lt; 23</h2><p>当<code>targetSdkVersion</code>小于23时，你的项目会继续使用旧版本的权限机制：</p>\n<ol>\n<li>用户在安装时获取到所有权限，在使用权限时无需进行预判断。</li>\n<li>虽然使用旧版的权限机制，但是在<code>设置-App详情</code>中也可以找到权限管理将其关闭。如果用户手动来到设置将权限关闭，我们的项目在用到该权限时会发生Crash，所以如果使用低版本权限管理，请将需要用到权限的地方<code>try-catch</code>起来。</li>\n<li>那些低版本权限提示弹窗都是手机厂商自定义的。他们拥有系统权限，在检测到你的App使用权限时会提示用户权限授权，如果用户拒绝则替用户到设置中心关闭权限。</li>\n<li>综上，不想使用最新的权限管理，则将<code>targetSdkVersion</code>设置为小于23即可，并且将用到权限的代码<code>try-catch</code>起来。这里需要知道不是所有的权限都可以关闭的，只有涉及用户隐私的权限才会在设置中展示出来，方便用户进行手动关闭。</li>\n</ol>\n<h2 id=\"targetSdkVersion-gt-23\"><a href=\"#targetSdkVersion-gt-23\" class=\"headerlink\" title=\"targetSdkVersion &gt;= 23\"></a>targetSdkVersion &gt;= 23</h2><ol>\n<li>将权限分为了<code>普通权限</code>和<code>隐私权限</code>，普通权限在清单文件中声明则直接获取。隐私权限也需要在清单文件中声明，但是在安装完成后，所有的隐私权限都为拒绝状态，需要在用到隐私权限时判断权限是否开启，否则项目直接发生Crash。</li>\n<li>第一次使用隐私权限时直接弹出系统的权限授权弹窗，用户授权则永久授权，拒绝则无法使用此权限。第二次或者之后用到此权限我们需要做一个自己的弹窗来描述该权限的作用，然后关闭我们自己的弹窗后会弹出系统的权限授权弹窗，此时弹窗上会有不再提醒的提示文字，如果用户勾选了不再提醒则再也不会提醒并且权限关闭。</li>\n<li>检测权限关闭并且勾选了不再提醒我们可以提示用户到设置中心中手动打开权限。用户如果打开则永久授权（当然还是可以再关闭的）。</li>\n<li>权限组的概念也需要知道，比如获取写文件权限时，用户授权则会同时获取读文件的权限，因为他们属于同一个权限组。</li>\n<li>综上，新版本权限的适配也很简单，主要工作是在所有用到隐私权限的地方添加权限是否授权的判断、后续的一些判断细节以及回调。Google写的权限工具<a href=\"https://github.com/googlesamples/easypermissions\" target=\"_blank\" rel=\"noopener\">easypermissions</a>是我在权限改版时用的，还是非常好用的。demo可参考<a href=\"https://github.com/googlesamples/easypermissions\" target=\"_blank\" rel=\"noopener\">官方demo</a>。</li>\n</ol>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>推荐各位看官最好都及时地进行权限管理的高版本适配，毕竟用户对权限很敏感，这是一个趋势。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先安利一个大家都知道的事情，Google推出了<a href=\"https://developer.android.google.cn/index.html\" target=\"_blank\" rel=\"noopener\">Android开发文档中文版</a>。<br>还有<a href=\"http://developers.googleblog.cn/\" target=\"_blank\" rel=\"noopener\">谷歌开发者中文博客</a>。<br>好的，进入正题：<br>说到权限变化大家马上就想到Android API23（6.0）之后权限系统大改。<strong>当<code>build.gradle</code>中<code>targetSdkVersion</code>设置小于23时，会继续引用旧版本权限管理机制，当<code>targetSdkVersion</code>大于等于23时，则会使用新的权限管理。</strong></p>\n<h2 id=\"targetSdkVersion-lt-23\"><a href=\"#targetSdkVersion-lt-23\" class=\"headerlink\" title=\"targetSdkVersion &lt; 23\"></a>targetSdkVersion &lt; 23</h2><p>当<code>targetSdkVersion</code>小于23时，你的项目会继续使用旧版本的权限机制：</p>\n<ol>\n<li>用户在安装时获取到所有权限，在使用权限时无需进行预判断。</li>\n<li>虽然使用旧版的权限机制，但是在<code>设置-App详情</code>中也可以找到权限管理将其关闭。如果用户手动来到设置将权限关闭，我们的项目在用到该权限时会发生Crash，所以如果使用低版本权限管理，请将需要用到权限的地方<code>try-catch</code>起来。</li>\n<li>那些低版本权限提示弹窗都是手机厂商自定义的。他们拥有系统权限，在检测到你的App使用权限时会提示用户权限授权，如果用户拒绝则替用户到设置中心关闭权限。</li>\n<li>综上，不想使用最新的权限管理，则将<code>targetSdkVersion</code>设置为小于23即可，并且将用到权限的代码<code>try-catch</code>起来。这里需要知道不是所有的权限都可以关闭的，只有涉及用户隐私的权限才会在设置中展示出来，方便用户进行手动关闭。</li>\n</ol>\n<h2 id=\"targetSdkVersion-gt-23\"><a href=\"#targetSdkVersion-gt-23\" class=\"headerlink\" title=\"targetSdkVersion &gt;= 23\"></a>targetSdkVersion &gt;= 23</h2><ol>\n<li>将权限分为了<code>普通权限</code>和<code>隐私权限</code>，普通权限在清单文件中声明则直接获取。隐私权限也需要在清单文件中声明，但是在安装完成后，所有的隐私权限都为拒绝状态，需要在用到隐私权限时判断权限是否开启，否则项目直接发生Crash。</li>\n<li>第一次使用隐私权限时直接弹出系统的权限授权弹窗，用户授权则永久授权，拒绝则无法使用此权限。第二次或者之后用到此权限我们需要做一个自己的弹窗来描述该权限的作用，然后关闭我们自己的弹窗后会弹出系统的权限授权弹窗，此时弹窗上会有不再提醒的提示文字，如果用户勾选了不再提醒则再也不会提醒并且权限关闭。</li>\n<li>检测权限关闭并且勾选了不再提醒我们可以提示用户到设置中心中手动打开权限。用户如果打开则永久授权（当然还是可以再关闭的）。</li>\n<li>权限组的概念也需要知道，比如获取写文件权限时，用户授权则会同时获取读文件的权限，因为他们属于同一个权限组。</li>\n<li>综上，新版本权限的适配也很简单，主要工作是在所有用到隐私权限的地方添加权限是否授权的判断、后续的一些判断细节以及回调。Google写的权限工具<a href=\"https://github.com/googlesamples/easypermissions\" target=\"_blank\" rel=\"noopener\">easypermissions</a>是我在权限改版时用的，还是非常好用的。demo可参考<a href=\"https://github.com/googlesamples/easypermissions\" target=\"_blank\" rel=\"noopener\">官方demo</a>。</li>\n</ol>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>推荐各位看官最好都及时地进行权限管理的高版本适配，毕竟用户对权限很敏感，这是一个趋势。</p>\n"},{"title":"Android事件分发机制","date":"2017-05-03T08:43:57.000Z","_content":"## 一.说些废话\nAndroid事件分发真的非常非常重要，几乎所有的滑动冲突以及点击冲突都需要深刻了解该机制才可以解决问题。所以我希望大家可以仔细阅读该篇文章并且自己手动来实验，一定要自己打断点看看源码，不管干什么都要下功夫不是吗？    \n\n虽然重要，但其实Android事件分发机制也很简单，只要理解了Android事件分发的三个方法，以及传递的流程，你就可以轻松掌握Android事件分发机制。    \n\n在开始之前，再说一下事件流：    \n\n事件流指的是一次完整的触摸事件，一次完整的触摸事件应该包括是:     \n\n`down（一次按下）-->move move move（多次滑动）.....-->up（一次抬起）`      \n\n所以事件流总是以down事件为开端，以up事件为终止。        \n\n那么接下来就正式开始吧！        \n\n\n\n## 二. 重要方法\n首先看这三个方法的名称以及拥有情况：         \n\n<font color='red'>注意：类型不同，方法名相同，源码并不一致</font>     \n       \n\n| 方法名                    | Activity   |  ViewGroup |  View     |\n| ----------------------    | :----:     | :----:     | :----:   |\n|  dispatchTouEvent         | true       |   true     |  true    |\n| onInterceptTouchEvent     |   false    |   true     |  false   |\n| onTouchEvent              |   true     |   true     |  true    |\n       \n\ntrue代表拥有，false代表没有此方法     \n\n如果想要了解Android的事件分发机制，就必须先了解这三个方法      \n\n\n- `dispatchTouEvent()`      \n\n\t事件的分发方法，用来分发事件，在Activity、ViewGroup、View中都有该方法。\n- `onInterceptTouchEvent()`       \n\n\t事件的拦截方法，只有ViewGroup有该方法。\n- `onTouchEvent()`      \n\n\t事件的响应,当该事件属于我时，会执行该方法，返回true代表消费事件，返回false代表不消费事件并将该事件向外传递。\n\n三个方法的含义知道了，这很easy，没错，就三个方法而已。接下来让我们深入分析：       \n\n![](http://7xvzby.com1.z0.glb.clouddn.com/back_I_begin_zb.jpg)\n## 三. 具体案例\n首先，我们来想象一个简单的布局             \n\n![布局](http://7xvzby.com1.z0.glb.clouddn.com/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91_0.png)              \n        \n\n这个布局很简单,FrameLayout1的中间放了一个FrameLayout2，FrameLayout2的中间放了一个Button。       \n\n我在各个布局当中重写了所有事件响应的方法，并且没有修改任何返回值，接下来我要点击Button了！      \n\n我点！      \n\n![我点](http://7xvzby.com1.z0.glb.clouddn.com/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91_1.png)     \n\n首先接收到事件的是Activity,接下来事件传递到F1,F2,最后传递到Button的onTouchEvent被消费，很好理解，因为**事件由外向里传递**        \n \n接下来我们就着这个简单的按下事件，来分析一源码         \n\n\n### 1、Activity\n#### (1) `dispatchTouchEvent()`\n现在以debug的模式来看源码。      \n\n我的源码是Android－23。        \n\n首先接收到事件的是就是acitivity，所以我们把断点就放在Activity的`dispatchTouchEvent()`方法中       \n\n![](http://7xvzby.com1.z0.glb.clouddn.com/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91_2.png)      \n\n然后debug模式运行项目，点击下一步进入Activity的`dispatchTouchEvent()`的源码中：      \n\n![](http://7xvzby.com1.z0.glb.clouddn.com/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91_3.png)      \n\n上面的注释大概说的是：你可以重写此方法在所有窗体接收到事件之前将其拦截，如果不需要拦截，则保持原样。       \n\n简单来说呢，就是：**我可以重写该方法修改返回值使整个Activity都无法响应事件。**       \n\n如果我在Activity中重写该方法并修改了它的返回值，不管将该方法的返回值改为true或者false，该事件都消失，不会再向下传递（可怕）。        \n\n**所以不要修改Activity的`dispatchTouchEvent()`的默认返回值。**         \n\n接下来我们来分析上面的代码，首先是判断事件是否是down事件，如果是的话执行了`onUserInteraction()`。       \n\n这个方法是个空实现，我们可以在Activity中重写该方法。这里你要想到的是，因为down事件是一个事件流的开端，并且这个方法放在了分发之前，在最上端，所以我们可以在`onUserInteraction()`中做一些事件响应开始的操作。          \n\n接下来执行了Window的`superDispatchTouchEvent()`,点进去你会发现Window中的该方法是一个空实现，但是根据断点进去可以直接进到它的实现类：PhoneWindow（这也是断点的一个好处不是吗）。那么我们来看看PhoneWindow的：  \n     \n`superDispatchTouchEvent()`：\n```\n@Override\npublic boolean superDispatchTouchEvent(MotionEvent event) {\n    return mDecor.superDispatchTouchEvent(event);\n}\n```\n代码就一行，调用了Decor类的`superDispatchTouchEvent()`       \n\n但是!But!But,oh no!What's Decor?          \n\n![](http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/%E6%83%A8%E4%B8%8D%E5%BF%8D%E7%9D%B9.png)       \n\n[这里是一篇讲解Decor类的文章](http://www.jianshu.com/p/687010ccad66)，我也简单说一下：       \n\n为什么Activity可以利用`setContentView()`来设置布局？谁是容器？         \n\n没错，就是Decor。我们查看Decor会发现，它是PhoneWindow的内部类，继承自FrameLayout。         \n\nFrameLayout？？难道我们`setContentView()`最终是调用了`Decor.addView()`吗？？      \n\n这里我可以告诉你：虽然不是，但是原理就是这样的！        \n\n看下面这张图片就会明白顶层布局的原理了：       \n\n![](http://upload-images.jianshu.io/upload_images/1734948-cd6dd09d50cb0bb5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)      \n\ntitleBar就是标题栏，main.xml就是我们设置的布局文件，而最外层是Decor。      \n\n好了，就到这里。对Android窗体感兴趣的小伙伴，快去看看[这篇讲解Decor类的文章](http://www.jianshu.com/p/687010ccad66)。        \n\n我们接着查看源码，你会发现`mDecor.superDispatchTouchEvent(event)`最终调用的是ViewGroup的`dispatchTouchEvent()`。\n\n```\n/**\n    Decor类的superDispatchTouchEvent\n    注意Decor类继承自FrameLayout\n    所以super指的即是FrameLayout\n    但是FrameLayout没有重写该方法，查看源码会直接跳转至ViewGroup类\n**/\npublic boolean superDispatchTouchEvent(MotionEvent event) {\n    return super.dispatchTouchEvent(event);\n}\n```\n到这里，Activity已经成功将事件传递给ViewGroup，接下来将由ViewGroup来将事件一层一层传递至内部。\n\n#### (2) `onTouchEvent()`\n各位看官，请拉上去回头看Activity的`dispatchTouchEvent()`的最后一行：\n`return onTouchEvent(ev)`\n是这样的不？\n也就是在`getWindow.superDispatchTouchEvent()`返回false时，将执行最后一行调用Activity的`onTouchEvent()`，所以Activity的`onTouchEvent()`的调用时机，是和接下来ViewGroup的事件分发有着密切关系的。\n简单来说：只有当Activity下的所有View（ViewGroup）的`onTouchEvent()`都不消费事件时，才会调用Activity的`onTouchEvent()`。\n### 2、ViewGroup\n我们很顺利地来到了ViewGroup的`dispatchTouchEvent()`方法当中。\n但是，在分析源码之前，我想让各位看官先明白，现在调用ViewGroup的`dispatchTouchEvent()`方法的变量，指的是谁？是我们的FrameLayou_ONE吗？\n看官:\"你他喵的484傻，Activity源码中明明写着`mDecor.superDispatchTouchEvent(event)`，很明显是Activity调用了Decor的`dispatchTouchEvent()`，这个ViewGroup肯定是Decor啊！能不能讲重点，这么多废话!“        \n\n我：“.....”    \n      \n      \n![](http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/%E9%80%80%E5%87%BA%E8%A3%85%E9%80%BC%E7%95%8C.jpg)         \n行吧，提这个我是想再给各位看官强调一下，我们的layout文件仅仅是add到了系统顶层布局中，所以接收到事件的肯定是系统的顶层布局，而不是我们的layout中的布局。这个如何证实呢？             \n各位看官可以在ViewGroup的`dispatchTouchEvent()`打个断点，然后看官就会发现，这个方法执行了很多次，每次都可以查看一下变量this，看看到底是什么？比如第一次的this：\n```\ncom.android.internal.policy.PhoneWindow$DecorView{b9a23df V.E...... R....... 0,0-1080,1920}\n```\n好了，接下来我们就看看ViewGroup的事件分发机制吧!\n#### (1)`dispatchTouchEvent()`\nViewGroup的`dispatchTouchEvent()`内容很多，有210行左右，有兴趣的同学可以打开ViewGroup去查看。我这里就按着步骤一部分一部分的贴出来。有些部分我也看不大懂，不过有很多的注释，阅读起来还是很方便的：\n首先执行的是这个判断，判断是否分发事件，如果该方法返回false，则此次事件则会被丢弃，因为`dispatchTouchEvent()`的所有代码都包含在这个判断里！\n```\nif (onFilterTouchEventForSecurity(ev)){}\n```\n下面是`onFilterTouchEventForSecurity(ev)`这个判断的源码：\n根据方法名和注释来理解，这是一个触摸事件安全过滤器。基本上这个方法都会返回true，不会发生系统丢弃事件的情况。\n```\n    /**\n     * Filter the touch event to apply security policies.\n     *\n     * @param event The motion event to be filtered.\n     * @return True if the event should be dispatched, false if the event should be dropped.\n     *\n     * @see #getFilterTouchesWhenObscured\n     */\npublic boolean onFilterTouchEventForSecurity(MotionEvent event) {\n    //noinspection RedundantIfStatement\n    if ((mViewFlags & FILTER_TOUCHES_WHEN_OBSCURED) != 0&& (event.getFlags() & MotionEvent.FLAG_WINDOW_IS_OBSCURED) != 0) {\n        // Window is obscured, drop this touch.\n            return false;\n    }\n    return true;\n}\n```\n第二件事情：如果是down事件（因为down事件是开端），清除上次事件流的处理结果和状态。\n```\n// Handle an initial down.\nif (actionMasked == MotionEvent.ACTION_DOWN) {\n    // Throw away all previous state when starting a new touch gesture.\n    // The framework may have dropped the up or cancel event for the previous gesture\n    // due to an app switch, ANR, or some other state change.\n    cancelAndClearTouchTargets(ev);\n    resetTouchState();\n}\n```\n第三件事情：检查事件拦截是否拦截。\n```\n// Check for interception.\nfinal boolean intercepted;\nif (actionMasked == MotionEvent.ACTION_DOWN|| mFirstTouchTarget != null) {\n    final boolean disallowIntercept = (mGroupFlags &FLAG_DISALLOW_INTERCEPT) != 0;\n    if (!disallowIntercept) {\n          intercepted = onInterceptTouchEvent(ev);\n          ev.setAction(action); // restore action in case it was changed\n    } else {\n    intercepted = false;\n    }\n} else {\n    // There are no touch targets and this action is not an initial down\n    // so this view group continues to intercept touches.\n    intercepted = true;\n}\n```\n第四件事情：检查事件取消。\n```\n// Check for cancelation.\nfinal boolean canceled = resetCancelNextUpFlag(this)|| actionMasked == MotionEvent.ACTION_CANCEL;\n```\n\n第五件事情：如果没有被拦截，也没有被取消，就将此次事件分发给自己的下一级：子ViewGroup或者子View。\n这里的分发逻辑相当复杂，有兴趣的看官可以去自行阅读源码，或者参考[这篇文章](http://wangkuiwu.github.io/2015/01/04/TouchEvent-ViewGroup/)。\n```\nif (!canceled && !intercepted) {}\n```\n在最后，又进行一次检查取消标记，做了相应的处理:\n```\n// Update list of touch targets for pointer up or cancel, if needed.\nif (canceled|| actionMasked == MotionEvent.ACTION_UP|| actionMasked == MotionEvent.ACTION_HOVER_MOVE) {\n    resetTouchState();\n} \nelse if (split && actionMasked == MotionEvent.ACTION_POINTER_UP) {\n    final int actionIndex = ev.getActionIndex();\n    final int idBitsToRemove = 1 << ev.getPointerId(actionIndex);\n    removePointersFromTouchTargets(idBitsToRemove);\n}\n```\n。\n\n#### (2) `onInterceptTouchEvent()`\n事件流的每个事件都是由外层向里层依次传递的，有时候我们希望虽然点击的是内部button，但是做出相应的是button的容器，而不是button，也就是说在事件传递到button之前，将事件拦截并且消费，这也就是事件拦截的作用。\n事件拦截的方法源码很简单很简单：\n```\npublic boolean onInterceptTouchEvent(MotionEvent ev) {\n   return false;\n}\n```\n默认不拦截事件，如果拦截事件将返回值改为true，事件将被拦截并交给拦截事件的ViewGroup的`onTouchEvent()`处理。\n这个方法是ViewGroup独有的，难道Activity和View就无法拦截事件了吗？\n首先，Activity的`dispatchTouchEvent()`的返回值不可轻易更改，更改之后整个Activity都无法响应事件，所以如果我们需要Activity做拦截操作，可以修改Activity的`dispatchTouchEvent()`的逻辑，使之满足某些条件时修改返回值，否则不做修改。这样就可以使Activity进行事件的拦截。\n而至于View就更简单了，View本身就是最小的控件，事件传递到View是已经无法向下传递，所以无需拦截。\n#### (3) `onTouchEvent()`\nViewGroup类中没有重写`onTouchEvent()`，由于ViewGroup继承了View，所以View和ViewGroup的`onTouchEvent()`完全一致。\n这里我们再debug一下我们的demo：\n将断点打到View的`onTouchEvent()`的第一行，然后点击button，会发现断点执行，而this指代的是我们的Button，而不是上层的ViewGroup，也就是说上层中根本没有执行`onTouchEvent()`，第一次执行`onTouchEvent()`时，事件已经分发到了View。\n所以在这里，我们需要理解到这样一个地步：       \n\n**事件从Activity的`dispatchTouchEvent()`开始，首先分发到ViewGroup（DecorView、我们自己的Layout布局文件等）的`dispatchTouchEvent()`，并且在每次分发的时候会调用`onInterceptTouchEvent()`判断事件是否被拦截，如果事件被拦截则会执行将事件拦截的ViewGroup的`onTouchEvent()`方法并将接下来的整个事件流，都交给自己来处理，不会重复执行`onInterceptTouchEvent()`，如果没有拦截事件，最终将事件成功传递给View，View将调用onTouchEvent()将事件消费。**    \n    \n\n上面这段话希望每位耐心看到这里的读者都能理解，在这里还需要解释一下的是ViewGroup拦截事件交给`onTouchEvent()`之后，如果`onTouchEvenet()`返回了false（ViewGroup的`onTouchEvent()`默认返回false），则代表不消费此事件，则此次事件将逐层向上传递，调用每一层的`onTouchEvnet()`，如果中途所有的`onTouchEvent()`都返回false，那么事件将最终传递到Activity的`onTouchEvent()`中，到这里事件完成整个传递过程（向里传递，里不要，再传出来），不管Activity的`onTouchEvent()`返回什么结果，事件都将消失。\n### 3、View\n#### (1)`dispatchTouchEvent()`\n```\npublic boolean dispatchTouchEvent(MotionEvent event) {\n       boolean result = false;\n        if (mInputEventConsistencyVerifier != null) {\n            mInputEventConsistencyVerifier.onTouchEvent(event, 0);\n        }\n\n        final int actionMasked = event.getActionMasked();\n        if (actionMasked == MotionEvent.ACTION_DOWN) {\n            // Defensive cleanup for new gesture\n            stopNestedScroll();\n        }\n\n        if (onFilterTouchEventForSecurity(event)) {\n            //noinspection SimplifiableIfStatement\n            ListenerInfo li = mListenerInfo;\n            if (li != null && li.mOnTouchListener != null\n                    && (mViewFlags & ENABLED_MASK) == ENABLED\n                    && li.mOnTouchListener.onTouch(this, event)) {\n                result = true;\n            }\n\n            if (!result && onTouchEvent(event)) {\n                result = true;\n            }\n        }\n\n        if (!result && mInputEventConsistencyVerifier != null) {\n            mInputEventConsistencyVerifier.onUnhandledEvent(event, 0);\n        }\n\n        // Clean up after nested scrolls if this is the end of a gesture;\n        // also cancel it if we tried an ACTION_DOWN but we didn't want the rest\n        // of the gesture.\n        if (actionMasked == MotionEvent.ACTION_UP ||\n                actionMasked == MotionEvent.ACTION_CANCEL ||\n                (actionMasked == MotionEvent.ACTION_DOWN && !result)) {\n            stopNestedScroll();\n        }\n\n        return result;\n}\n```\n以上则是View的部分源码，我们只需要理解的是：在满足了相应条件之后，View的`dispatchTouchEvent()`主动调用了自己的`onTouchEvent()`，而View的`onTouchEvenet()`默认返回true消费事件。\n#### (2)`onTouchEvent()`\n`onTouchEvent`是用来消费事件的，在Activity、ViewGroup和View三者当中，只有View的`onTouchEvent()`默认返回true，代表消费事件。虽然ViewGroup和View的`onTouchEvent()`完全相同，但是其中存在某些逻辑判断，致使ViewGroup的返回值为false。\n推荐做法还是将事件处理的逻辑放到`onTouchEvent()`当中，而分发和拦截只发挥自己应有的作用即可。\n这里我就不贴View(ViewGroup)的`onTouchEvent()`的源码了，想看的同学可自行打开View搜索`onToucEvent()`。\n## 四.总结\n到这里，三者的各个方法的分析已经结束了，我想最后再简单总结一下：               \n\n1、Activity的`dispatchTouchEvent()`不可修改返回值，否则将导致整个Activity都无法接收事件，不管修改后返回true或是false。    \n\n2、在Activity中我们可以重写`onUserInteraction()`方法，来在整个事件流响应之前做自己想做的事情。    \n\n3、一个事件的传递过程默认总是从Activity的`dispatchTouchEvent()`开始，到View的`onTouchEvent()`结束，注意，这里是默认。     \n\n4、ViewGroup可以拦截事件交给自己的`onTouchEvent()`处理，如果自己的`onTouchEvent()`返回false，则事件不会消失，会继续向外层传递，如果一直没有被消费，那么事件传递到Activity的`onTouchEvent()`才会消失。      \n\n5、ViewGroup的`onInterceptTouchEvent()`不会在每次事件都调用，整个事件流只会在down事件或是第一次接触到事件时调用，所以不要在该方法中做事件逻辑处理。       \n\n6、三者的`onTouchEvent()`只有View的`onTouchEvent()`默认消费事件。       \n\n\n------------\n其实还有很多更深入的东西，这篇文章只是浅显地讲解了一下Android的事件分发机制，希望对各位看官有些帮助！\n\n>有任何问题或疑问都可以联系我：mengyuanzz@126.com\n\n","source":"_posts/Android_even_distribution.md","raw":"---\ntitle: Android事件分发机制\ndate: 2017-05-03 16:43:57\ntags:\n   - Android\n---\n## 一.说些废话\nAndroid事件分发真的非常非常重要，几乎所有的滑动冲突以及点击冲突都需要深刻了解该机制才可以解决问题。所以我希望大家可以仔细阅读该篇文章并且自己手动来实验，一定要自己打断点看看源码，不管干什么都要下功夫不是吗？    \n\n虽然重要，但其实Android事件分发机制也很简单，只要理解了Android事件分发的三个方法，以及传递的流程，你就可以轻松掌握Android事件分发机制。    \n\n在开始之前，再说一下事件流：    \n\n事件流指的是一次完整的触摸事件，一次完整的触摸事件应该包括是:     \n\n`down（一次按下）-->move move move（多次滑动）.....-->up（一次抬起）`      \n\n所以事件流总是以down事件为开端，以up事件为终止。        \n\n那么接下来就正式开始吧！        \n\n\n\n## 二. 重要方法\n首先看这三个方法的名称以及拥有情况：         \n\n<font color='red'>注意：类型不同，方法名相同，源码并不一致</font>     \n       \n\n| 方法名                    | Activity   |  ViewGroup |  View     |\n| ----------------------    | :----:     | :----:     | :----:   |\n|  dispatchTouEvent         | true       |   true     |  true    |\n| onInterceptTouchEvent     |   false    |   true     |  false   |\n| onTouchEvent              |   true     |   true     |  true    |\n       \n\ntrue代表拥有，false代表没有此方法     \n\n如果想要了解Android的事件分发机制，就必须先了解这三个方法      \n\n\n- `dispatchTouEvent()`      \n\n\t事件的分发方法，用来分发事件，在Activity、ViewGroup、View中都有该方法。\n- `onInterceptTouchEvent()`       \n\n\t事件的拦截方法，只有ViewGroup有该方法。\n- `onTouchEvent()`      \n\n\t事件的响应,当该事件属于我时，会执行该方法，返回true代表消费事件，返回false代表不消费事件并将该事件向外传递。\n\n三个方法的含义知道了，这很easy，没错，就三个方法而已。接下来让我们深入分析：       \n\n![](http://7xvzby.com1.z0.glb.clouddn.com/back_I_begin_zb.jpg)\n## 三. 具体案例\n首先，我们来想象一个简单的布局             \n\n![布局](http://7xvzby.com1.z0.glb.clouddn.com/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91_0.png)              \n        \n\n这个布局很简单,FrameLayout1的中间放了一个FrameLayout2，FrameLayout2的中间放了一个Button。       \n\n我在各个布局当中重写了所有事件响应的方法，并且没有修改任何返回值，接下来我要点击Button了！      \n\n我点！      \n\n![我点](http://7xvzby.com1.z0.glb.clouddn.com/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91_1.png)     \n\n首先接收到事件的是Activity,接下来事件传递到F1,F2,最后传递到Button的onTouchEvent被消费，很好理解，因为**事件由外向里传递**        \n \n接下来我们就着这个简单的按下事件，来分析一源码         \n\n\n### 1、Activity\n#### (1) `dispatchTouchEvent()`\n现在以debug的模式来看源码。      \n\n我的源码是Android－23。        \n\n首先接收到事件的是就是acitivity，所以我们把断点就放在Activity的`dispatchTouchEvent()`方法中       \n\n![](http://7xvzby.com1.z0.glb.clouddn.com/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91_2.png)      \n\n然后debug模式运行项目，点击下一步进入Activity的`dispatchTouchEvent()`的源码中：      \n\n![](http://7xvzby.com1.z0.glb.clouddn.com/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91_3.png)      \n\n上面的注释大概说的是：你可以重写此方法在所有窗体接收到事件之前将其拦截，如果不需要拦截，则保持原样。       \n\n简单来说呢，就是：**我可以重写该方法修改返回值使整个Activity都无法响应事件。**       \n\n如果我在Activity中重写该方法并修改了它的返回值，不管将该方法的返回值改为true或者false，该事件都消失，不会再向下传递（可怕）。        \n\n**所以不要修改Activity的`dispatchTouchEvent()`的默认返回值。**         \n\n接下来我们来分析上面的代码，首先是判断事件是否是down事件，如果是的话执行了`onUserInteraction()`。       \n\n这个方法是个空实现，我们可以在Activity中重写该方法。这里你要想到的是，因为down事件是一个事件流的开端，并且这个方法放在了分发之前，在最上端，所以我们可以在`onUserInteraction()`中做一些事件响应开始的操作。          \n\n接下来执行了Window的`superDispatchTouchEvent()`,点进去你会发现Window中的该方法是一个空实现，但是根据断点进去可以直接进到它的实现类：PhoneWindow（这也是断点的一个好处不是吗）。那么我们来看看PhoneWindow的：  \n     \n`superDispatchTouchEvent()`：\n```\n@Override\npublic boolean superDispatchTouchEvent(MotionEvent event) {\n    return mDecor.superDispatchTouchEvent(event);\n}\n```\n代码就一行，调用了Decor类的`superDispatchTouchEvent()`       \n\n但是!But!But,oh no!What's Decor?          \n\n![](http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/%E6%83%A8%E4%B8%8D%E5%BF%8D%E7%9D%B9.png)       \n\n[这里是一篇讲解Decor类的文章](http://www.jianshu.com/p/687010ccad66)，我也简单说一下：       \n\n为什么Activity可以利用`setContentView()`来设置布局？谁是容器？         \n\n没错，就是Decor。我们查看Decor会发现，它是PhoneWindow的内部类，继承自FrameLayout。         \n\nFrameLayout？？难道我们`setContentView()`最终是调用了`Decor.addView()`吗？？      \n\n这里我可以告诉你：虽然不是，但是原理就是这样的！        \n\n看下面这张图片就会明白顶层布局的原理了：       \n\n![](http://upload-images.jianshu.io/upload_images/1734948-cd6dd09d50cb0bb5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)      \n\ntitleBar就是标题栏，main.xml就是我们设置的布局文件，而最外层是Decor。      \n\n好了，就到这里。对Android窗体感兴趣的小伙伴，快去看看[这篇讲解Decor类的文章](http://www.jianshu.com/p/687010ccad66)。        \n\n我们接着查看源码，你会发现`mDecor.superDispatchTouchEvent(event)`最终调用的是ViewGroup的`dispatchTouchEvent()`。\n\n```\n/**\n    Decor类的superDispatchTouchEvent\n    注意Decor类继承自FrameLayout\n    所以super指的即是FrameLayout\n    但是FrameLayout没有重写该方法，查看源码会直接跳转至ViewGroup类\n**/\npublic boolean superDispatchTouchEvent(MotionEvent event) {\n    return super.dispatchTouchEvent(event);\n}\n```\n到这里，Activity已经成功将事件传递给ViewGroup，接下来将由ViewGroup来将事件一层一层传递至内部。\n\n#### (2) `onTouchEvent()`\n各位看官，请拉上去回头看Activity的`dispatchTouchEvent()`的最后一行：\n`return onTouchEvent(ev)`\n是这样的不？\n也就是在`getWindow.superDispatchTouchEvent()`返回false时，将执行最后一行调用Activity的`onTouchEvent()`，所以Activity的`onTouchEvent()`的调用时机，是和接下来ViewGroup的事件分发有着密切关系的。\n简单来说：只有当Activity下的所有View（ViewGroup）的`onTouchEvent()`都不消费事件时，才会调用Activity的`onTouchEvent()`。\n### 2、ViewGroup\n我们很顺利地来到了ViewGroup的`dispatchTouchEvent()`方法当中。\n但是，在分析源码之前，我想让各位看官先明白，现在调用ViewGroup的`dispatchTouchEvent()`方法的变量，指的是谁？是我们的FrameLayou_ONE吗？\n看官:\"你他喵的484傻，Activity源码中明明写着`mDecor.superDispatchTouchEvent(event)`，很明显是Activity调用了Decor的`dispatchTouchEvent()`，这个ViewGroup肯定是Decor啊！能不能讲重点，这么多废话!“        \n\n我：“.....”    \n      \n      \n![](http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/%E9%80%80%E5%87%BA%E8%A3%85%E9%80%BC%E7%95%8C.jpg)         \n行吧，提这个我是想再给各位看官强调一下，我们的layout文件仅仅是add到了系统顶层布局中，所以接收到事件的肯定是系统的顶层布局，而不是我们的layout中的布局。这个如何证实呢？             \n各位看官可以在ViewGroup的`dispatchTouchEvent()`打个断点，然后看官就会发现，这个方法执行了很多次，每次都可以查看一下变量this，看看到底是什么？比如第一次的this：\n```\ncom.android.internal.policy.PhoneWindow$DecorView{b9a23df V.E...... R....... 0,0-1080,1920}\n```\n好了，接下来我们就看看ViewGroup的事件分发机制吧!\n#### (1)`dispatchTouchEvent()`\nViewGroup的`dispatchTouchEvent()`内容很多，有210行左右，有兴趣的同学可以打开ViewGroup去查看。我这里就按着步骤一部分一部分的贴出来。有些部分我也看不大懂，不过有很多的注释，阅读起来还是很方便的：\n首先执行的是这个判断，判断是否分发事件，如果该方法返回false，则此次事件则会被丢弃，因为`dispatchTouchEvent()`的所有代码都包含在这个判断里！\n```\nif (onFilterTouchEventForSecurity(ev)){}\n```\n下面是`onFilterTouchEventForSecurity(ev)`这个判断的源码：\n根据方法名和注释来理解，这是一个触摸事件安全过滤器。基本上这个方法都会返回true，不会发生系统丢弃事件的情况。\n```\n    /**\n     * Filter the touch event to apply security policies.\n     *\n     * @param event The motion event to be filtered.\n     * @return True if the event should be dispatched, false if the event should be dropped.\n     *\n     * @see #getFilterTouchesWhenObscured\n     */\npublic boolean onFilterTouchEventForSecurity(MotionEvent event) {\n    //noinspection RedundantIfStatement\n    if ((mViewFlags & FILTER_TOUCHES_WHEN_OBSCURED) != 0&& (event.getFlags() & MotionEvent.FLAG_WINDOW_IS_OBSCURED) != 0) {\n        // Window is obscured, drop this touch.\n            return false;\n    }\n    return true;\n}\n```\n第二件事情：如果是down事件（因为down事件是开端），清除上次事件流的处理结果和状态。\n```\n// Handle an initial down.\nif (actionMasked == MotionEvent.ACTION_DOWN) {\n    // Throw away all previous state when starting a new touch gesture.\n    // The framework may have dropped the up or cancel event for the previous gesture\n    // due to an app switch, ANR, or some other state change.\n    cancelAndClearTouchTargets(ev);\n    resetTouchState();\n}\n```\n第三件事情：检查事件拦截是否拦截。\n```\n// Check for interception.\nfinal boolean intercepted;\nif (actionMasked == MotionEvent.ACTION_DOWN|| mFirstTouchTarget != null) {\n    final boolean disallowIntercept = (mGroupFlags &FLAG_DISALLOW_INTERCEPT) != 0;\n    if (!disallowIntercept) {\n          intercepted = onInterceptTouchEvent(ev);\n          ev.setAction(action); // restore action in case it was changed\n    } else {\n    intercepted = false;\n    }\n} else {\n    // There are no touch targets and this action is not an initial down\n    // so this view group continues to intercept touches.\n    intercepted = true;\n}\n```\n第四件事情：检查事件取消。\n```\n// Check for cancelation.\nfinal boolean canceled = resetCancelNextUpFlag(this)|| actionMasked == MotionEvent.ACTION_CANCEL;\n```\n\n第五件事情：如果没有被拦截，也没有被取消，就将此次事件分发给自己的下一级：子ViewGroup或者子View。\n这里的分发逻辑相当复杂，有兴趣的看官可以去自行阅读源码，或者参考[这篇文章](http://wangkuiwu.github.io/2015/01/04/TouchEvent-ViewGroup/)。\n```\nif (!canceled && !intercepted) {}\n```\n在最后，又进行一次检查取消标记，做了相应的处理:\n```\n// Update list of touch targets for pointer up or cancel, if needed.\nif (canceled|| actionMasked == MotionEvent.ACTION_UP|| actionMasked == MotionEvent.ACTION_HOVER_MOVE) {\n    resetTouchState();\n} \nelse if (split && actionMasked == MotionEvent.ACTION_POINTER_UP) {\n    final int actionIndex = ev.getActionIndex();\n    final int idBitsToRemove = 1 << ev.getPointerId(actionIndex);\n    removePointersFromTouchTargets(idBitsToRemove);\n}\n```\n。\n\n#### (2) `onInterceptTouchEvent()`\n事件流的每个事件都是由外层向里层依次传递的，有时候我们希望虽然点击的是内部button，但是做出相应的是button的容器，而不是button，也就是说在事件传递到button之前，将事件拦截并且消费，这也就是事件拦截的作用。\n事件拦截的方法源码很简单很简单：\n```\npublic boolean onInterceptTouchEvent(MotionEvent ev) {\n   return false;\n}\n```\n默认不拦截事件，如果拦截事件将返回值改为true，事件将被拦截并交给拦截事件的ViewGroup的`onTouchEvent()`处理。\n这个方法是ViewGroup独有的，难道Activity和View就无法拦截事件了吗？\n首先，Activity的`dispatchTouchEvent()`的返回值不可轻易更改，更改之后整个Activity都无法响应事件，所以如果我们需要Activity做拦截操作，可以修改Activity的`dispatchTouchEvent()`的逻辑，使之满足某些条件时修改返回值，否则不做修改。这样就可以使Activity进行事件的拦截。\n而至于View就更简单了，View本身就是最小的控件，事件传递到View是已经无法向下传递，所以无需拦截。\n#### (3) `onTouchEvent()`\nViewGroup类中没有重写`onTouchEvent()`，由于ViewGroup继承了View，所以View和ViewGroup的`onTouchEvent()`完全一致。\n这里我们再debug一下我们的demo：\n将断点打到View的`onTouchEvent()`的第一行，然后点击button，会发现断点执行，而this指代的是我们的Button，而不是上层的ViewGroup，也就是说上层中根本没有执行`onTouchEvent()`，第一次执行`onTouchEvent()`时，事件已经分发到了View。\n所以在这里，我们需要理解到这样一个地步：       \n\n**事件从Activity的`dispatchTouchEvent()`开始，首先分发到ViewGroup（DecorView、我们自己的Layout布局文件等）的`dispatchTouchEvent()`，并且在每次分发的时候会调用`onInterceptTouchEvent()`判断事件是否被拦截，如果事件被拦截则会执行将事件拦截的ViewGroup的`onTouchEvent()`方法并将接下来的整个事件流，都交给自己来处理，不会重复执行`onInterceptTouchEvent()`，如果没有拦截事件，最终将事件成功传递给View，View将调用onTouchEvent()将事件消费。**    \n    \n\n上面这段话希望每位耐心看到这里的读者都能理解，在这里还需要解释一下的是ViewGroup拦截事件交给`onTouchEvent()`之后，如果`onTouchEvenet()`返回了false（ViewGroup的`onTouchEvent()`默认返回false），则代表不消费此事件，则此次事件将逐层向上传递，调用每一层的`onTouchEvnet()`，如果中途所有的`onTouchEvent()`都返回false，那么事件将最终传递到Activity的`onTouchEvent()`中，到这里事件完成整个传递过程（向里传递，里不要，再传出来），不管Activity的`onTouchEvent()`返回什么结果，事件都将消失。\n### 3、View\n#### (1)`dispatchTouchEvent()`\n```\npublic boolean dispatchTouchEvent(MotionEvent event) {\n       boolean result = false;\n        if (mInputEventConsistencyVerifier != null) {\n            mInputEventConsistencyVerifier.onTouchEvent(event, 0);\n        }\n\n        final int actionMasked = event.getActionMasked();\n        if (actionMasked == MotionEvent.ACTION_DOWN) {\n            // Defensive cleanup for new gesture\n            stopNestedScroll();\n        }\n\n        if (onFilterTouchEventForSecurity(event)) {\n            //noinspection SimplifiableIfStatement\n            ListenerInfo li = mListenerInfo;\n            if (li != null && li.mOnTouchListener != null\n                    && (mViewFlags & ENABLED_MASK) == ENABLED\n                    && li.mOnTouchListener.onTouch(this, event)) {\n                result = true;\n            }\n\n            if (!result && onTouchEvent(event)) {\n                result = true;\n            }\n        }\n\n        if (!result && mInputEventConsistencyVerifier != null) {\n            mInputEventConsistencyVerifier.onUnhandledEvent(event, 0);\n        }\n\n        // Clean up after nested scrolls if this is the end of a gesture;\n        // also cancel it if we tried an ACTION_DOWN but we didn't want the rest\n        // of the gesture.\n        if (actionMasked == MotionEvent.ACTION_UP ||\n                actionMasked == MotionEvent.ACTION_CANCEL ||\n                (actionMasked == MotionEvent.ACTION_DOWN && !result)) {\n            stopNestedScroll();\n        }\n\n        return result;\n}\n```\n以上则是View的部分源码，我们只需要理解的是：在满足了相应条件之后，View的`dispatchTouchEvent()`主动调用了自己的`onTouchEvent()`，而View的`onTouchEvenet()`默认返回true消费事件。\n#### (2)`onTouchEvent()`\n`onTouchEvent`是用来消费事件的，在Activity、ViewGroup和View三者当中，只有View的`onTouchEvent()`默认返回true，代表消费事件。虽然ViewGroup和View的`onTouchEvent()`完全相同，但是其中存在某些逻辑判断，致使ViewGroup的返回值为false。\n推荐做法还是将事件处理的逻辑放到`onTouchEvent()`当中，而分发和拦截只发挥自己应有的作用即可。\n这里我就不贴View(ViewGroup)的`onTouchEvent()`的源码了，想看的同学可自行打开View搜索`onToucEvent()`。\n## 四.总结\n到这里，三者的各个方法的分析已经结束了，我想最后再简单总结一下：               \n\n1、Activity的`dispatchTouchEvent()`不可修改返回值，否则将导致整个Activity都无法接收事件，不管修改后返回true或是false。    \n\n2、在Activity中我们可以重写`onUserInteraction()`方法，来在整个事件流响应之前做自己想做的事情。    \n\n3、一个事件的传递过程默认总是从Activity的`dispatchTouchEvent()`开始，到View的`onTouchEvent()`结束，注意，这里是默认。     \n\n4、ViewGroup可以拦截事件交给自己的`onTouchEvent()`处理，如果自己的`onTouchEvent()`返回false，则事件不会消失，会继续向外层传递，如果一直没有被消费，那么事件传递到Activity的`onTouchEvent()`才会消失。      \n\n5、ViewGroup的`onInterceptTouchEvent()`不会在每次事件都调用，整个事件流只会在down事件或是第一次接触到事件时调用，所以不要在该方法中做事件逻辑处理。       \n\n6、三者的`onTouchEvent()`只有View的`onTouchEvent()`默认消费事件。       \n\n\n------------\n其实还有很多更深入的东西，这篇文章只是浅显地讲解了一下Android的事件分发机制，希望对各位看官有些帮助！\n\n>有任何问题或疑问都可以联系我：mengyuanzz@126.com\n\n","slug":"Android_even_distribution","published":1,"updated":"2018-08-24T09:36:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7sxdvu0008hnnfbnm19g9c","content":"<h2 id=\"一-说些废话\"><a href=\"#一-说些废话\" class=\"headerlink\" title=\"一.说些废话\"></a>一.说些废话</h2><p>Android事件分发真的非常非常重要，几乎所有的滑动冲突以及点击冲突都需要深刻了解该机制才可以解决问题。所以我希望大家可以仔细阅读该篇文章并且自己手动来实验，一定要自己打断点看看源码，不管干什么都要下功夫不是吗？    </p>\n<p>虽然重要，但其实Android事件分发机制也很简单，只要理解了Android事件分发的三个方法，以及传递的流程，你就可以轻松掌握Android事件分发机制。    </p>\n<p>在开始之前，再说一下事件流：    </p>\n<p>事件流指的是一次完整的触摸事件，一次完整的触摸事件应该包括是:     </p>\n<p><code>down（一次按下）--&gt;move move move（多次滑动）.....--&gt;up（一次抬起）</code>      </p>\n<p>所以事件流总是以down事件为开端，以up事件为终止。        </p>\n<p>那么接下来就正式开始吧！        </p>\n<h2 id=\"二-重要方法\"><a href=\"#二-重要方法\" class=\"headerlink\" title=\"二. 重要方法\"></a>二. 重要方法</h2><p>首先看这三个方法的名称以及拥有情况：         </p>\n<font color=\"red\">注意：类型不同，方法名相同，源码并不一致</font>     \n\n\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th style=\"text-align:center\">Activity</th>\n<th style=\"text-align:center\">ViewGroup</th>\n<th style=\"text-align:center\">View</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dispatchTouEvent</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n</tr>\n<tr>\n<td>onInterceptTouchEvent</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td>onTouchEvent</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n</tr>\n</tbody>\n</table>\n<p>true代表拥有，false代表没有此方法     </p>\n<p>如果想要了解Android的事件分发机制，就必须先了解这三个方法      </p>\n<ul>\n<li><p><code>dispatchTouEvent()</code>      </p>\n<p>  事件的分发方法，用来分发事件，在Activity、ViewGroup、View中都有该方法。</p>\n</li>\n<li><p><code>onInterceptTouchEvent()</code>       </p>\n<p>  事件的拦截方法，只有ViewGroup有该方法。</p>\n</li>\n<li><p><code>onTouchEvent()</code>      </p>\n<p>  事件的响应,当该事件属于我时，会执行该方法，返回true代表消费事件，返回false代表不消费事件并将该事件向外传递。</p>\n</li>\n</ul>\n<p>三个方法的含义知道了，这很easy，没错，就三个方法而已。接下来让我们深入分析：       </p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/back_I_begin_zb.jpg\" alt=\"\"></p>\n<h2 id=\"三-具体案例\"><a href=\"#三-具体案例\" class=\"headerlink\" title=\"三. 具体案例\"></a>三. 具体案例</h2><p>首先，我们来想象一个简单的布局             </p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91_0.png\" alt=\"布局\">              </p>\n<p>这个布局很简单,FrameLayout1的中间放了一个FrameLayout2，FrameLayout2的中间放了一个Button。       </p>\n<p>我在各个布局当中重写了所有事件响应的方法，并且没有修改任何返回值，接下来我要点击Button了！      </p>\n<p>我点！      </p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91_1.png\" alt=\"我点\">     </p>\n<p>首先接收到事件的是Activity,接下来事件传递到F1,F2,最后传递到Button的onTouchEvent被消费，很好理解，因为<strong>事件由外向里传递</strong>        </p>\n<p>接下来我们就着这个简单的按下事件，来分析一源码         </p>\n<h3 id=\"1、Activity\"><a href=\"#1、Activity\" class=\"headerlink\" title=\"1、Activity\"></a>1、Activity</h3><h4 id=\"1-dispatchTouchEvent\"><a href=\"#1-dispatchTouchEvent\" class=\"headerlink\" title=\"(1) dispatchTouchEvent()\"></a>(1) <code>dispatchTouchEvent()</code></h4><p>现在以debug的模式来看源码。      </p>\n<p>我的源码是Android－23。        </p>\n<p>首先接收到事件的是就是acitivity，所以我们把断点就放在Activity的<code>dispatchTouchEvent()</code>方法中       </p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91_2.png\" alt=\"\">      </p>\n<p>然后debug模式运行项目，点击下一步进入Activity的<code>dispatchTouchEvent()</code>的源码中：      </p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91_3.png\" alt=\"\">      </p>\n<p>上面的注释大概说的是：你可以重写此方法在所有窗体接收到事件之前将其拦截，如果不需要拦截，则保持原样。       </p>\n<p>简单来说呢，就是：<strong>我可以重写该方法修改返回值使整个Activity都无法响应事件。</strong>       </p>\n<p>如果我在Activity中重写该方法并修改了它的返回值，不管将该方法的返回值改为true或者false，该事件都消失，不会再向下传递（可怕）。        </p>\n<p><strong>所以不要修改Activity的<code>dispatchTouchEvent()</code>的默认返回值。</strong>         </p>\n<p>接下来我们来分析上面的代码，首先是判断事件是否是down事件，如果是的话执行了<code>onUserInteraction()</code>。       </p>\n<p>这个方法是个空实现，我们可以在Activity中重写该方法。这里你要想到的是，因为down事件是一个事件流的开端，并且这个方法放在了分发之前，在最上端，所以我们可以在<code>onUserInteraction()</code>中做一些事件响应开始的操作。          </p>\n<p>接下来执行了Window的<code>superDispatchTouchEvent()</code>,点进去你会发现Window中的该方法是一个空实现，但是根据断点进去可以直接进到它的实现类：PhoneWindow（这也是断点的一个好处不是吗）。那么我们来看看PhoneWindow的：  </p>\n<p><code>superDispatchTouchEvent()</code>：<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">superDispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">return</span> mDecor.<span class=\"title\">superDispatchTouchEvent</span><span class=\"params\">(event)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>代码就一行，调用了Decor类的<code>superDispatchTouchEvent()</code>       </p>\n<p>但是!But!But,oh no!What’s Decor?          </p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/%E6%83%A8%E4%B8%8D%E5%BF%8D%E7%9D%B9.png\" alt=\"\">       </p>\n<p><a href=\"http://www.jianshu.com/p/687010ccad66\" target=\"_blank\" rel=\"noopener\">这里是一篇讲解Decor类的文章</a>，我也简单说一下：       </p>\n<p>为什么Activity可以利用<code>setContentView()</code>来设置布局？谁是容器？         </p>\n<p>没错，就是Decor。我们查看Decor会发现，它是PhoneWindow的内部类，继承自FrameLayout。         </p>\n<p>FrameLayout？？难道我们<code>setContentView()</code>最终是调用了<code>Decor.addView()</code>吗？？      </p>\n<p>这里我可以告诉你：虽然不是，但是原理就是这样的！        </p>\n<p>看下面这张图片就会明白顶层布局的原理了：       </p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1734948-cd6dd09d50cb0bb5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">      </p>\n<p>titleBar就是标题栏，main.xml就是我们设置的布局文件，而最外层是Decor。      </p>\n<p>好了，就到这里。对Android窗体感兴趣的小伙伴，快去看看<a href=\"http://www.jianshu.com/p/687010ccad66\" target=\"_blank\" rel=\"noopener\">这篇讲解Decor类的文章</a>。        </p>\n<p>我们接着查看源码，你会发现<code>mDecor.superDispatchTouchEvent(event)</code>最终调用的是ViewGroup的<code>dispatchTouchEvent()</code>。</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    Decor类的superDispatchTouchEvent</span></span><br><span class=\"line\"><span class=\"comment\">    注意Decor类继承自FrameLayout</span></span><br><span class=\"line\"><span class=\"comment\">    所以super指的即是FrameLayout</span></span><br><span class=\"line\"><span class=\"comment\">    但是FrameLayout没有重写该方法，查看源码会直接跳转至ViewGroup类</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">superDispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.<span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(event)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到这里，Activity已经成功将事件传递给ViewGroup，接下来将由ViewGroup来将事件一层一层传递至内部。</p>\n<h4 id=\"2-onTouchEvent\"><a href=\"#2-onTouchEvent\" class=\"headerlink\" title=\"(2) onTouchEvent()\"></a>(2) <code>onTouchEvent()</code></h4><p>各位看官，请拉上去回头看Activity的<code>dispatchTouchEvent()</code>的最后一行：<br><code>return onTouchEvent(ev)</code><br>是这样的不？<br>也就是在<code>getWindow.superDispatchTouchEvent()</code>返回false时，将执行最后一行调用Activity的<code>onTouchEvent()</code>，所以Activity的<code>onTouchEvent()</code>的调用时机，是和接下来ViewGroup的事件分发有着密切关系的。<br>简单来说：只有当Activity下的所有View（ViewGroup）的<code>onTouchEvent()</code>都不消费事件时，才会调用Activity的<code>onTouchEvent()</code>。</p>\n<h3 id=\"2、ViewGroup\"><a href=\"#2、ViewGroup\" class=\"headerlink\" title=\"2、ViewGroup\"></a>2、ViewGroup</h3><p>我们很顺利地来到了ViewGroup的<code>dispatchTouchEvent()</code>方法当中。<br>但是，在分析源码之前，我想让各位看官先明白，现在调用ViewGroup的<code>dispatchTouchEvent()</code>方法的变量，指的是谁？是我们的FrameLayou_ONE吗？<br>看官:”你他喵的484傻，Activity源码中明明写着<code>mDecor.superDispatchTouchEvent(event)</code>，很明显是Activity调用了Decor的<code>dispatchTouchEvent()</code>，这个ViewGroup肯定是Decor啊！能不能讲重点，这么多废话!“        </p>\n<p>我：“…..”    </p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/%E9%80%80%E5%87%BA%E8%A3%85%E9%80%BC%E7%95%8C.jpg\" alt=\"\"><br>行吧，提这个我是想再给各位看官强调一下，我们的layout文件仅仅是add到了系统顶层布局中，所以接收到事件的肯定是系统的顶层布局，而不是我们的layout中的布局。这个如何证实呢？<br>各位看官可以在ViewGroup的<code>dispatchTouchEvent()</code>打个断点，然后看官就会发现，这个方法执行了很多次，每次都可以查看一下变量this，看看到底是什么？比如第一次的this：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com<span class=\"selector-class\">.android</span><span class=\"selector-class\">.internal</span><span class=\"selector-class\">.policy</span><span class=\"selector-class\">.PhoneWindow</span><span class=\"variable\">$DecorView</span>&#123;b9a23df V<span class=\"selector-class\">.E</span>...... R....... <span class=\"number\">0</span>,<span class=\"number\">0</span>-<span class=\"number\">1080</span>,<span class=\"number\">1920</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>好了，接下来我们就看看ViewGroup的事件分发机制吧!</p>\n<h4 id=\"1-dispatchTouchEvent-1\"><a href=\"#1-dispatchTouchEvent-1\" class=\"headerlink\" title=\"(1)dispatchTouchEvent()\"></a>(1)<code>dispatchTouchEvent()</code></h4><p>ViewGroup的<code>dispatchTouchEvent()</code>内容很多，有210行左右，有兴趣的同学可以打开ViewGroup去查看。我这里就按着步骤一部分一部分的贴出来。有些部分我也看不大懂，不过有很多的注释，阅读起来还是很方便的：<br>首先执行的是这个判断，判断是否分发事件，如果该方法返回false，则此次事件则会被丢弃，因为<code>dispatchTouchEvent()</code>的所有代码都包含在这个判断里！<br><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"comment\">(onFilterTouchEventForSecurity(ev)</span>)&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>下面是<code>onFilterTouchEventForSecurity(ev)</code>这个判断的源码：<br>根据方法名和注释来理解，这是一个触摸事件安全过滤器。基本上这个方法都会返回true，不会发生系统丢弃事件的情况。<br><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Filter the touch event to apply security policies.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> event The motion event to be filtered.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> True if the event should be dispatched, false if the event should be dropped.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> #getFilterTouchesWhenObscured</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> onFilterTouchEventForSecurity(MotionEvent event) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//noinspection RedundantIfStatement</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((mViewFlags &amp; FILTER_TOUCHES_WHEN_OBSCURED) != <span class=\"number\">0</span>&amp;&amp; (event.getFlags() &amp; MotionEvent.FLAG_WINDOW_IS_OBSCURED) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Window is obscured, drop this touch.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第二件事情：如果是down事件（因为down事件是开端），清除上次事件流的处理结果和状态。<br><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Handle an initial down.</span><br><span class=\"line\">if (actionMasked == MotionEvent.ACTION_DOWN) &#123;</span><br><span class=\"line\">    // Throw away <span class=\"literal\">all</span> previous <span class=\"keyword\">state</span> when starting a new touch gesture.</span><br><span class=\"line\">    // The framework may have dropped the up or cancel event <span class=\"keyword\">for</span> the previous gesture</span><br><span class=\"line\">    // due <span class=\"keyword\">to</span> an app switch, ANR, or some other <span class=\"keyword\">state</span> change.</span><br><span class=\"line\">    cancelAndClearTouchTargets(ev);</span><br><span class=\"line\">    resetTouchState();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第三件事情：检查事件拦截是否拦截。<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Check for interception.</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> intercepted;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_DOWN|| mFirstTouchTarget != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> disallowIntercept = (mGroupFlags &amp;FLAG_DISALLOW_INTERCEPT) != <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!disallowIntercept) &#123;</span><br><span class=\"line\">          intercepted = onInterceptTouchEvent(ev);</span><br><span class=\"line\">          ev.setAction(action); <span class=\"comment\">// restore action in case it was changed</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// There are no touch targets and this action is not an initial down</span></span><br><span class=\"line\">    <span class=\"comment\">// so this view group continues to intercept touches.</span></span><br><span class=\"line\">    intercepted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第四件事情：检查事件取消。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// <span class=\"keyword\">Check</span> <span class=\"keyword\">for</span> cancelation.</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"built_in\">boolean</span> canceled = resetCancelNextUpFlag(this)|| actionMasked == MotionEvent.ACTION_CANCEL;</span><br></pre></td></tr></table></figure></p>\n<p>第五件事情：如果没有被拦截，也没有被取消，就将此次事件分发给自己的下一级：子ViewGroup或者子View。<br>这里的分发逻辑相当复杂，有兴趣的看官可以去自行阅读源码，或者参考<a href=\"http://wangkuiwu.github.io/2015/01/04/TouchEvent-ViewGroup/\" target=\"_blank\" rel=\"noopener\">这篇文章</a>。<br><figure class=\"highlight erlang-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (!canceled &amp;&amp; !intercepted) &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在最后，又进行一次检查取消标记，做了相应的处理:<br><figure class=\"highlight irpf90\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Update list of <span class=\"keyword\">touch</span> targets for <span class=\"keyword\">pointer</span> up or cancel, <span class=\"keyword\">if</span> needed.</span><br><span class=\"line\"><span class=\"keyword\">if</span> (canceled|| actionMasked == MotionEvent.ACTION_UP|| actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123;</span><br><span class=\"line\">    resetTouchState();</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_UP) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> actionIndex = ev.getActionIndex();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> idBitsToRemove = <span class=\"number\">1</span> &lt;&lt; ev.getPointerId(actionIndex);</span><br><span class=\"line\">    removePointersFromTouchTargets(idBitsToRemove);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>。</p>\n<h4 id=\"2-onInterceptTouchEvent\"><a href=\"#2-onInterceptTouchEvent\" class=\"headerlink\" title=\"(2) onInterceptTouchEvent()\"></a>(2) <code>onInterceptTouchEvent()</code></h4><p>事件流的每个事件都是由外层向里层依次传递的，有时候我们希望虽然点击的是内部button，但是做出相应的是button的容器，而不是button，也就是说在事件传递到button之前，将事件拦截并且消费，这也就是事件拦截的作用。<br>事件拦截的方法源码很简单很简单：<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>默认不拦截事件，如果拦截事件将返回值改为true，事件将被拦截并交给拦截事件的ViewGroup的<code>onTouchEvent()</code>处理。<br>这个方法是ViewGroup独有的，难道Activity和View就无法拦截事件了吗？<br>首先，Activity的<code>dispatchTouchEvent()</code>的返回值不可轻易更改，更改之后整个Activity都无法响应事件，所以如果我们需要Activity做拦截操作，可以修改Activity的<code>dispatchTouchEvent()</code>的逻辑，使之满足某些条件时修改返回值，否则不做修改。这样就可以使Activity进行事件的拦截。<br>而至于View就更简单了，View本身就是最小的控件，事件传递到View是已经无法向下传递，所以无需拦截。</p>\n<h4 id=\"3-onTouchEvent\"><a href=\"#3-onTouchEvent\" class=\"headerlink\" title=\"(3) onTouchEvent()\"></a>(3) <code>onTouchEvent()</code></h4><p>ViewGroup类中没有重写<code>onTouchEvent()</code>，由于ViewGroup继承了View，所以View和ViewGroup的<code>onTouchEvent()</code>完全一致。<br>这里我们再debug一下我们的demo：<br>将断点打到View的<code>onTouchEvent()</code>的第一行，然后点击button，会发现断点执行，而this指代的是我们的Button，而不是上层的ViewGroup，也就是说上层中根本没有执行<code>onTouchEvent()</code>，第一次执行<code>onTouchEvent()</code>时，事件已经分发到了View。<br>所以在这里，我们需要理解到这样一个地步：       </p>\n<p><strong>事件从Activity的<code>dispatchTouchEvent()</code>开始，首先分发到ViewGroup（DecorView、我们自己的Layout布局文件等）的<code>dispatchTouchEvent()</code>，并且在每次分发的时候会调用<code>onInterceptTouchEvent()</code>判断事件是否被拦截，如果事件被拦截则会执行将事件拦截的ViewGroup的<code>onTouchEvent()</code>方法并将接下来的整个事件流，都交给自己来处理，不会重复执行<code>onInterceptTouchEvent()</code>，如果没有拦截事件，最终将事件成功传递给View，View将调用onTouchEvent()将事件消费。</strong>    </p>\n<p>上面这段话希望每位耐心看到这里的读者都能理解，在这里还需要解释一下的是ViewGroup拦截事件交给<code>onTouchEvent()</code>之后，如果<code>onTouchEvenet()</code>返回了false（ViewGroup的<code>onTouchEvent()</code>默认返回false），则代表不消费此事件，则此次事件将逐层向上传递，调用每一层的<code>onTouchEvnet()</code>，如果中途所有的<code>onTouchEvent()</code>都返回false，那么事件将最终传递到Activity的<code>onTouchEvent()</code>中，到这里事件完成整个传递过程（向里传递，里不要，再传出来），不管Activity的<code>onTouchEvent()</code>返回什么结果，事件都将消失。</p>\n<h3 id=\"3、View\"><a href=\"#3、View\" class=\"headerlink\" title=\"3、View\"></a>3、View</h3><h4 id=\"1-dispatchTouchEvent-2\"><a href=\"#1-dispatchTouchEvent-2\" class=\"headerlink\" title=\"(1)dispatchTouchEvent()\"></a>(1)<code>dispatchTouchEvent()</code></h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> boolean <span class=\"title\">dispatchTouchEvent</span>(<span class=\"params\">MotionEvent <span class=\"keyword\">event</span></span>) </span>&#123;</span><br><span class=\"line\">       boolean result = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mInputEventConsistencyVerifier != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            mInputEventConsistencyVerifier.onTouchEvent(<span class=\"keyword\">event</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        final <span class=\"keyword\">int</span> actionMasked = <span class=\"keyword\">event</span>.getActionMasked();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Defensive cleanup for new gesture</span></span><br><span class=\"line\">            stopNestedScroll();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (onFilterTouchEventForSecurity(<span class=\"keyword\">event</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//noinspection SimplifiableIfStatement</span></span><br><span class=\"line\">            ListenerInfo li = mListenerInfo;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (li != <span class=\"literal\">null</span> &amp;&amp; li.mOnTouchListener != <span class=\"literal\">null</span></span><br><span class=\"line\">                    &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</span><br><span class=\"line\">                    &amp;&amp; li.mOnTouchListener.onTouch(<span class=\"keyword\">this</span>, <span class=\"keyword\">event</span>)) &#123;</span><br><span class=\"line\">                result = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!result &amp;&amp; onTouchEvent(<span class=\"keyword\">event</span>)) &#123;</span><br><span class=\"line\">                result = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!result &amp;&amp; mInputEventConsistencyVerifier != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            mInputEventConsistencyVerifier.onUnhandledEvent(<span class=\"keyword\">event</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Clean up after nested scrolls if this is the end of a gesture;</span></span><br><span class=\"line\">        <span class=\"comment\">// also cancel it if we tried an ACTION_DOWN but we didn't want the rest</span></span><br><span class=\"line\">        <span class=\"comment\">// of the gesture.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_UP ||</span><br><span class=\"line\">                actionMasked == MotionEvent.ACTION_CANCEL ||</span><br><span class=\"line\">                (actionMasked == MotionEvent.ACTION_DOWN &amp;&amp; !result)) &#123;</span><br><span class=\"line\">            stopNestedScroll();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上则是View的部分源码，我们只需要理解的是：在满足了相应条件之后，View的<code>dispatchTouchEvent()</code>主动调用了自己的<code>onTouchEvent()</code>，而View的<code>onTouchEvenet()</code>默认返回true消费事件。</p>\n<h4 id=\"2-onTouchEvent-1\"><a href=\"#2-onTouchEvent-1\" class=\"headerlink\" title=\"(2)onTouchEvent()\"></a>(2)<code>onTouchEvent()</code></h4><p><code>onTouchEvent</code>是用来消费事件的，在Activity、ViewGroup和View三者当中，只有View的<code>onTouchEvent()</code>默认返回true，代表消费事件。虽然ViewGroup和View的<code>onTouchEvent()</code>完全相同，但是其中存在某些逻辑判断，致使ViewGroup的返回值为false。<br>推荐做法还是将事件处理的逻辑放到<code>onTouchEvent()</code>当中，而分发和拦截只发挥自己应有的作用即可。<br>这里我就不贴View(ViewGroup)的<code>onTouchEvent()</code>的源码了，想看的同学可自行打开View搜索<code>onToucEvent()</code>。</p>\n<h2 id=\"四-总结\"><a href=\"#四-总结\" class=\"headerlink\" title=\"四.总结\"></a>四.总结</h2><p>到这里，三者的各个方法的分析已经结束了，我想最后再简单总结一下：               </p>\n<p>1、Activity的<code>dispatchTouchEvent()</code>不可修改返回值，否则将导致整个Activity都无法接收事件，不管修改后返回true或是false。    </p>\n<p>2、在Activity中我们可以重写<code>onUserInteraction()</code>方法，来在整个事件流响应之前做自己想做的事情。    </p>\n<p>3、一个事件的传递过程默认总是从Activity的<code>dispatchTouchEvent()</code>开始，到View的<code>onTouchEvent()</code>结束，注意，这里是默认。     </p>\n<p>4、ViewGroup可以拦截事件交给自己的<code>onTouchEvent()</code>处理，如果自己的<code>onTouchEvent()</code>返回false，则事件不会消失，会继续向外层传递，如果一直没有被消费，那么事件传递到Activity的<code>onTouchEvent()</code>才会消失。      </p>\n<p>5、ViewGroup的<code>onInterceptTouchEvent()</code>不会在每次事件都调用，整个事件流只会在down事件或是第一次接触到事件时调用，所以不要在该方法中做事件逻辑处理。       </p>\n<p>6、三者的<code>onTouchEvent()</code>只有View的<code>onTouchEvent()</code>默认消费事件。       </p>\n<hr>\n<p>其实还有很多更深入的东西，这篇文章只是浅显地讲解了一下Android的事件分发机制，希望对各位看官有些帮助！</p>\n<blockquote>\n<p>有任何问题或疑问都可以联系我：<a href=\"mailto:mengyuanzz@126.com\" target=\"_blank\" rel=\"noopener\">mengyuanzz@126.com</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-说些废话\"><a href=\"#一-说些废话\" class=\"headerlink\" title=\"一.说些废话\"></a>一.说些废话</h2><p>Android事件分发真的非常非常重要，几乎所有的滑动冲突以及点击冲突都需要深刻了解该机制才可以解决问题。所以我希望大家可以仔细阅读该篇文章并且自己手动来实验，一定要自己打断点看看源码，不管干什么都要下功夫不是吗？    </p>\n<p>虽然重要，但其实Android事件分发机制也很简单，只要理解了Android事件分发的三个方法，以及传递的流程，你就可以轻松掌握Android事件分发机制。    </p>\n<p>在开始之前，再说一下事件流：    </p>\n<p>事件流指的是一次完整的触摸事件，一次完整的触摸事件应该包括是:     </p>\n<p><code>down（一次按下）--&gt;move move move（多次滑动）.....--&gt;up（一次抬起）</code>      </p>\n<p>所以事件流总是以down事件为开端，以up事件为终止。        </p>\n<p>那么接下来就正式开始吧！        </p>\n<h2 id=\"二-重要方法\"><a href=\"#二-重要方法\" class=\"headerlink\" title=\"二. 重要方法\"></a>二. 重要方法</h2><p>首先看这三个方法的名称以及拥有情况：         </p>\n<font color=\"red\">注意：类型不同，方法名相同，源码并不一致</font>     \n\n\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th style=\"text-align:center\">Activity</th>\n<th style=\"text-align:center\">ViewGroup</th>\n<th style=\"text-align:center\">View</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>dispatchTouEvent</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n</tr>\n<tr>\n<td>onInterceptTouchEvent</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td>onTouchEvent</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n</tr>\n</tbody>\n</table>\n<p>true代表拥有，false代表没有此方法     </p>\n<p>如果想要了解Android的事件分发机制，就必须先了解这三个方法      </p>\n<ul>\n<li><p><code>dispatchTouEvent()</code>      </p>\n<p>  事件的分发方法，用来分发事件，在Activity、ViewGroup、View中都有该方法。</p>\n</li>\n<li><p><code>onInterceptTouchEvent()</code>       </p>\n<p>  事件的拦截方法，只有ViewGroup有该方法。</p>\n</li>\n<li><p><code>onTouchEvent()</code>      </p>\n<p>  事件的响应,当该事件属于我时，会执行该方法，返回true代表消费事件，返回false代表不消费事件并将该事件向外传递。</p>\n</li>\n</ul>\n<p>三个方法的含义知道了，这很easy，没错，就三个方法而已。接下来让我们深入分析：       </p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/back_I_begin_zb.jpg\" alt=\"\"></p>\n<h2 id=\"三-具体案例\"><a href=\"#三-具体案例\" class=\"headerlink\" title=\"三. 具体案例\"></a>三. 具体案例</h2><p>首先，我们来想象一个简单的布局             </p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91_0.png\" alt=\"布局\">              </p>\n<p>这个布局很简单,FrameLayout1的中间放了一个FrameLayout2，FrameLayout2的中间放了一个Button。       </p>\n<p>我在各个布局当中重写了所有事件响应的方法，并且没有修改任何返回值，接下来我要点击Button了！      </p>\n<p>我点！      </p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91_1.png\" alt=\"我点\">     </p>\n<p>首先接收到事件的是Activity,接下来事件传递到F1,F2,最后传递到Button的onTouchEvent被消费，很好理解，因为<strong>事件由外向里传递</strong>        </p>\n<p>接下来我们就着这个简单的按下事件，来分析一源码         </p>\n<h3 id=\"1、Activity\"><a href=\"#1、Activity\" class=\"headerlink\" title=\"1、Activity\"></a>1、Activity</h3><h4 id=\"1-dispatchTouchEvent\"><a href=\"#1-dispatchTouchEvent\" class=\"headerlink\" title=\"(1) dispatchTouchEvent()\"></a>(1) <code>dispatchTouchEvent()</code></h4><p>现在以debug的模式来看源码。      </p>\n<p>我的源码是Android－23。        </p>\n<p>首先接收到事件的是就是acitivity，所以我们把断点就放在Activity的<code>dispatchTouchEvent()</code>方法中       </p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91_2.png\" alt=\"\">      </p>\n<p>然后debug模式运行项目，点击下一步进入Activity的<code>dispatchTouchEvent()</code>的源码中：      </p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91_3.png\" alt=\"\">      </p>\n<p>上面的注释大概说的是：你可以重写此方法在所有窗体接收到事件之前将其拦截，如果不需要拦截，则保持原样。       </p>\n<p>简单来说呢，就是：<strong>我可以重写该方法修改返回值使整个Activity都无法响应事件。</strong>       </p>\n<p>如果我在Activity中重写该方法并修改了它的返回值，不管将该方法的返回值改为true或者false，该事件都消失，不会再向下传递（可怕）。        </p>\n<p><strong>所以不要修改Activity的<code>dispatchTouchEvent()</code>的默认返回值。</strong>         </p>\n<p>接下来我们来分析上面的代码，首先是判断事件是否是down事件，如果是的话执行了<code>onUserInteraction()</code>。       </p>\n<p>这个方法是个空实现，我们可以在Activity中重写该方法。这里你要想到的是，因为down事件是一个事件流的开端，并且这个方法放在了分发之前，在最上端，所以我们可以在<code>onUserInteraction()</code>中做一些事件响应开始的操作。          </p>\n<p>接下来执行了Window的<code>superDispatchTouchEvent()</code>,点进去你会发现Window中的该方法是一个空实现，但是根据断点进去可以直接进到它的实现类：PhoneWindow（这也是断点的一个好处不是吗）。那么我们来看看PhoneWindow的：  </p>\n<p><code>superDispatchTouchEvent()</code>：<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">superDispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">return</span> mDecor.<span class=\"title\">superDispatchTouchEvent</span><span class=\"params\">(event)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>代码就一行，调用了Decor类的<code>superDispatchTouchEvent()</code>       </p>\n<p>但是!But!But,oh no!What’s Decor?          </p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/%E6%83%A8%E4%B8%8D%E5%BF%8D%E7%9D%B9.png\" alt=\"\">       </p>\n<p><a href=\"http://www.jianshu.com/p/687010ccad66\" target=\"_blank\" rel=\"noopener\">这里是一篇讲解Decor类的文章</a>，我也简单说一下：       </p>\n<p>为什么Activity可以利用<code>setContentView()</code>来设置布局？谁是容器？         </p>\n<p>没错，就是Decor。我们查看Decor会发现，它是PhoneWindow的内部类，继承自FrameLayout。         </p>\n<p>FrameLayout？？难道我们<code>setContentView()</code>最终是调用了<code>Decor.addView()</code>吗？？      </p>\n<p>这里我可以告诉你：虽然不是，但是原理就是这样的！        </p>\n<p>看下面这张图片就会明白顶层布局的原理了：       </p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1734948-cd6dd09d50cb0bb5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\">      </p>\n<p>titleBar就是标题栏，main.xml就是我们设置的布局文件，而最外层是Decor。      </p>\n<p>好了，就到这里。对Android窗体感兴趣的小伙伴，快去看看<a href=\"http://www.jianshu.com/p/687010ccad66\" target=\"_blank\" rel=\"noopener\">这篇讲解Decor类的文章</a>。        </p>\n<p>我们接着查看源码，你会发现<code>mDecor.superDispatchTouchEvent(event)</code>最终调用的是ViewGroup的<code>dispatchTouchEvent()</code>。</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    Decor类的superDispatchTouchEvent</span></span><br><span class=\"line\"><span class=\"comment\">    注意Decor类继承自FrameLayout</span></span><br><span class=\"line\"><span class=\"comment\">    所以super指的即是FrameLayout</span></span><br><span class=\"line\"><span class=\"comment\">    但是FrameLayout没有重写该方法，查看源码会直接跳转至ViewGroup类</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">superDispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.<span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(event)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到这里，Activity已经成功将事件传递给ViewGroup，接下来将由ViewGroup来将事件一层一层传递至内部。</p>\n<h4 id=\"2-onTouchEvent\"><a href=\"#2-onTouchEvent\" class=\"headerlink\" title=\"(2) onTouchEvent()\"></a>(2) <code>onTouchEvent()</code></h4><p>各位看官，请拉上去回头看Activity的<code>dispatchTouchEvent()</code>的最后一行：<br><code>return onTouchEvent(ev)</code><br>是这样的不？<br>也就是在<code>getWindow.superDispatchTouchEvent()</code>返回false时，将执行最后一行调用Activity的<code>onTouchEvent()</code>，所以Activity的<code>onTouchEvent()</code>的调用时机，是和接下来ViewGroup的事件分发有着密切关系的。<br>简单来说：只有当Activity下的所有View（ViewGroup）的<code>onTouchEvent()</code>都不消费事件时，才会调用Activity的<code>onTouchEvent()</code>。</p>\n<h3 id=\"2、ViewGroup\"><a href=\"#2、ViewGroup\" class=\"headerlink\" title=\"2、ViewGroup\"></a>2、ViewGroup</h3><p>我们很顺利地来到了ViewGroup的<code>dispatchTouchEvent()</code>方法当中。<br>但是，在分析源码之前，我想让各位看官先明白，现在调用ViewGroup的<code>dispatchTouchEvent()</code>方法的变量，指的是谁？是我们的FrameLayou_ONE吗？<br>看官:”你他喵的484傻，Activity源码中明明写着<code>mDecor.superDispatchTouchEvent(event)</code>，很明显是Activity调用了Decor的<code>dispatchTouchEvent()</code>，这个ViewGroup肯定是Decor啊！能不能讲重点，这么多废话!“        </p>\n<p>我：“…..”    </p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/%E9%80%80%E5%87%BA%E8%A3%85%E9%80%BC%E7%95%8C.jpg\" alt=\"\"><br>行吧，提这个我是想再给各位看官强调一下，我们的layout文件仅仅是add到了系统顶层布局中，所以接收到事件的肯定是系统的顶层布局，而不是我们的layout中的布局。这个如何证实呢？<br>各位看官可以在ViewGroup的<code>dispatchTouchEvent()</code>打个断点，然后看官就会发现，这个方法执行了很多次，每次都可以查看一下变量this，看看到底是什么？比如第一次的this：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com<span class=\"selector-class\">.android</span><span class=\"selector-class\">.internal</span><span class=\"selector-class\">.policy</span><span class=\"selector-class\">.PhoneWindow</span><span class=\"variable\">$DecorView</span>&#123;b9a23df V<span class=\"selector-class\">.E</span>...... R....... <span class=\"number\">0</span>,<span class=\"number\">0</span>-<span class=\"number\">1080</span>,<span class=\"number\">1920</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>好了，接下来我们就看看ViewGroup的事件分发机制吧!</p>\n<h4 id=\"1-dispatchTouchEvent-1\"><a href=\"#1-dispatchTouchEvent-1\" class=\"headerlink\" title=\"(1)dispatchTouchEvent()\"></a>(1)<code>dispatchTouchEvent()</code></h4><p>ViewGroup的<code>dispatchTouchEvent()</code>内容很多，有210行左右，有兴趣的同学可以打开ViewGroup去查看。我这里就按着步骤一部分一部分的贴出来。有些部分我也看不大懂，不过有很多的注释，阅读起来还是很方便的：<br>首先执行的是这个判断，判断是否分发事件，如果该方法返回false，则此次事件则会被丢弃，因为<code>dispatchTouchEvent()</code>的所有代码都包含在这个判断里！<br><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"comment\">(onFilterTouchEventForSecurity(ev)</span>)&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>下面是<code>onFilterTouchEventForSecurity(ev)</code>这个判断的源码：<br>根据方法名和注释来理解，这是一个触摸事件安全过滤器。基本上这个方法都会返回true，不会发生系统丢弃事件的情况。<br><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Filter the touch event to apply security policies.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> event The motion event to be filtered.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> True if the event should be dispatched, false if the event should be dropped.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> #getFilterTouchesWhenObscured</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> onFilterTouchEventForSecurity(MotionEvent event) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//noinspection RedundantIfStatement</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((mViewFlags &amp; FILTER_TOUCHES_WHEN_OBSCURED) != <span class=\"number\">0</span>&amp;&amp; (event.getFlags() &amp; MotionEvent.FLAG_WINDOW_IS_OBSCURED) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Window is obscured, drop this touch.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第二件事情：如果是down事件（因为down事件是开端），清除上次事件流的处理结果和状态。<br><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Handle an initial down.</span><br><span class=\"line\">if (actionMasked == MotionEvent.ACTION_DOWN) &#123;</span><br><span class=\"line\">    // Throw away <span class=\"literal\">all</span> previous <span class=\"keyword\">state</span> when starting a new touch gesture.</span><br><span class=\"line\">    // The framework may have dropped the up or cancel event <span class=\"keyword\">for</span> the previous gesture</span><br><span class=\"line\">    // due <span class=\"keyword\">to</span> an app switch, ANR, or some other <span class=\"keyword\">state</span> change.</span><br><span class=\"line\">    cancelAndClearTouchTargets(ev);</span><br><span class=\"line\">    resetTouchState();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第三件事情：检查事件拦截是否拦截。<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Check for interception.</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> intercepted;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_DOWN|| mFirstTouchTarget != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> disallowIntercept = (mGroupFlags &amp;FLAG_DISALLOW_INTERCEPT) != <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!disallowIntercept) &#123;</span><br><span class=\"line\">          intercepted = onInterceptTouchEvent(ev);</span><br><span class=\"line\">          ev.setAction(action); <span class=\"comment\">// restore action in case it was changed</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// There are no touch targets and this action is not an initial down</span></span><br><span class=\"line\">    <span class=\"comment\">// so this view group continues to intercept touches.</span></span><br><span class=\"line\">    intercepted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第四件事情：检查事件取消。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// <span class=\"keyword\">Check</span> <span class=\"keyword\">for</span> cancelation.</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"built_in\">boolean</span> canceled = resetCancelNextUpFlag(this)|| actionMasked == MotionEvent.ACTION_CANCEL;</span><br></pre></td></tr></table></figure></p>\n<p>第五件事情：如果没有被拦截，也没有被取消，就将此次事件分发给自己的下一级：子ViewGroup或者子View。<br>这里的分发逻辑相当复杂，有兴趣的看官可以去自行阅读源码，或者参考<a href=\"http://wangkuiwu.github.io/2015/01/04/TouchEvent-ViewGroup/\" target=\"_blank\" rel=\"noopener\">这篇文章</a>。<br><figure class=\"highlight erlang-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (!canceled &amp;&amp; !intercepted) &#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在最后，又进行一次检查取消标记，做了相应的处理:<br><figure class=\"highlight irpf90\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Update list of <span class=\"keyword\">touch</span> targets for <span class=\"keyword\">pointer</span> up or cancel, <span class=\"keyword\">if</span> needed.</span><br><span class=\"line\"><span class=\"keyword\">if</span> (canceled|| actionMasked == MotionEvent.ACTION_UP|| actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123;</span><br><span class=\"line\">    resetTouchState();</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_UP) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> actionIndex = ev.getActionIndex();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> idBitsToRemove = <span class=\"number\">1</span> &lt;&lt; ev.getPointerId(actionIndex);</span><br><span class=\"line\">    removePointersFromTouchTargets(idBitsToRemove);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>。</p>\n<h4 id=\"2-onInterceptTouchEvent\"><a href=\"#2-onInterceptTouchEvent\" class=\"headerlink\" title=\"(2) onInterceptTouchEvent()\"></a>(2) <code>onInterceptTouchEvent()</code></h4><p>事件流的每个事件都是由外层向里层依次传递的，有时候我们希望虽然点击的是内部button，但是做出相应的是button的容器，而不是button，也就是说在事件传递到button之前，将事件拦截并且消费，这也就是事件拦截的作用。<br>事件拦截的方法源码很简单很简单：<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>默认不拦截事件，如果拦截事件将返回值改为true，事件将被拦截并交给拦截事件的ViewGroup的<code>onTouchEvent()</code>处理。<br>这个方法是ViewGroup独有的，难道Activity和View就无法拦截事件了吗？<br>首先，Activity的<code>dispatchTouchEvent()</code>的返回值不可轻易更改，更改之后整个Activity都无法响应事件，所以如果我们需要Activity做拦截操作，可以修改Activity的<code>dispatchTouchEvent()</code>的逻辑，使之满足某些条件时修改返回值，否则不做修改。这样就可以使Activity进行事件的拦截。<br>而至于View就更简单了，View本身就是最小的控件，事件传递到View是已经无法向下传递，所以无需拦截。</p>\n<h4 id=\"3-onTouchEvent\"><a href=\"#3-onTouchEvent\" class=\"headerlink\" title=\"(3) onTouchEvent()\"></a>(3) <code>onTouchEvent()</code></h4><p>ViewGroup类中没有重写<code>onTouchEvent()</code>，由于ViewGroup继承了View，所以View和ViewGroup的<code>onTouchEvent()</code>完全一致。<br>这里我们再debug一下我们的demo：<br>将断点打到View的<code>onTouchEvent()</code>的第一行，然后点击button，会发现断点执行，而this指代的是我们的Button，而不是上层的ViewGroup，也就是说上层中根本没有执行<code>onTouchEvent()</code>，第一次执行<code>onTouchEvent()</code>时，事件已经分发到了View。<br>所以在这里，我们需要理解到这样一个地步：       </p>\n<p><strong>事件从Activity的<code>dispatchTouchEvent()</code>开始，首先分发到ViewGroup（DecorView、我们自己的Layout布局文件等）的<code>dispatchTouchEvent()</code>，并且在每次分发的时候会调用<code>onInterceptTouchEvent()</code>判断事件是否被拦截，如果事件被拦截则会执行将事件拦截的ViewGroup的<code>onTouchEvent()</code>方法并将接下来的整个事件流，都交给自己来处理，不会重复执行<code>onInterceptTouchEvent()</code>，如果没有拦截事件，最终将事件成功传递给View，View将调用onTouchEvent()将事件消费。</strong>    </p>\n<p>上面这段话希望每位耐心看到这里的读者都能理解，在这里还需要解释一下的是ViewGroup拦截事件交给<code>onTouchEvent()</code>之后，如果<code>onTouchEvenet()</code>返回了false（ViewGroup的<code>onTouchEvent()</code>默认返回false），则代表不消费此事件，则此次事件将逐层向上传递，调用每一层的<code>onTouchEvnet()</code>，如果中途所有的<code>onTouchEvent()</code>都返回false，那么事件将最终传递到Activity的<code>onTouchEvent()</code>中，到这里事件完成整个传递过程（向里传递，里不要，再传出来），不管Activity的<code>onTouchEvent()</code>返回什么结果，事件都将消失。</p>\n<h3 id=\"3、View\"><a href=\"#3、View\" class=\"headerlink\" title=\"3、View\"></a>3、View</h3><h4 id=\"1-dispatchTouchEvent-2\"><a href=\"#1-dispatchTouchEvent-2\" class=\"headerlink\" title=\"(1)dispatchTouchEvent()\"></a>(1)<code>dispatchTouchEvent()</code></h4><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> boolean <span class=\"title\">dispatchTouchEvent</span>(<span class=\"params\">MotionEvent <span class=\"keyword\">event</span></span>) </span>&#123;</span><br><span class=\"line\">       boolean result = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mInputEventConsistencyVerifier != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            mInputEventConsistencyVerifier.onTouchEvent(<span class=\"keyword\">event</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        final <span class=\"keyword\">int</span> actionMasked = <span class=\"keyword\">event</span>.getActionMasked();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Defensive cleanup for new gesture</span></span><br><span class=\"line\">            stopNestedScroll();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (onFilterTouchEventForSecurity(<span class=\"keyword\">event</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//noinspection SimplifiableIfStatement</span></span><br><span class=\"line\">            ListenerInfo li = mListenerInfo;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (li != <span class=\"literal\">null</span> &amp;&amp; li.mOnTouchListener != <span class=\"literal\">null</span></span><br><span class=\"line\">                    &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</span><br><span class=\"line\">                    &amp;&amp; li.mOnTouchListener.onTouch(<span class=\"keyword\">this</span>, <span class=\"keyword\">event</span>)) &#123;</span><br><span class=\"line\">                result = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!result &amp;&amp; onTouchEvent(<span class=\"keyword\">event</span>)) &#123;</span><br><span class=\"line\">                result = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!result &amp;&amp; mInputEventConsistencyVerifier != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            mInputEventConsistencyVerifier.onUnhandledEvent(<span class=\"keyword\">event</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Clean up after nested scrolls if this is the end of a gesture;</span></span><br><span class=\"line\">        <span class=\"comment\">// also cancel it if we tried an ACTION_DOWN but we didn't want the rest</span></span><br><span class=\"line\">        <span class=\"comment\">// of the gesture.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_UP ||</span><br><span class=\"line\">                actionMasked == MotionEvent.ACTION_CANCEL ||</span><br><span class=\"line\">                (actionMasked == MotionEvent.ACTION_DOWN &amp;&amp; !result)) &#123;</span><br><span class=\"line\">            stopNestedScroll();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上则是View的部分源码，我们只需要理解的是：在满足了相应条件之后，View的<code>dispatchTouchEvent()</code>主动调用了自己的<code>onTouchEvent()</code>，而View的<code>onTouchEvenet()</code>默认返回true消费事件。</p>\n<h4 id=\"2-onTouchEvent-1\"><a href=\"#2-onTouchEvent-1\" class=\"headerlink\" title=\"(2)onTouchEvent()\"></a>(2)<code>onTouchEvent()</code></h4><p><code>onTouchEvent</code>是用来消费事件的，在Activity、ViewGroup和View三者当中，只有View的<code>onTouchEvent()</code>默认返回true，代表消费事件。虽然ViewGroup和View的<code>onTouchEvent()</code>完全相同，但是其中存在某些逻辑判断，致使ViewGroup的返回值为false。<br>推荐做法还是将事件处理的逻辑放到<code>onTouchEvent()</code>当中，而分发和拦截只发挥自己应有的作用即可。<br>这里我就不贴View(ViewGroup)的<code>onTouchEvent()</code>的源码了，想看的同学可自行打开View搜索<code>onToucEvent()</code>。</p>\n<h2 id=\"四-总结\"><a href=\"#四-总结\" class=\"headerlink\" title=\"四.总结\"></a>四.总结</h2><p>到这里，三者的各个方法的分析已经结束了，我想最后再简单总结一下：               </p>\n<p>1、Activity的<code>dispatchTouchEvent()</code>不可修改返回值，否则将导致整个Activity都无法接收事件，不管修改后返回true或是false。    </p>\n<p>2、在Activity中我们可以重写<code>onUserInteraction()</code>方法，来在整个事件流响应之前做自己想做的事情。    </p>\n<p>3、一个事件的传递过程默认总是从Activity的<code>dispatchTouchEvent()</code>开始，到View的<code>onTouchEvent()</code>结束，注意，这里是默认。     </p>\n<p>4、ViewGroup可以拦截事件交给自己的<code>onTouchEvent()</code>处理，如果自己的<code>onTouchEvent()</code>返回false，则事件不会消失，会继续向外层传递，如果一直没有被消费，那么事件传递到Activity的<code>onTouchEvent()</code>才会消失。      </p>\n<p>5、ViewGroup的<code>onInterceptTouchEvent()</code>不会在每次事件都调用，整个事件流只会在down事件或是第一次接触到事件时调用，所以不要在该方法中做事件逻辑处理。       </p>\n<p>6、三者的<code>onTouchEvent()</code>只有View的<code>onTouchEvent()</code>默认消费事件。       </p>\n<hr>\n<p>其实还有很多更深入的东西，这篇文章只是浅显地讲解了一下Android的事件分发机制，希望对各位看官有些帮助！</p>\n<blockquote>\n<p>有任何问题或疑问都可以联系我：<a href=\"mailto:mengyuanzz@126.com\" target=\"_blank\" rel=\"noopener\">mengyuanzz@126.com</a></p>\n</blockquote>\n"},{"title":"建造者模式的全局Dialog","date":"2017-07-11T08:46:12.000Z","_content":"这篇小文将讲述我是如何根据**建造者设计模式**来实现一个全局Dialog。\n[如果各位看官还不太了解建造者设计模式，建议可以看一下我的上篇文章。](http://www.jianshu.com/p/07bed15cd13c)\n\n## 背景 ##\n在每个项目当中，都会封装一些全局的样式，比如全局Loading、全局Dialog等。\n封装这些功能是因为这些控件的使用频率极高。\n在我刚接手项目A的时候，项目A也不例外，拥有着全局的Dialog。\n刚开始时我尽量写一些侵入性低、仿照率高的代码，避免影响到之前的逻辑。并且学习着如何使用项目A的框架，这个过程我相信大家都是一样的。\n当我用到Dialog的时候，我看到了项目A的全局Dialog，详细代码就不说了，给大家看一下项目A全局Dialog中的所有方法：\n\n![](http://7xvzby.com1.z0.glb.clouddn.com/builder_dialog_0.png)\n不知各位看官会不会被这么多的构造方法给吓到。\n这些构造方法都是随着项目需求的增加而增加的。\n大家都知道，一个完整Dialog包括的元素至少应该有：提示图片、标题、描述文字、按钮等。\n但是这些元素都不是必须的：\n在C页面我弹出的Dialog可能只要做一个温馨提示：一行描述文字外加一个确认按钮。\n在D页面我可能弹出的是用户退出登录的二次确认窗口：标题+文字+两个按钮。\n那么到这里，各位看官就能明白了，为什么会有那么多的构造方法。\n没错，我们在**new KLCustimDialog()**的同时，需要把所有的参数都传入进去。\n这种写法的问题以及维护成本之高，我就不做过多描述了，我就简单给大家加个需求：\n要求点击Dialog外部不能取消Dialog。\n想想这个需求下的构造方法，要添加几个？\n\n## 基本 ##\n当我刚看到**建造者模式**的时候，我真是又惊又喜，热血沸腾！\n我第一时间想到的就是重构项目A的全局Dialog！\n大家都知道，Android中的`AlertDialog`就是使用**建造者模式**来实现的。\n在我模仿构思了一波之后，创建Dialog的代码是这样的：\n```\nDialog.Builder builder = new Dialog.Builder(context);\nbuilder.setTitle(\"提示\");\nbuilder.setMessage(\"确认退出登录吗？\");\nbuilder.setLeftText(\"取消\");\nbuilder.setRightText(\"确认\");\nbuilder.setOnclickListener(listener);\nDialog dialog = builder.creater();\ndialog.show();\n```\n这样写似乎没有什么问题了。\n我们把Dialog的所有元素都默认隐藏，在调用某个元素的填充方法后，我们就将其显示出来。\n这样我们就摆脱了无限多的构造方法，完美！\n文章到这里就应该结束了？\n怎么可能！我都没变形呢！\n\n\n我见别人的Builder模式都是这样写的：\n```\nPicasso.with(context)\n    .load(url)\n    .fit()\n    .config(XXX)\n    .placeholder(xxx)\n    .error(xxx)\n    .into(imageView);\n```\n上述代码是使用**Picasso**来加载url图片。\n一行代码完成。\n帅不帅，想不想学？\n所以我就想能不能用上面作为模板，来实现我们的全局Dialog。\n话不多说，说干就干。\n## 变形 ##\n完整代码我已经上传GitHub，看代码我还是建议各位看官去[我的GitHub](https://github.com/YuanTiger/Design-Pattern/blob/master/app/src/main/java/com/my/designdemo/builder/dialog/DialogProduct.java)上看，比较整洁。\n最终实现的效果如下：\n![](http://7xvzby.com1.z0.glb.clouddn.com/dialog_builder_gif.gif)\n首先，让我们来回想一下**建造者模式**的组成：\n- Product：产品角色\n- Builder：抽象的建造者\n- ConcreteBuilder：具体的建造者\n- Director：指挥者\n\n接下来，我们再把这些成员转化为我们的全局Dialog的成员：\n- Product：Dialog就是我们制作出来的产品\n- Builder：Dialog参数拼接抽象\n- ConcreteBuilder：Dialog参数拼接细节\n- Director：所有用到该Dialog的地方都是指挥者，它们决定着Dialog具体样式。\n\n思路有了，下面就开始动手吧，首先我们来创建Dialog的参数封装，里面应该有Dialog所有组成元素：\n```\nprivate static class DialogParams {\n    private Context context;\n    //标题\n    private String title;\n    //标题字体大小\n    private int titleSizeSp;\n    //图标资源\n    private int imageResource;\n    //图标宽\n    private int imageWidth;\n    //图标高\n    private int imageHeight;\n    //消息内容\n    private String message1;\n    //消息内容文字位置\n    private int message1Gravity = Gravity.CENTER;\n    //点击外部是否可以取消\n    private boolean isCanCancel = true;\n    //左边按钮内容\n    private String leftButtonText;\n    //左边按钮颜色\n    private int leftBtColor;\n    //左边点击事件\n    private ConcreteBuilder.ButtonClickLister leftListener;\n    //右边按钮内容\n    private String rightButtontText;\n    //右边边按钮颜色\n    private int rightBtColor;\n    //右边按钮点击事件\n    private ConcreteBuilder.ButtonClickLister rightListener;\n}\n```\n我使用了内部类去实现了整个Dialog，整个Dialog只有一个类，所以所有参数都是private并且没有提供set、get。\n并且我为了方便，省略了Builder抽象类，直接构造了Builder抽象类的实现**ConcreteBuilder**：\n```\n public static class ConcreteBuilder {\n     //持有Product对象\n     private DialogParams p;\n     \n     ConcreteBuilder(Context context) {\n         p = new DialogParams();\n         p.context = context;\n     }\n     public ConcreteBuilder title(String text) {\n         p.title = text;\n         return builder;\n     }\n     public ConcreteBuilder titleSize(int spSize) {\n         p.titleSizeSp = spSize;\n         return builder;\n     }\n     public ConcreteBuilder imageResource(int imageResource) {\n         p.imageResource = imageResource;\n         return builder;\n     }\n     public ConcreteBuilder imageWidth(int imageWidth) {\n         p.imageWidth = imageWidth;\n         return builder;\n     }\n     public ConcreteBuilder imageHeight(int imageHeight) {\n         p.imageHeight = imageHeight;\n         return builder;\n     }\n     public ConcreteBuilder message(String text) {\n         p.message1 = text;\n         return builder;\n     }\n     public ConcreteBuilder messageGravity(int gravity) {\n         p.message1Gravity = gravity;\n         return builder;\n     }\n     public ConcreteBuilder canCancel(boolean isCanCancel) {\n         p.isCanCancel = isCanCancel;\n         return builder;\n     }\n     public ConcreteBuilder leftBt(String text, ButtonClickLister lister) {\n         p.leftButtonText = text;\n         p.leftListener = lister;\n         return builder;\n     }\n     public ConcreteBuilder leftBtColor(int color) {\n         p.leftBtColor = color;\n         return builder;\n     }\n     public ConcreteBuilder rightBtColor(int color) {\n         p.rightBtColor = color;\n         return builder;\n     }\n     public ConcreteBuilder rightBt(String text, ButtonClickLister lister) {\n         p.rightButtontText = text;\n         p.rightListener = lister;\n         return builder;\n     }\n     void clear() {\n         p = null;\n     }\n     public DialogProduct create() {\n         return new DialogProduct(p);\n     }\n     //按钮点击回调\n     public interface ButtonClickLister {\n         void onClick(DialogProduct dialog);\n     }\n }\n```\n我们会发现每个参数拼接方法都会返回**ConcreteBuilder**,这里是实现一行代码构建Dialog的关键。\n参考**Picasso**的书写方式，明显可以看出它没有进行new的行为，说明**with()**一定是静态的，随之**with()**返回的对象也必为静态。\n为了实现**Picasso**的书写方式，我们这里也将**ConcreteBuilder**静态，方便实现一句话创建Dialog。\n接下来就是Dialog的代码：\n```\npublic class DialogProduct extends Dialog {\n\n    private TextView tvTitle;\n    private ImageView ivIcon;\n    private TextView tvMessage;\n    private TextView tvButtonLeft;\n    private TextView tvButtonRight;\n    private ImageView viewLine;\n\n    //持有Builder\n    private static ConcreteBuilder builder;\n\n    //模仿Picasso的书写方式\n    public static ConcreteBuilder with(Context context) {\n        if (builder == null) {\n            builder = new ConcreteBuilder(context);\n        }\n        return builder;\n    }\n\n\n    private DialogProduct(DialogParams p) {\n        //设置没有标题的Dialog风格\n        super(p.context, R.style.NoTitleDialog);\n\n        View contentView = LayoutInflater.from(p.context).inflate(R.layout.dialog_build, null);\n        setContentView(contentView);\n\n        tvTitle = contentView.findViewById(R.id.tv_title);\n        ivIcon = contentView.findViewById(R.id.iv_icon);\n        tvMessage = contentView.findViewById(R.id.tv_message);\n        tvButtonLeft = contentView.findViewById(R.id.tv_button_left);\n        tvButtonRight = contentView.findViewById(R.id.tv_button_right);\n        viewLine = contentView.findViewById(R.id.view_line);\n\n        //控件默认隐藏\n        tvTitle.setVisibility(View.GONE);\n        viewLine.setVisibility(View.GONE);\n        ivIcon.setVisibility(View.GONE);\n        tvMessage.setVisibility(View.GONE);\n        tvButtonLeft.setVisibility(View.GONE);\n        tvButtonRight.setVisibility(View.GONE);\n        //构建Dialog\n        setTitlText(p.title);\n        setTitlTextSize(p.titleSizeSp);\n        setImageResource(p.imageResource);\n        setImageWidth(p.imageWidth);\n        setImageHeight(p.imageHeight);\n        setTvMessage(p.message1);\n        setTvMessageGravity(p.message1Gravity);\n        setCancelableFlag(p.isCanCancel);\n        setLeftText(p.leftButtonText, p.leftListener);\n        setLeftBtColor(p.leftBtColor);\n        setRightText(p.rightButtontText, p.rightListener);\n        setRightBtColor(p.rightBtColor);\n\n\n    }\n     /**\n     * 设置标题\n     *\n     * @param title 标题文字\n     */\n    private void setTitlText(String title) {\n        if (TextUtils.isEmpty(title)) {\n            return;\n        }\n        tvTitle.setVisibility(View.VISIBLE);\n        tvTitle.setText(title);\n    }\n    //......省略剩余控件代码\n}\n```\n写完之后，我们来看看这个变形的**建造者模式**的Dialog是如何创建的：\n```\nDialogProduct.with(this)\n        .title(\"提示\")\n        .message(\"您确认退出登录吗？\")\n        .canCancel(false)\n        .leftBtColor(getResources().getColor(R.color.color_0090ff))\n        .rightBtColor(getResources().getColor(R.color.color_f96c59))\n        .leftBt(\"取消\", new NormalDialog.ConcreteBuilder.ButtonClickLister() {\n            @Override\n            public void onClick(NormalDialog dialog) {\n                dialog.cancel();\n            }\n        })\n        .rightBt(\"确认\", new NormalDialog.ConcreteBuilder.ButtonClickLister() {\n            @Override\n            public void onClick(NormalDialog dialog) {\n                Toast.makeText(BuilderActivity.this, \"退出登录成功！\", Toast.LENGTH_SHORT).show();\n                dialog.cancel();\n            }\n        })\n        .create()\n        .show();\n```\n\n## 总结 ##\n[DialogProduct的代码我已经上传到了GitHub](https://github.com/YuanTiger/Design-Pattern/blob/master/app/src/main/java/com/my/designdemo/builder/dialog/DialogProduct.java)，各位看官可以自行食用。\n这个Dialog现在也是项目A中的全局Dialog，使用起来也非常方便。\n这里有几个细节可以和各位看官分享一下：\n第一个就是按钮的点击事件设置，我将其与按钮文字内容的设置绑定在一起。因为我认为你设置了按钮，怎么可能会没有点击事件？\n第二个就是按钮中间的分割线，是与右边按钮绑定的， 所以当只有一个按钮时，我们应该使用左边的按钮**leftBt**而不是右边的。\n基本上就是这样啦！\n希望这个Dialog可以给大家带来一些灵感。","source":"_posts/Builder-Dialog.md","raw":"---\ntitle: 建造者模式的全局Dialog\ndate: 2017-07-11 16:46:12\ntags:\n   - 编程思想\n   - Android\n   - 效果\n---\n这篇小文将讲述我是如何根据**建造者设计模式**来实现一个全局Dialog。\n[如果各位看官还不太了解建造者设计模式，建议可以看一下我的上篇文章。](http://www.jianshu.com/p/07bed15cd13c)\n\n## 背景 ##\n在每个项目当中，都会封装一些全局的样式，比如全局Loading、全局Dialog等。\n封装这些功能是因为这些控件的使用频率极高。\n在我刚接手项目A的时候，项目A也不例外，拥有着全局的Dialog。\n刚开始时我尽量写一些侵入性低、仿照率高的代码，避免影响到之前的逻辑。并且学习着如何使用项目A的框架，这个过程我相信大家都是一样的。\n当我用到Dialog的时候，我看到了项目A的全局Dialog，详细代码就不说了，给大家看一下项目A全局Dialog中的所有方法：\n\n![](http://7xvzby.com1.z0.glb.clouddn.com/builder_dialog_0.png)\n不知各位看官会不会被这么多的构造方法给吓到。\n这些构造方法都是随着项目需求的增加而增加的。\n大家都知道，一个完整Dialog包括的元素至少应该有：提示图片、标题、描述文字、按钮等。\n但是这些元素都不是必须的：\n在C页面我弹出的Dialog可能只要做一个温馨提示：一行描述文字外加一个确认按钮。\n在D页面我可能弹出的是用户退出登录的二次确认窗口：标题+文字+两个按钮。\n那么到这里，各位看官就能明白了，为什么会有那么多的构造方法。\n没错，我们在**new KLCustimDialog()**的同时，需要把所有的参数都传入进去。\n这种写法的问题以及维护成本之高，我就不做过多描述了，我就简单给大家加个需求：\n要求点击Dialog外部不能取消Dialog。\n想想这个需求下的构造方法，要添加几个？\n\n## 基本 ##\n当我刚看到**建造者模式**的时候，我真是又惊又喜，热血沸腾！\n我第一时间想到的就是重构项目A的全局Dialog！\n大家都知道，Android中的`AlertDialog`就是使用**建造者模式**来实现的。\n在我模仿构思了一波之后，创建Dialog的代码是这样的：\n```\nDialog.Builder builder = new Dialog.Builder(context);\nbuilder.setTitle(\"提示\");\nbuilder.setMessage(\"确认退出登录吗？\");\nbuilder.setLeftText(\"取消\");\nbuilder.setRightText(\"确认\");\nbuilder.setOnclickListener(listener);\nDialog dialog = builder.creater();\ndialog.show();\n```\n这样写似乎没有什么问题了。\n我们把Dialog的所有元素都默认隐藏，在调用某个元素的填充方法后，我们就将其显示出来。\n这样我们就摆脱了无限多的构造方法，完美！\n文章到这里就应该结束了？\n怎么可能！我都没变形呢！\n\n\n我见别人的Builder模式都是这样写的：\n```\nPicasso.with(context)\n    .load(url)\n    .fit()\n    .config(XXX)\n    .placeholder(xxx)\n    .error(xxx)\n    .into(imageView);\n```\n上述代码是使用**Picasso**来加载url图片。\n一行代码完成。\n帅不帅，想不想学？\n所以我就想能不能用上面作为模板，来实现我们的全局Dialog。\n话不多说，说干就干。\n## 变形 ##\n完整代码我已经上传GitHub，看代码我还是建议各位看官去[我的GitHub](https://github.com/YuanTiger/Design-Pattern/blob/master/app/src/main/java/com/my/designdemo/builder/dialog/DialogProduct.java)上看，比较整洁。\n最终实现的效果如下：\n![](http://7xvzby.com1.z0.glb.clouddn.com/dialog_builder_gif.gif)\n首先，让我们来回想一下**建造者模式**的组成：\n- Product：产品角色\n- Builder：抽象的建造者\n- ConcreteBuilder：具体的建造者\n- Director：指挥者\n\n接下来，我们再把这些成员转化为我们的全局Dialog的成员：\n- Product：Dialog就是我们制作出来的产品\n- Builder：Dialog参数拼接抽象\n- ConcreteBuilder：Dialog参数拼接细节\n- Director：所有用到该Dialog的地方都是指挥者，它们决定着Dialog具体样式。\n\n思路有了，下面就开始动手吧，首先我们来创建Dialog的参数封装，里面应该有Dialog所有组成元素：\n```\nprivate static class DialogParams {\n    private Context context;\n    //标题\n    private String title;\n    //标题字体大小\n    private int titleSizeSp;\n    //图标资源\n    private int imageResource;\n    //图标宽\n    private int imageWidth;\n    //图标高\n    private int imageHeight;\n    //消息内容\n    private String message1;\n    //消息内容文字位置\n    private int message1Gravity = Gravity.CENTER;\n    //点击外部是否可以取消\n    private boolean isCanCancel = true;\n    //左边按钮内容\n    private String leftButtonText;\n    //左边按钮颜色\n    private int leftBtColor;\n    //左边点击事件\n    private ConcreteBuilder.ButtonClickLister leftListener;\n    //右边按钮内容\n    private String rightButtontText;\n    //右边边按钮颜色\n    private int rightBtColor;\n    //右边按钮点击事件\n    private ConcreteBuilder.ButtonClickLister rightListener;\n}\n```\n我使用了内部类去实现了整个Dialog，整个Dialog只有一个类，所以所有参数都是private并且没有提供set、get。\n并且我为了方便，省略了Builder抽象类，直接构造了Builder抽象类的实现**ConcreteBuilder**：\n```\n public static class ConcreteBuilder {\n     //持有Product对象\n     private DialogParams p;\n     \n     ConcreteBuilder(Context context) {\n         p = new DialogParams();\n         p.context = context;\n     }\n     public ConcreteBuilder title(String text) {\n         p.title = text;\n         return builder;\n     }\n     public ConcreteBuilder titleSize(int spSize) {\n         p.titleSizeSp = spSize;\n         return builder;\n     }\n     public ConcreteBuilder imageResource(int imageResource) {\n         p.imageResource = imageResource;\n         return builder;\n     }\n     public ConcreteBuilder imageWidth(int imageWidth) {\n         p.imageWidth = imageWidth;\n         return builder;\n     }\n     public ConcreteBuilder imageHeight(int imageHeight) {\n         p.imageHeight = imageHeight;\n         return builder;\n     }\n     public ConcreteBuilder message(String text) {\n         p.message1 = text;\n         return builder;\n     }\n     public ConcreteBuilder messageGravity(int gravity) {\n         p.message1Gravity = gravity;\n         return builder;\n     }\n     public ConcreteBuilder canCancel(boolean isCanCancel) {\n         p.isCanCancel = isCanCancel;\n         return builder;\n     }\n     public ConcreteBuilder leftBt(String text, ButtonClickLister lister) {\n         p.leftButtonText = text;\n         p.leftListener = lister;\n         return builder;\n     }\n     public ConcreteBuilder leftBtColor(int color) {\n         p.leftBtColor = color;\n         return builder;\n     }\n     public ConcreteBuilder rightBtColor(int color) {\n         p.rightBtColor = color;\n         return builder;\n     }\n     public ConcreteBuilder rightBt(String text, ButtonClickLister lister) {\n         p.rightButtontText = text;\n         p.rightListener = lister;\n         return builder;\n     }\n     void clear() {\n         p = null;\n     }\n     public DialogProduct create() {\n         return new DialogProduct(p);\n     }\n     //按钮点击回调\n     public interface ButtonClickLister {\n         void onClick(DialogProduct dialog);\n     }\n }\n```\n我们会发现每个参数拼接方法都会返回**ConcreteBuilder**,这里是实现一行代码构建Dialog的关键。\n参考**Picasso**的书写方式，明显可以看出它没有进行new的行为，说明**with()**一定是静态的，随之**with()**返回的对象也必为静态。\n为了实现**Picasso**的书写方式，我们这里也将**ConcreteBuilder**静态，方便实现一句话创建Dialog。\n接下来就是Dialog的代码：\n```\npublic class DialogProduct extends Dialog {\n\n    private TextView tvTitle;\n    private ImageView ivIcon;\n    private TextView tvMessage;\n    private TextView tvButtonLeft;\n    private TextView tvButtonRight;\n    private ImageView viewLine;\n\n    //持有Builder\n    private static ConcreteBuilder builder;\n\n    //模仿Picasso的书写方式\n    public static ConcreteBuilder with(Context context) {\n        if (builder == null) {\n            builder = new ConcreteBuilder(context);\n        }\n        return builder;\n    }\n\n\n    private DialogProduct(DialogParams p) {\n        //设置没有标题的Dialog风格\n        super(p.context, R.style.NoTitleDialog);\n\n        View contentView = LayoutInflater.from(p.context).inflate(R.layout.dialog_build, null);\n        setContentView(contentView);\n\n        tvTitle = contentView.findViewById(R.id.tv_title);\n        ivIcon = contentView.findViewById(R.id.iv_icon);\n        tvMessage = contentView.findViewById(R.id.tv_message);\n        tvButtonLeft = contentView.findViewById(R.id.tv_button_left);\n        tvButtonRight = contentView.findViewById(R.id.tv_button_right);\n        viewLine = contentView.findViewById(R.id.view_line);\n\n        //控件默认隐藏\n        tvTitle.setVisibility(View.GONE);\n        viewLine.setVisibility(View.GONE);\n        ivIcon.setVisibility(View.GONE);\n        tvMessage.setVisibility(View.GONE);\n        tvButtonLeft.setVisibility(View.GONE);\n        tvButtonRight.setVisibility(View.GONE);\n        //构建Dialog\n        setTitlText(p.title);\n        setTitlTextSize(p.titleSizeSp);\n        setImageResource(p.imageResource);\n        setImageWidth(p.imageWidth);\n        setImageHeight(p.imageHeight);\n        setTvMessage(p.message1);\n        setTvMessageGravity(p.message1Gravity);\n        setCancelableFlag(p.isCanCancel);\n        setLeftText(p.leftButtonText, p.leftListener);\n        setLeftBtColor(p.leftBtColor);\n        setRightText(p.rightButtontText, p.rightListener);\n        setRightBtColor(p.rightBtColor);\n\n\n    }\n     /**\n     * 设置标题\n     *\n     * @param title 标题文字\n     */\n    private void setTitlText(String title) {\n        if (TextUtils.isEmpty(title)) {\n            return;\n        }\n        tvTitle.setVisibility(View.VISIBLE);\n        tvTitle.setText(title);\n    }\n    //......省略剩余控件代码\n}\n```\n写完之后，我们来看看这个变形的**建造者模式**的Dialog是如何创建的：\n```\nDialogProduct.with(this)\n        .title(\"提示\")\n        .message(\"您确认退出登录吗？\")\n        .canCancel(false)\n        .leftBtColor(getResources().getColor(R.color.color_0090ff))\n        .rightBtColor(getResources().getColor(R.color.color_f96c59))\n        .leftBt(\"取消\", new NormalDialog.ConcreteBuilder.ButtonClickLister() {\n            @Override\n            public void onClick(NormalDialog dialog) {\n                dialog.cancel();\n            }\n        })\n        .rightBt(\"确认\", new NormalDialog.ConcreteBuilder.ButtonClickLister() {\n            @Override\n            public void onClick(NormalDialog dialog) {\n                Toast.makeText(BuilderActivity.this, \"退出登录成功！\", Toast.LENGTH_SHORT).show();\n                dialog.cancel();\n            }\n        })\n        .create()\n        .show();\n```\n\n## 总结 ##\n[DialogProduct的代码我已经上传到了GitHub](https://github.com/YuanTiger/Design-Pattern/blob/master/app/src/main/java/com/my/designdemo/builder/dialog/DialogProduct.java)，各位看官可以自行食用。\n这个Dialog现在也是项目A中的全局Dialog，使用起来也非常方便。\n这里有几个细节可以和各位看官分享一下：\n第一个就是按钮的点击事件设置，我将其与按钮文字内容的设置绑定在一起。因为我认为你设置了按钮，怎么可能会没有点击事件？\n第二个就是按钮中间的分割线，是与右边按钮绑定的， 所以当只有一个按钮时，我们应该使用左边的按钮**leftBt**而不是右边的。\n基本上就是这样啦！\n希望这个Dialog可以给大家带来一些灵感。","slug":"Builder-Dialog","published":1,"updated":"2018-08-24T09:36:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7sxdvw000ahnnftw4roclh","content":"<p>这篇小文将讲述我是如何根据<strong>建造者设计模式</strong>来实现一个全局Dialog。<br><a href=\"http://www.jianshu.com/p/07bed15cd13c\" target=\"_blank\" rel=\"noopener\">如果各位看官还不太了解建造者设计模式，建议可以看一下我的上篇文章。</a></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在每个项目当中，都会封装一些全局的样式，比如全局Loading、全局Dialog等。<br>封装这些功能是因为这些控件的使用频率极高。<br>在我刚接手项目A的时候，项目A也不例外，拥有着全局的Dialog。<br>刚开始时我尽量写一些侵入性低、仿照率高的代码，避免影响到之前的逻辑。并且学习着如何使用项目A的框架，这个过程我相信大家都是一样的。<br>当我用到Dialog的时候，我看到了项目A的全局Dialog，详细代码就不说了，给大家看一下项目A全局Dialog中的所有方法：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/builder_dialog_0.png\" alt=\"\"><br>不知各位看官会不会被这么多的构造方法给吓到。<br>这些构造方法都是随着项目需求的增加而增加的。<br>大家都知道，一个完整Dialog包括的元素至少应该有：提示图片、标题、描述文字、按钮等。<br>但是这些元素都不是必须的：<br>在C页面我弹出的Dialog可能只要做一个温馨提示：一行描述文字外加一个确认按钮。<br>在D页面我可能弹出的是用户退出登录的二次确认窗口：标题+文字+两个按钮。<br>那么到这里，各位看官就能明白了，为什么会有那么多的构造方法。<br>没错，我们在<strong>new KLCustimDialog()</strong>的同时，需要把所有的参数都传入进去。<br>这种写法的问题以及维护成本之高，我就不做过多描述了，我就简单给大家加个需求：<br>要求点击Dialog外部不能取消Dialog。<br>想想这个需求下的构造方法，要添加几个？</p>\n<h2 id=\"基本\"><a href=\"#基本\" class=\"headerlink\" title=\"基本\"></a>基本</h2><p>当我刚看到<strong>建造者模式</strong>的时候，我真是又惊又喜，热血沸腾！<br>我第一时间想到的就是重构项目A的全局Dialog！<br>大家都知道，Android中的<code>AlertDialog</code>就是使用<strong>建造者模式</strong>来实现的。<br>在我模仿构思了一波之后，创建Dialog的代码是这样的：<br><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dialog.Builder builder = new Dialog.Builder(context)<span class=\"comment\">;</span></span><br><span class=\"line\">builder.setTitle(<span class=\"string\">\"提示\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">builder.setMessage(<span class=\"string\">\"确认退出登录吗？\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">builder.setLeftText(<span class=\"string\">\"取消\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">builder.setRightText(<span class=\"string\">\"确认\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">builder.setOnclickListener(listener)<span class=\"comment\">;</span></span><br><span class=\"line\">Dialog dialog = builder.creater()<span class=\"comment\">;</span></span><br><span class=\"line\">dialog.show()<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure></p>\n<p>这样写似乎没有什么问题了。<br>我们把Dialog的所有元素都默认隐藏，在调用某个元素的填充方法后，我们就将其显示出来。<br>这样我们就摆脱了无限多的构造方法，完美！<br>文章到这里就应该结束了？<br>怎么可能！我都没变形呢！</p>\n<p>我见别人的Builder模式都是这样写的：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">Picasso</span><span class=\"selector-class\">.with</span>(<span class=\"selector-tag\">context</span>)</span><br><span class=\"line\">    <span class=\"selector-class\">.load</span>(<span class=\"selector-tag\">url</span>)</span><br><span class=\"line\">    <span class=\"selector-class\">.fit</span>()</span><br><span class=\"line\">    <span class=\"selector-class\">.config</span>(<span class=\"selector-tag\">XXX</span>)</span><br><span class=\"line\">    <span class=\"selector-class\">.placeholder</span>(<span class=\"selector-tag\">xxx</span>)</span><br><span class=\"line\">    <span class=\"selector-class\">.error</span>(<span class=\"selector-tag\">xxx</span>)</span><br><span class=\"line\">    <span class=\"selector-class\">.into</span>(<span class=\"selector-tag\">imageView</span>);</span><br></pre></td></tr></table></figure></p>\n<p>上述代码是使用<strong>Picasso</strong>来加载url图片。<br>一行代码完成。<br>帅不帅，想不想学？<br>所以我就想能不能用上面作为模板，来实现我们的全局Dialog。<br>话不多说，说干就干。</p>\n<h2 id=\"变形\"><a href=\"#变形\" class=\"headerlink\" title=\"变形\"></a>变形</h2><p>完整代码我已经上传GitHub，看代码我还是建议各位看官去<a href=\"https://github.com/YuanTiger/Design-Pattern/blob/master/app/src/main/java/com/my/designdemo/builder/dialog/DialogProduct.java\" target=\"_blank\" rel=\"noopener\">我的GitHub</a>上看，比较整洁。<br>最终实现的效果如下：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/dialog_builder_gif.gif\" alt=\"\"><br>首先，让我们来回想一下<strong>建造者模式</strong>的组成：</p>\n<ul>\n<li>Product：产品角色</li>\n<li>Builder：抽象的建造者</li>\n<li>ConcreteBuilder：具体的建造者</li>\n<li>Director：指挥者</li>\n</ul>\n<p>接下来，我们再把这些成员转化为我们的全局Dialog的成员：</p>\n<ul>\n<li>Product：Dialog就是我们制作出来的产品</li>\n<li>Builder：Dialog参数拼接抽象</li>\n<li>ConcreteBuilder：Dialog参数拼接细节</li>\n<li>Director：所有用到该Dialog的地方都是指挥者，它们决定着Dialog具体样式。</li>\n</ul>\n<p>思路有了，下面就开始动手吧，首先我们来创建Dialog的参数封装，里面应该有Dialog所有组成元素：<br><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> class DialogParams &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Context context;</span><br><span class=\"line\">    <span class=\"comment\">//标题</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">String</span> title;</span><br><span class=\"line\">    <span class=\"comment\">//标题字体大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> titleSizeSp;</span><br><span class=\"line\">    <span class=\"comment\">//图标资源</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> imageResource;</span><br><span class=\"line\">    <span class=\"comment\">//图标宽</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> imageWidth;</span><br><span class=\"line\">    <span class=\"comment\">//图标高</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> imageHeight;</span><br><span class=\"line\">    <span class=\"comment\">//消息内容</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">String</span> message1;</span><br><span class=\"line\">    <span class=\"comment\">//消息内容文字位置</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> message1Gravity = Gravity.CENTER;</span><br><span class=\"line\">    <span class=\"comment\">//点击外部是否可以取消</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">boolean</span> isCanCancel = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">//左边按钮内容</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">String</span> leftButtonText;</span><br><span class=\"line\">    <span class=\"comment\">//左边按钮颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> leftBtColor;</span><br><span class=\"line\">    <span class=\"comment\">//左边点击事件</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConcreteBuilder.ButtonClickLister leftListener;</span><br><span class=\"line\">    <span class=\"comment\">//右边按钮内容</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">String</span> rightButtontText;</span><br><span class=\"line\">    <span class=\"comment\">//右边边按钮颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> rightBtColor;</span><br><span class=\"line\">    <span class=\"comment\">//右边按钮点击事件</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConcreteBuilder.ButtonClickLister rightListener;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我使用了内部类去实现了整个Dialog，整个Dialog只有一个类，所以所有参数都是private并且没有提供set、get。<br>并且我为了方便，省略了Builder抽象类，直接构造了Builder抽象类的实现<strong>ConcreteBuilder</strong>：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteBuilder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//持有Product对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DialogParams p;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ConcreteBuilder(Context context) &#123;</span><br><span class=\"line\">        p = <span class=\"keyword\">new</span> DialogParams();</span><br><span class=\"line\">        p.context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConcreteBuilder <span class=\"title\">title</span><span class=\"params\">(String text)</span> </span>&#123;</span><br><span class=\"line\">        p.title = text;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConcreteBuilder <span class=\"title\">titleSize</span><span class=\"params\">(<span class=\"keyword\">int</span> spSize)</span> </span>&#123;</span><br><span class=\"line\">        p.titleSizeSp = spSize;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConcreteBuilder <span class=\"title\">imageResource</span><span class=\"params\">(<span class=\"keyword\">int</span> imageResource)</span> </span>&#123;</span><br><span class=\"line\">        p.imageResource = imageResource;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConcreteBuilder <span class=\"title\">imageWidth</span><span class=\"params\">(<span class=\"keyword\">int</span> imageWidth)</span> </span>&#123;</span><br><span class=\"line\">        p.imageWidth = imageWidth;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConcreteBuilder <span class=\"title\">imageHeight</span><span class=\"params\">(<span class=\"keyword\">int</span> imageHeight)</span> </span>&#123;</span><br><span class=\"line\">        p.imageHeight = imageHeight;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConcreteBuilder <span class=\"title\">message</span><span class=\"params\">(String text)</span> </span>&#123;</span><br><span class=\"line\">        p.message1 = text;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConcreteBuilder <span class=\"title\">messageGravity</span><span class=\"params\">(<span class=\"keyword\">int</span> gravity)</span> </span>&#123;</span><br><span class=\"line\">        p.message1Gravity = gravity;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConcreteBuilder <span class=\"title\">canCancel</span><span class=\"params\">(<span class=\"keyword\">boolean</span> isCanCancel)</span> </span>&#123;</span><br><span class=\"line\">        p.isCanCancel = isCanCancel;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConcreteBuilder <span class=\"title\">leftBt</span><span class=\"params\">(String text, ButtonClickLister lister)</span> </span>&#123;</span><br><span class=\"line\">        p.leftButtonText = text;</span><br><span class=\"line\">        p.leftListener = lister;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConcreteBuilder <span class=\"title\">leftBtColor</span><span class=\"params\">(<span class=\"keyword\">int</span> color)</span> </span>&#123;</span><br><span class=\"line\">        p.leftBtColor = color;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConcreteBuilder <span class=\"title\">rightBtColor</span><span class=\"params\">(<span class=\"keyword\">int</span> color)</span> </span>&#123;</span><br><span class=\"line\">        p.rightBtColor = color;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConcreteBuilder <span class=\"title\">rightBt</span><span class=\"params\">(String text, ButtonClickLister lister)</span> </span>&#123;</span><br><span class=\"line\">        p.rightButtontText = text;</span><br><span class=\"line\">        p.rightListener = lister;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        p = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DialogProduct <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DialogProduct(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//按钮点击回调</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ButtonClickLister</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogProduct dialog)</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们会发现每个参数拼接方法都会返回<strong>ConcreteBuilder</strong>,这里是实现一行代码构建Dialog的关键。<br>参考<strong>Picasso</strong>的书写方式，明显可以看出它没有进行new的行为，说明<strong>with()</strong>一定是静态的，随之<strong>with()</strong>返回的对象也必为静态。<br>为了实现<strong>Picasso</strong>的书写方式，我们这里也将<strong>ConcreteBuilder</strong>静态，方便实现一句话创建Dialog。<br>接下来就是Dialog的代码：<br><figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DialogProduct</span> <span class=\"title\">extends</span> <span class=\"title\">Dialog</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    private <span class=\"type\">TextView</span> tvTitle;</span><br><span class=\"line\">    private <span class=\"type\">ImageView</span> ivIcon;</span><br><span class=\"line\">    private <span class=\"type\">TextView</span> tvMessage;</span><br><span class=\"line\">    private <span class=\"type\">TextView</span> tvButtonLeft;</span><br><span class=\"line\">    private <span class=\"type\">TextView</span> tvButtonRight;</span><br><span class=\"line\">    private <span class=\"type\">ImageView</span> viewLine;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//持有Builder</span></span><br><span class=\"line\">    private static <span class=\"type\">ConcreteBuilder</span> builder;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//模仿Picasso的书写方式</span></span><br><span class=\"line\">    public static <span class=\"type\">ConcreteBuilder</span> <span class=\"keyword\">with</span>(<span class=\"type\">Context</span> context) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (builder == null) &#123;</span><br><span class=\"line\">            builder = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">ConcreteBuilder</span>(context);</span></span><br><span class=\"line\"><span class=\"function\">        &#125;</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">return</span> <span class=\"title\">builder</span>;</span></span><br><span class=\"line\"><span class=\"function\">    &#125;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">private</span> <span class=\"title\">DialogProduct</span>(<span class=\"type\">DialogParams</span> p) &#123;</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"comment\">//设置没有标题的Dialog风格</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">super</span>(p.context, <span class=\"type\">R</span>.style.<span class=\"type\">NoTitleDialog</span>);</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">View</span> <span class=\"title\">contentView</span> = <span class=\"title\">LayoutInflater</span>.<span class=\"title\">from</span>(p.context).<span class=\"title\">inflate</span>(<span class=\"type\">R</span>.layout.dialog_build, null);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setContentView</span>(contentView);</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">tvTitle</span> = <span class=\"title\">contentView</span>.<span class=\"title\">findViewById</span>(<span class=\"type\">R</span>.id.tv_title);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">ivIcon</span> = <span class=\"title\">contentView</span>.<span class=\"title\">findViewById</span>(<span class=\"type\">R</span>.id.iv_icon);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">tvMessage</span> = <span class=\"title\">contentView</span>.<span class=\"title\">findViewById</span>(<span class=\"type\">R</span>.id.tv_message);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">tvButtonLeft</span> = <span class=\"title\">contentView</span>.<span class=\"title\">findViewById</span>(<span class=\"type\">R</span>.id.tv_button_left);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">tvButtonRight</span> = <span class=\"title\">contentView</span>.<span class=\"title\">findViewById</span>(<span class=\"type\">R</span>.id.tv_button_right);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">viewLine</span> = <span class=\"title\">contentView</span>.<span class=\"title\">findViewById</span>(<span class=\"type\">R</span>.id.view_line);</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"comment\">//控件默认隐藏</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">tvTitle</span>.<span class=\"title\">setVisibility</span>(<span class=\"type\">View</span>.<span class=\"type\">GONE</span>);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">viewLine</span>.<span class=\"title\">setVisibility</span>(<span class=\"type\">View</span>.<span class=\"type\">GONE</span>);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">ivIcon</span>.<span class=\"title\">setVisibility</span>(<span class=\"type\">View</span>.<span class=\"type\">GONE</span>);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">tvMessage</span>.<span class=\"title\">setVisibility</span>(<span class=\"type\">View</span>.<span class=\"type\">GONE</span>);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">tvButtonLeft</span>.<span class=\"title\">setVisibility</span>(<span class=\"type\">View</span>.<span class=\"type\">GONE</span>);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">tvButtonRight</span>.<span class=\"title\">setVisibility</span>(<span class=\"type\">View</span>.<span class=\"type\">GONE</span>);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"comment\">//构建Dialog</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setTitlText</span>(p.title);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setTitlTextSize</span>(p.titleSizeSp);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setImageResource</span>(p.imageResource);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setImageWidth</span>(p.imageWidth);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setImageHeight</span>(p.imageHeight);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setTvMessage</span>(p.message1);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setTvMessageGravity</span>(p.message1Gravity);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setCancelableFlag</span>(p.isCanCancel);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setLeftText</span>(p.leftButtonText, p.leftListener);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setLeftBtColor</span>(p.leftBtColor);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setRightText</span>(p.rightButtontText, p.rightListener);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setRightBtColor</span>(p.rightBtColor);</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">    &#125;</span></span><br><span class=\"line\"><span class=\"function\">     /**</span></span><br><span class=\"line\"><span class=\"function\">     * 设置标题</span></span><br><span class=\"line\"><span class=\"function\">     *</span></span><br><span class=\"line\"><span class=\"function\">     * @<span class=\"title\">param</span> <span class=\"title\">title</span> 标题文字</span></span><br><span class=\"line\"><span class=\"function\">     */</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">private</span> <span class=\"title\">void</span> <span class=\"title\">setTitlText</span>(<span class=\"type\">String</span> title) &#123;</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">if</span> (<span class=\"type\">TextUtils</span>.isEmpty(title)) &#123;</span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"title\">return</span>;</span></span><br><span class=\"line\"><span class=\"function\">        &#125;</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">tvTitle</span>.<span class=\"title\">setVisibility</span>(<span class=\"type\">View</span>.<span class=\"type\">VISIBLE</span>);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">tvTitle</span>.<span class=\"title\">setText</span>(title);</span></span><br><span class=\"line\"><span class=\"function\">    &#125;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"comment\">//......省略剩余控件代码</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>写完之后，我们来看看这个变形的<strong>建造者模式</strong>的Dialog是如何创建的：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">DialogProduct</span><span class=\"selector-class\">.with</span>(this)</span><br><span class=\"line\">        <span class=\"selector-class\">.title</span>(<span class=\"string\">\"提示\"</span>)</span><br><span class=\"line\">        <span class=\"selector-class\">.message</span>(<span class=\"string\">\"您确认退出登录吗？\"</span>)</span><br><span class=\"line\">        <span class=\"selector-class\">.canCancel</span>(false)</span><br><span class=\"line\">        <span class=\"selector-class\">.leftBtColor</span>(getResources().getColor(R.color.color_0090ff))</span><br><span class=\"line\">        <span class=\"selector-class\">.rightBtColor</span>(getResources().getColor(R.color.color_f96c59))</span><br><span class=\"line\">        <span class=\"selector-class\">.leftBt</span>(<span class=\"string\">\"取消\"</span>, new NormalDialog.ConcreteBuilder.ButtonClickLister() &#123;</span><br><span class=\"line\">            <span class=\"variable\">@Override</span></span><br><span class=\"line\">            public void onClick(NormalDialog dialog) &#123;</span><br><span class=\"line\">                <span class=\"selector-tag\">dialog</span><span class=\"selector-class\">.cancel</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.rightBt</span>(<span class=\"string\">\"确认\"</span>, new NormalDialog.ConcreteBuilder.ButtonClickLister() &#123;</span><br><span class=\"line\">            <span class=\"variable\">@Override</span></span><br><span class=\"line\">            public void onClick(NormalDialog dialog) &#123;</span><br><span class=\"line\">                <span class=\"selector-tag\">Toast</span><span class=\"selector-class\">.makeText</span>(BuilderActivity.this, <span class=\"string\">\"退出登录成功！\"</span>, Toast.LENGTH_SHORT)<span class=\"selector-class\">.show</span>();</span><br><span class=\"line\">                <span class=\"selector-tag\">dialog</span><span class=\"selector-class\">.cancel</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.create</span>()</span><br><span class=\"line\">        <span class=\"selector-class\">.show</span>();</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><a href=\"https://github.com/YuanTiger/Design-Pattern/blob/master/app/src/main/java/com/my/designdemo/builder/dialog/DialogProduct.java\" target=\"_blank\" rel=\"noopener\">DialogProduct的代码我已经上传到了GitHub</a>，各位看官可以自行食用。<br>这个Dialog现在也是项目A中的全局Dialog，使用起来也非常方便。<br>这里有几个细节可以和各位看官分享一下：<br>第一个就是按钮的点击事件设置，我将其与按钮文字内容的设置绑定在一起。因为我认为你设置了按钮，怎么可能会没有点击事件？<br>第二个就是按钮中间的分割线，是与右边按钮绑定的， 所以当只有一个按钮时，我们应该使用左边的按钮<strong>leftBt</strong>而不是右边的。<br>基本上就是这样啦！<br>希望这个Dialog可以给大家带来一些灵感。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这篇小文将讲述我是如何根据<strong>建造者设计模式</strong>来实现一个全局Dialog。<br><a href=\"http://www.jianshu.com/p/07bed15cd13c\" target=\"_blank\" rel=\"noopener\">如果各位看官还不太了解建造者设计模式，建议可以看一下我的上篇文章。</a></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在每个项目当中，都会封装一些全局的样式，比如全局Loading、全局Dialog等。<br>封装这些功能是因为这些控件的使用频率极高。<br>在我刚接手项目A的时候，项目A也不例外，拥有着全局的Dialog。<br>刚开始时我尽量写一些侵入性低、仿照率高的代码，避免影响到之前的逻辑。并且学习着如何使用项目A的框架，这个过程我相信大家都是一样的。<br>当我用到Dialog的时候，我看到了项目A的全局Dialog，详细代码就不说了，给大家看一下项目A全局Dialog中的所有方法：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/builder_dialog_0.png\" alt=\"\"><br>不知各位看官会不会被这么多的构造方法给吓到。<br>这些构造方法都是随着项目需求的增加而增加的。<br>大家都知道，一个完整Dialog包括的元素至少应该有：提示图片、标题、描述文字、按钮等。<br>但是这些元素都不是必须的：<br>在C页面我弹出的Dialog可能只要做一个温馨提示：一行描述文字外加一个确认按钮。<br>在D页面我可能弹出的是用户退出登录的二次确认窗口：标题+文字+两个按钮。<br>那么到这里，各位看官就能明白了，为什么会有那么多的构造方法。<br>没错，我们在<strong>new KLCustimDialog()</strong>的同时，需要把所有的参数都传入进去。<br>这种写法的问题以及维护成本之高，我就不做过多描述了，我就简单给大家加个需求：<br>要求点击Dialog外部不能取消Dialog。<br>想想这个需求下的构造方法，要添加几个？</p>\n<h2 id=\"基本\"><a href=\"#基本\" class=\"headerlink\" title=\"基本\"></a>基本</h2><p>当我刚看到<strong>建造者模式</strong>的时候，我真是又惊又喜，热血沸腾！<br>我第一时间想到的就是重构项目A的全局Dialog！<br>大家都知道，Android中的<code>AlertDialog</code>就是使用<strong>建造者模式</strong>来实现的。<br>在我模仿构思了一波之后，创建Dialog的代码是这样的：<br><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dialog.Builder builder = new Dialog.Builder(context)<span class=\"comment\">;</span></span><br><span class=\"line\">builder.setTitle(<span class=\"string\">\"提示\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">builder.setMessage(<span class=\"string\">\"确认退出登录吗？\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">builder.setLeftText(<span class=\"string\">\"取消\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">builder.setRightText(<span class=\"string\">\"确认\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">builder.setOnclickListener(listener)<span class=\"comment\">;</span></span><br><span class=\"line\">Dialog dialog = builder.creater()<span class=\"comment\">;</span></span><br><span class=\"line\">dialog.show()<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure></p>\n<p>这样写似乎没有什么问题了。<br>我们把Dialog的所有元素都默认隐藏，在调用某个元素的填充方法后，我们就将其显示出来。<br>这样我们就摆脱了无限多的构造方法，完美！<br>文章到这里就应该结束了？<br>怎么可能！我都没变形呢！</p>\n<p>我见别人的Builder模式都是这样写的：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">Picasso</span><span class=\"selector-class\">.with</span>(<span class=\"selector-tag\">context</span>)</span><br><span class=\"line\">    <span class=\"selector-class\">.load</span>(<span class=\"selector-tag\">url</span>)</span><br><span class=\"line\">    <span class=\"selector-class\">.fit</span>()</span><br><span class=\"line\">    <span class=\"selector-class\">.config</span>(<span class=\"selector-tag\">XXX</span>)</span><br><span class=\"line\">    <span class=\"selector-class\">.placeholder</span>(<span class=\"selector-tag\">xxx</span>)</span><br><span class=\"line\">    <span class=\"selector-class\">.error</span>(<span class=\"selector-tag\">xxx</span>)</span><br><span class=\"line\">    <span class=\"selector-class\">.into</span>(<span class=\"selector-tag\">imageView</span>);</span><br></pre></td></tr></table></figure></p>\n<p>上述代码是使用<strong>Picasso</strong>来加载url图片。<br>一行代码完成。<br>帅不帅，想不想学？<br>所以我就想能不能用上面作为模板，来实现我们的全局Dialog。<br>话不多说，说干就干。</p>\n<h2 id=\"变形\"><a href=\"#变形\" class=\"headerlink\" title=\"变形\"></a>变形</h2><p>完整代码我已经上传GitHub，看代码我还是建议各位看官去<a href=\"https://github.com/YuanTiger/Design-Pattern/blob/master/app/src/main/java/com/my/designdemo/builder/dialog/DialogProduct.java\" target=\"_blank\" rel=\"noopener\">我的GitHub</a>上看，比较整洁。<br>最终实现的效果如下：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/dialog_builder_gif.gif\" alt=\"\"><br>首先，让我们来回想一下<strong>建造者模式</strong>的组成：</p>\n<ul>\n<li>Product：产品角色</li>\n<li>Builder：抽象的建造者</li>\n<li>ConcreteBuilder：具体的建造者</li>\n<li>Director：指挥者</li>\n</ul>\n<p>接下来，我们再把这些成员转化为我们的全局Dialog的成员：</p>\n<ul>\n<li>Product：Dialog就是我们制作出来的产品</li>\n<li>Builder：Dialog参数拼接抽象</li>\n<li>ConcreteBuilder：Dialog参数拼接细节</li>\n<li>Director：所有用到该Dialog的地方都是指挥者，它们决定着Dialog具体样式。</li>\n</ul>\n<p>思路有了，下面就开始动手吧，首先我们来创建Dialog的参数封装，里面应该有Dialog所有组成元素：<br><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> class DialogParams &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Context context;</span><br><span class=\"line\">    <span class=\"comment\">//标题</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">String</span> title;</span><br><span class=\"line\">    <span class=\"comment\">//标题字体大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> titleSizeSp;</span><br><span class=\"line\">    <span class=\"comment\">//图标资源</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> imageResource;</span><br><span class=\"line\">    <span class=\"comment\">//图标宽</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> imageWidth;</span><br><span class=\"line\">    <span class=\"comment\">//图标高</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> imageHeight;</span><br><span class=\"line\">    <span class=\"comment\">//消息内容</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">String</span> message1;</span><br><span class=\"line\">    <span class=\"comment\">//消息内容文字位置</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> message1Gravity = Gravity.CENTER;</span><br><span class=\"line\">    <span class=\"comment\">//点击外部是否可以取消</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">boolean</span> isCanCancel = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">//左边按钮内容</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">String</span> leftButtonText;</span><br><span class=\"line\">    <span class=\"comment\">//左边按钮颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> leftBtColor;</span><br><span class=\"line\">    <span class=\"comment\">//左边点击事件</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConcreteBuilder.ButtonClickLister leftListener;</span><br><span class=\"line\">    <span class=\"comment\">//右边按钮内容</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">String</span> rightButtontText;</span><br><span class=\"line\">    <span class=\"comment\">//右边边按钮颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> rightBtColor;</span><br><span class=\"line\">    <span class=\"comment\">//右边按钮点击事件</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConcreteBuilder.ButtonClickLister rightListener;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我使用了内部类去实现了整个Dialog，整个Dialog只有一个类，所以所有参数都是private并且没有提供set、get。<br>并且我为了方便，省略了Builder抽象类，直接构造了Builder抽象类的实现<strong>ConcreteBuilder</strong>：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteBuilder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//持有Product对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DialogParams p;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ConcreteBuilder(Context context) &#123;</span><br><span class=\"line\">        p = <span class=\"keyword\">new</span> DialogParams();</span><br><span class=\"line\">        p.context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConcreteBuilder <span class=\"title\">title</span><span class=\"params\">(String text)</span> </span>&#123;</span><br><span class=\"line\">        p.title = text;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConcreteBuilder <span class=\"title\">titleSize</span><span class=\"params\">(<span class=\"keyword\">int</span> spSize)</span> </span>&#123;</span><br><span class=\"line\">        p.titleSizeSp = spSize;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConcreteBuilder <span class=\"title\">imageResource</span><span class=\"params\">(<span class=\"keyword\">int</span> imageResource)</span> </span>&#123;</span><br><span class=\"line\">        p.imageResource = imageResource;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConcreteBuilder <span class=\"title\">imageWidth</span><span class=\"params\">(<span class=\"keyword\">int</span> imageWidth)</span> </span>&#123;</span><br><span class=\"line\">        p.imageWidth = imageWidth;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConcreteBuilder <span class=\"title\">imageHeight</span><span class=\"params\">(<span class=\"keyword\">int</span> imageHeight)</span> </span>&#123;</span><br><span class=\"line\">        p.imageHeight = imageHeight;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConcreteBuilder <span class=\"title\">message</span><span class=\"params\">(String text)</span> </span>&#123;</span><br><span class=\"line\">        p.message1 = text;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConcreteBuilder <span class=\"title\">messageGravity</span><span class=\"params\">(<span class=\"keyword\">int</span> gravity)</span> </span>&#123;</span><br><span class=\"line\">        p.message1Gravity = gravity;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConcreteBuilder <span class=\"title\">canCancel</span><span class=\"params\">(<span class=\"keyword\">boolean</span> isCanCancel)</span> </span>&#123;</span><br><span class=\"line\">        p.isCanCancel = isCanCancel;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConcreteBuilder <span class=\"title\">leftBt</span><span class=\"params\">(String text, ButtonClickLister lister)</span> </span>&#123;</span><br><span class=\"line\">        p.leftButtonText = text;</span><br><span class=\"line\">        p.leftListener = lister;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConcreteBuilder <span class=\"title\">leftBtColor</span><span class=\"params\">(<span class=\"keyword\">int</span> color)</span> </span>&#123;</span><br><span class=\"line\">        p.leftBtColor = color;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConcreteBuilder <span class=\"title\">rightBtColor</span><span class=\"params\">(<span class=\"keyword\">int</span> color)</span> </span>&#123;</span><br><span class=\"line\">        p.rightBtColor = color;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ConcreteBuilder <span class=\"title\">rightBt</span><span class=\"params\">(String text, ButtonClickLister lister)</span> </span>&#123;</span><br><span class=\"line\">        p.rightButtontText = text;</span><br><span class=\"line\">        p.rightListener = lister;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        p = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DialogProduct <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DialogProduct(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//按钮点击回调</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ButtonClickLister</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogProduct dialog)</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们会发现每个参数拼接方法都会返回<strong>ConcreteBuilder</strong>,这里是实现一行代码构建Dialog的关键。<br>参考<strong>Picasso</strong>的书写方式，明显可以看出它没有进行new的行为，说明<strong>with()</strong>一定是静态的，随之<strong>with()</strong>返回的对象也必为静态。<br>为了实现<strong>Picasso</strong>的书写方式，我们这里也将<strong>ConcreteBuilder</strong>静态，方便实现一句话创建Dialog。<br>接下来就是Dialog的代码：<br><figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DialogProduct</span> <span class=\"title\">extends</span> <span class=\"title\">Dialog</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    private <span class=\"type\">TextView</span> tvTitle;</span><br><span class=\"line\">    private <span class=\"type\">ImageView</span> ivIcon;</span><br><span class=\"line\">    private <span class=\"type\">TextView</span> tvMessage;</span><br><span class=\"line\">    private <span class=\"type\">TextView</span> tvButtonLeft;</span><br><span class=\"line\">    private <span class=\"type\">TextView</span> tvButtonRight;</span><br><span class=\"line\">    private <span class=\"type\">ImageView</span> viewLine;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//持有Builder</span></span><br><span class=\"line\">    private static <span class=\"type\">ConcreteBuilder</span> builder;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//模仿Picasso的书写方式</span></span><br><span class=\"line\">    public static <span class=\"type\">ConcreteBuilder</span> <span class=\"keyword\">with</span>(<span class=\"type\">Context</span> context) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (builder == null) &#123;</span><br><span class=\"line\">            builder = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">ConcreteBuilder</span>(context);</span></span><br><span class=\"line\"><span class=\"function\">        &#125;</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">return</span> <span class=\"title\">builder</span>;</span></span><br><span class=\"line\"><span class=\"function\">    &#125;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">private</span> <span class=\"title\">DialogProduct</span>(<span class=\"type\">DialogParams</span> p) &#123;</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"comment\">//设置没有标题的Dialog风格</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">super</span>(p.context, <span class=\"type\">R</span>.style.<span class=\"type\">NoTitleDialog</span>);</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">View</span> <span class=\"title\">contentView</span> = <span class=\"title\">LayoutInflater</span>.<span class=\"title\">from</span>(p.context).<span class=\"title\">inflate</span>(<span class=\"type\">R</span>.layout.dialog_build, null);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setContentView</span>(contentView);</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">tvTitle</span> = <span class=\"title\">contentView</span>.<span class=\"title\">findViewById</span>(<span class=\"type\">R</span>.id.tv_title);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">ivIcon</span> = <span class=\"title\">contentView</span>.<span class=\"title\">findViewById</span>(<span class=\"type\">R</span>.id.iv_icon);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">tvMessage</span> = <span class=\"title\">contentView</span>.<span class=\"title\">findViewById</span>(<span class=\"type\">R</span>.id.tv_message);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">tvButtonLeft</span> = <span class=\"title\">contentView</span>.<span class=\"title\">findViewById</span>(<span class=\"type\">R</span>.id.tv_button_left);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">tvButtonRight</span> = <span class=\"title\">contentView</span>.<span class=\"title\">findViewById</span>(<span class=\"type\">R</span>.id.tv_button_right);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">viewLine</span> = <span class=\"title\">contentView</span>.<span class=\"title\">findViewById</span>(<span class=\"type\">R</span>.id.view_line);</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"comment\">//控件默认隐藏</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">tvTitle</span>.<span class=\"title\">setVisibility</span>(<span class=\"type\">View</span>.<span class=\"type\">GONE</span>);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">viewLine</span>.<span class=\"title\">setVisibility</span>(<span class=\"type\">View</span>.<span class=\"type\">GONE</span>);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">ivIcon</span>.<span class=\"title\">setVisibility</span>(<span class=\"type\">View</span>.<span class=\"type\">GONE</span>);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">tvMessage</span>.<span class=\"title\">setVisibility</span>(<span class=\"type\">View</span>.<span class=\"type\">GONE</span>);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">tvButtonLeft</span>.<span class=\"title\">setVisibility</span>(<span class=\"type\">View</span>.<span class=\"type\">GONE</span>);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">tvButtonRight</span>.<span class=\"title\">setVisibility</span>(<span class=\"type\">View</span>.<span class=\"type\">GONE</span>);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"comment\">//构建Dialog</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setTitlText</span>(p.title);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setTitlTextSize</span>(p.titleSizeSp);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setImageResource</span>(p.imageResource);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setImageWidth</span>(p.imageWidth);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setImageHeight</span>(p.imageHeight);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setTvMessage</span>(p.message1);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setTvMessageGravity</span>(p.message1Gravity);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setCancelableFlag</span>(p.isCanCancel);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setLeftText</span>(p.leftButtonText, p.leftListener);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setLeftBtColor</span>(p.leftBtColor);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setRightText</span>(p.rightButtontText, p.rightListener);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">setRightBtColor</span>(p.rightBtColor);</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">    &#125;</span></span><br><span class=\"line\"><span class=\"function\">     /**</span></span><br><span class=\"line\"><span class=\"function\">     * 设置标题</span></span><br><span class=\"line\"><span class=\"function\">     *</span></span><br><span class=\"line\"><span class=\"function\">     * @<span class=\"title\">param</span> <span class=\"title\">title</span> 标题文字</span></span><br><span class=\"line\"><span class=\"function\">     */</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">private</span> <span class=\"title\">void</span> <span class=\"title\">setTitlText</span>(<span class=\"type\">String</span> title) &#123;</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">if</span> (<span class=\"type\">TextUtils</span>.isEmpty(title)) &#123;</span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"title\">return</span>;</span></span><br><span class=\"line\"><span class=\"function\">        &#125;</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">tvTitle</span>.<span class=\"title\">setVisibility</span>(<span class=\"type\">View</span>.<span class=\"type\">VISIBLE</span>);</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">tvTitle</span>.<span class=\"title\">setText</span>(title);</span></span><br><span class=\"line\"><span class=\"function\">    &#125;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"comment\">//......省略剩余控件代码</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>写完之后，我们来看看这个变形的<strong>建造者模式</strong>的Dialog是如何创建的：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">DialogProduct</span><span class=\"selector-class\">.with</span>(this)</span><br><span class=\"line\">        <span class=\"selector-class\">.title</span>(<span class=\"string\">\"提示\"</span>)</span><br><span class=\"line\">        <span class=\"selector-class\">.message</span>(<span class=\"string\">\"您确认退出登录吗？\"</span>)</span><br><span class=\"line\">        <span class=\"selector-class\">.canCancel</span>(false)</span><br><span class=\"line\">        <span class=\"selector-class\">.leftBtColor</span>(getResources().getColor(R.color.color_0090ff))</span><br><span class=\"line\">        <span class=\"selector-class\">.rightBtColor</span>(getResources().getColor(R.color.color_f96c59))</span><br><span class=\"line\">        <span class=\"selector-class\">.leftBt</span>(<span class=\"string\">\"取消\"</span>, new NormalDialog.ConcreteBuilder.ButtonClickLister() &#123;</span><br><span class=\"line\">            <span class=\"variable\">@Override</span></span><br><span class=\"line\">            public void onClick(NormalDialog dialog) &#123;</span><br><span class=\"line\">                <span class=\"selector-tag\">dialog</span><span class=\"selector-class\">.cancel</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.rightBt</span>(<span class=\"string\">\"确认\"</span>, new NormalDialog.ConcreteBuilder.ButtonClickLister() &#123;</span><br><span class=\"line\">            <span class=\"variable\">@Override</span></span><br><span class=\"line\">            public void onClick(NormalDialog dialog) &#123;</span><br><span class=\"line\">                <span class=\"selector-tag\">Toast</span><span class=\"selector-class\">.makeText</span>(BuilderActivity.this, <span class=\"string\">\"退出登录成功！\"</span>, Toast.LENGTH_SHORT)<span class=\"selector-class\">.show</span>();</span><br><span class=\"line\">                <span class=\"selector-tag\">dialog</span><span class=\"selector-class\">.cancel</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"selector-class\">.create</span>()</span><br><span class=\"line\">        <span class=\"selector-class\">.show</span>();</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><a href=\"https://github.com/YuanTiger/Design-Pattern/blob/master/app/src/main/java/com/my/designdemo/builder/dialog/DialogProduct.java\" target=\"_blank\" rel=\"noopener\">DialogProduct的代码我已经上传到了GitHub</a>，各位看官可以自行食用。<br>这个Dialog现在也是项目A中的全局Dialog，使用起来也非常方便。<br>这里有几个细节可以和各位看官分享一下：<br>第一个就是按钮的点击事件设置，我将其与按钮文字内容的设置绑定在一起。因为我认为你设置了按钮，怎么可能会没有点击事件？<br>第二个就是按钮中间的分割线，是与右边按钮绑定的， 所以当只有一个按钮时，我们应该使用左边的按钮<strong>leftBt</strong>而不是右边的。<br>基本上就是这样啦！<br>希望这个Dialog可以给大家带来一些灵感。</p>\n"},{"title":"创建型设计模式-抽象工厂模式","date":"2017-08-02T05:52:48.000Z","_content":"## 模式介绍 ##\n前段时间介绍了[工厂方法模式](http://www.jianshu.com/p/cf3b3335af4b)。\n本次介绍的模式非常容易和[工厂方法模式](http://www.jianshu.com/p/cf3b3335af4b)混淆，并且复杂度也有一定的提升，叫做**抽象工厂模式**。\n其实在现实生活中，工厂都会生产某一样具体的产品，不存在说抽象的工厂。\n那么该模式的含义到底是什么呢？\n**抽象工厂模式**的出现最早是为了解决不同操作系统下的图形化处理，这就好比iOS中的Button、Android中的Button、WindowPhone中的Button一样，虽然都是Button，但系统的不同，会导致Button也存在差异。\n这就引出了**抽象工厂模式**的定义：\n为创建出**一组相互依赖**的对象提供一个封装接口。\n定义中有几个关键字，需要注意：\n- 一组：这是和[工厂方法模式](http://www.jianshu.com/p/cf3b3335af4b)的重要区别所在，**抽象工厂模式**用于生产多个产品，而不是一个。如果生产一个产品，请使用[工厂方法模式](http://www.jianshu.com/p/cf3b3335af4b)或[建造者模式](http://www.jianshu.com/p/07bed15cd13c)。\n- 相互依赖：生产出一组产品之后，这组产品**一定**是相互依赖的，注意是**一定**。就好比上面的例子中，Android系统能使用iOS系统的Button吗？答案是否定的，因为iOS的Button依赖于iOS系统。\n\n解释完名词，想必大家对**抽象工厂模式**的使用场景就有了一些认知：\n当产品很多，并且有特定的关联可以进行抽象，就可以使用**抽象工厂模式**。\n\n\n\n## 模式构成 ##\n**抽象工厂模式**的主要角色还是4个：\n- AbstractFactory：抽象工厂，包含一组产品的生产抽象，**每一个方法都应对应一个产品**。\n- ConcreteFactory：抽象工厂实现，应包含生产一组产品的具体实现。\n- AbstractProduct：一组产品中的一个产品抽象。\n- ConcreteProduct：具体的产品实现。\n\n## 模式示例 ##\n现在我们开始实现在上述介绍中提到的例子。\n我们先来将思路捋一捋：\n![对应关系](http://7xvzby.com1.z0.glb.clouddn.com/DesignModel/design_abs_factory_0.png)\n\n1. 我们产品包含：操作系统、Button。\n2. 工厂应该生产一组产品，即生产操作系统和Button。\n3. 生产出来的一组产品应相互依赖，并且和另一组产品相互独立。\n\n接下来，我们就按照思路来实现**抽象工厂模式**。\n首先我们来初始化抽象产品**AbstractProduct**：\n操作系统System：\n```\npublic interface SystemAbsProduct {\n\n    //获取系统型号\n    String getSystem();\n\n}\n```\nButton：\n```\npublic interface ButtonAbsProduct {\n\n    //按钮响应\n    String getButtonName(SystemAbsProduct system);\n\n}\n```\n我们可以发现，Button与操作系统存在依赖关系，这种依赖关系的体现由开发人员自己来控制，我这里只是个简单实例。\n两个产品的抽象已经有了，我们先不急着去实现它们。\n接下来我们来定义抽象工厂AbstractFactory，它应该有两个方法，分别返回系统和Button两个产品：\n```\npublic interface AbsFactory {\n\n    //创建操作系统\n    SystemAbsProduct createSystem();\n\n    //创建Button\n    ButtonAbsProduct createButton();\n}\n```\n到这里应该都没有什么问题，抽象工厂、抽象产品都已经创建完成了。\n接下来我们想要分别构建出WindowPhone系统、Android系统、iOS系统下的Button。\n我们应该能想到，必须要先要有具体的产品，才能用具体工厂来生产。\n所以接下来，我们要先创建具体的产品：\n操作系统\n```\npublic interface SystemAbsProduct {\n\n    //获取系统型号\n    String getSystem();\n\n    public class WindowPhone implements SystemAbsProduct{\n\n        @Override\n        public String getSystem() {\n            return App.context.getString(R.string.window_phone);\n        }\n    }\n    public class iOS implements SystemAbsProduct{\n\n        @Override\n        public String getSystem() {\n            return App.context.getString(R.string.ios);\n        }\n    }\n\n    public class Android implements SystemAbsProduct{\n\n        @Override\n        public String getSystem() {\n            return App.context.getString(R.string.android);\n        }\n    }\n}\n```\nButton：\n```\npublic interface ButtonAbsProduct {\n\n    //按钮响应\n    String getButtonName(SystemAbsProduct system);\n    \n    public class WindowPhoneButton implements ButtonAbsProduct {\n\n        @Override\n        public String getButtonName(SystemAbsProduct system) {\n            if (system.getSystem().equals(App.context.getString(R.string.window_phone))) {\n                return \"点击了WindowPhone系统的Button\";\n            }\n            return App.context.getString(R.string.system_error);\n        }\n    }\n\n    public class IOSButton implements ButtonAbsProduct {\n\n        @Override\n        public String getButtonName(SystemAbsProduct system) {\n            if (system.getSystem().equals(App.context.getString(R.string.ios))) {\n                return \"点击了iOS系统的Button\";\n            }\n            return App.context.getString(R.string.system_error);\n        }\n    }\n\n    public class AndroidButton implements ButtonAbsProduct {\n\n        @Override\n        public String getButtonName(SystemAbsProduct system) {\n            if (system.getSystem().equals(App.context.getString(R.string.android))) {\n                return \"点击了Android系统的Button\";\n            }\n            return App.context.getString(R.string.system_error);\n        }\n    }\n}\n```\n因为类的数量庞大，所以我选择使用内部类的形式来实现ConcreteProduct角色。\n我们可以发现，在Button角色中，我们进行了简单的判断，当操作系统不匹配时，会提示用户，这就类似于运行崩溃的效果。\n接下来，我们来创建最后一个角色：ConcreteFactory。\n它应该有多个，每一个负责创建一组具体的产品，也就是说有多少组产品，就应该有多少个具体工厂：\nWindowPhoneFactory：\n```\npublic class WindowPhoneFactory implements AbsFactory {\n    @Override\n    public SystemAbsProduct createSystem() {\n        return new SystemAbsProduct.WindowPhone();\n    }\n\n    @Override\n    public ButtonAbsProduct createButton() {\n        return new ButtonAbsProduct.WindowPhoneButton();\n    }\n}\n```\nIOSFactory：\n```\npublic class IOSFactory implements AbsFactory {\n    @Override\n    public SystemAbsProduct createSystem() {\n        return new SystemAbsProduct.IOS();\n    }\n\n    @Override\n    public ButtonAbsProduct createButton() {\n        return new ButtonAbsProduct.IOSButton();\n    }\n}\n```\nAndroidFactory：\n```\npublic class AndroidFactory implements AbsFactory {\n    @Override\n    public SystemAbsProduct createSystem() {\n        return new SystemAbsProduct.Android();\n    }\n\n    @Override\n    public ButtonAbsProduct createButton() {\n        return new ButtonAbsProduct.AndroidButton();\n    }\n}\n```\n三个具体工厂分别具体产生三组相互依赖的产品。\n至此，简单的**抽象工厂模式**已经构建完成。\n但是最关键的还是使用，接下来我们来写一些简单的测试代码：\n```\n//构建WindowPhone具体工厂\nAbsFactory iOSFactory = new IOSFactory();\n//构建操作系统\nSystemAbsProduct iOSSystem = iOSFactory.createSystem();\n//构建按钮\nButtonAbsProduct iOSButton = iOSFactory.createButton();\n//调用依赖\nToast.makeText(this, iOSButton.getButtonName(iOSSystem), Toast.LENGTH_SHORT).show();\n```\n创建iOS系统工厂，接着创建iOS系统和Button，最后调用Button的点击，会发现成功提示出调用成功。\n如果我们使用错误的依赖：\n```\nAbsFactory androidFactory1 = new AndroidFactory();\nSystemAbsProduct androidSystem1 = androidFactory1.createSystem();\nButtonAbsProduct androidButton1 = androidFactory1.createButton();\nAbsFactory iOSFactory1 = new IOSFactory();\nSystemAbsProduct iOSSystem1 = iOSFactory1.createSystem();\nButtonAbsProduct iOSButton1 = iOSFactory1.createButton();\n//使用Android的Button时，传入iOS操作系统\nToast.makeText(this, androidButton1.getButtonName(iOSSystem1), Toast.LENGTH_SHORT).show();\n```\n上述演示代码，会提示系统不匹配。\n\n## 总结 ##\n**抽象工厂模式**的最大优势就是分离了接口与实现，客户端使用工厂来创建所需对象，实现面向产品的接口编程，使其在切换产品类时更加灵活、容易。\n当然缺点也非常明显，一是类文件的增加，二是不太容易扩展产品类，因为每添加一个新产品，都要修改工厂，随之所有工厂实现都要修改。\n**抽象工厂模式**与[工厂方法模式](http://www.jianshu.com/p/cf3b3335af4b)的区别也很明显：\n**抽象工厂模式**用来生产一组相互依赖的产品。\n[工厂方法模式](http://www.jianshu.com/p/cf3b3335af4b)用来批量生产一种产品。\n[抽象工厂模式的相关代码已经上传至GitHub](https://github.com/YuanTiger/Design-Pattern)，需要的同学可以下载参考。\n\n## 感谢 ##\n\n[抽象工厂模式和工厂模式的区别-caoglish的回答](https://www.zhihu.com/question/20367734/answer/82361745?from=singlemessage&isappinstalled=0)\n\n《Android源码设计模式解析与实战》 何红辉、关爱民 著\n","source":"_posts/Design-Abs-Factory.md","raw":"---\ntitle: 创建型设计模式-抽象工厂模式\ndate: 2017-08-02 13:52:48\ntags:\n   - 编程思想\n---\n## 模式介绍 ##\n前段时间介绍了[工厂方法模式](http://www.jianshu.com/p/cf3b3335af4b)。\n本次介绍的模式非常容易和[工厂方法模式](http://www.jianshu.com/p/cf3b3335af4b)混淆，并且复杂度也有一定的提升，叫做**抽象工厂模式**。\n其实在现实生活中，工厂都会生产某一样具体的产品，不存在说抽象的工厂。\n那么该模式的含义到底是什么呢？\n**抽象工厂模式**的出现最早是为了解决不同操作系统下的图形化处理，这就好比iOS中的Button、Android中的Button、WindowPhone中的Button一样，虽然都是Button，但系统的不同，会导致Button也存在差异。\n这就引出了**抽象工厂模式**的定义：\n为创建出**一组相互依赖**的对象提供一个封装接口。\n定义中有几个关键字，需要注意：\n- 一组：这是和[工厂方法模式](http://www.jianshu.com/p/cf3b3335af4b)的重要区别所在，**抽象工厂模式**用于生产多个产品，而不是一个。如果生产一个产品，请使用[工厂方法模式](http://www.jianshu.com/p/cf3b3335af4b)或[建造者模式](http://www.jianshu.com/p/07bed15cd13c)。\n- 相互依赖：生产出一组产品之后，这组产品**一定**是相互依赖的，注意是**一定**。就好比上面的例子中，Android系统能使用iOS系统的Button吗？答案是否定的，因为iOS的Button依赖于iOS系统。\n\n解释完名词，想必大家对**抽象工厂模式**的使用场景就有了一些认知：\n当产品很多，并且有特定的关联可以进行抽象，就可以使用**抽象工厂模式**。\n\n\n\n## 模式构成 ##\n**抽象工厂模式**的主要角色还是4个：\n- AbstractFactory：抽象工厂，包含一组产品的生产抽象，**每一个方法都应对应一个产品**。\n- ConcreteFactory：抽象工厂实现，应包含生产一组产品的具体实现。\n- AbstractProduct：一组产品中的一个产品抽象。\n- ConcreteProduct：具体的产品实现。\n\n## 模式示例 ##\n现在我们开始实现在上述介绍中提到的例子。\n我们先来将思路捋一捋：\n![对应关系](http://7xvzby.com1.z0.glb.clouddn.com/DesignModel/design_abs_factory_0.png)\n\n1. 我们产品包含：操作系统、Button。\n2. 工厂应该生产一组产品，即生产操作系统和Button。\n3. 生产出来的一组产品应相互依赖，并且和另一组产品相互独立。\n\n接下来，我们就按照思路来实现**抽象工厂模式**。\n首先我们来初始化抽象产品**AbstractProduct**：\n操作系统System：\n```\npublic interface SystemAbsProduct {\n\n    //获取系统型号\n    String getSystem();\n\n}\n```\nButton：\n```\npublic interface ButtonAbsProduct {\n\n    //按钮响应\n    String getButtonName(SystemAbsProduct system);\n\n}\n```\n我们可以发现，Button与操作系统存在依赖关系，这种依赖关系的体现由开发人员自己来控制，我这里只是个简单实例。\n两个产品的抽象已经有了，我们先不急着去实现它们。\n接下来我们来定义抽象工厂AbstractFactory，它应该有两个方法，分别返回系统和Button两个产品：\n```\npublic interface AbsFactory {\n\n    //创建操作系统\n    SystemAbsProduct createSystem();\n\n    //创建Button\n    ButtonAbsProduct createButton();\n}\n```\n到这里应该都没有什么问题，抽象工厂、抽象产品都已经创建完成了。\n接下来我们想要分别构建出WindowPhone系统、Android系统、iOS系统下的Button。\n我们应该能想到，必须要先要有具体的产品，才能用具体工厂来生产。\n所以接下来，我们要先创建具体的产品：\n操作系统\n```\npublic interface SystemAbsProduct {\n\n    //获取系统型号\n    String getSystem();\n\n    public class WindowPhone implements SystemAbsProduct{\n\n        @Override\n        public String getSystem() {\n            return App.context.getString(R.string.window_phone);\n        }\n    }\n    public class iOS implements SystemAbsProduct{\n\n        @Override\n        public String getSystem() {\n            return App.context.getString(R.string.ios);\n        }\n    }\n\n    public class Android implements SystemAbsProduct{\n\n        @Override\n        public String getSystem() {\n            return App.context.getString(R.string.android);\n        }\n    }\n}\n```\nButton：\n```\npublic interface ButtonAbsProduct {\n\n    //按钮响应\n    String getButtonName(SystemAbsProduct system);\n    \n    public class WindowPhoneButton implements ButtonAbsProduct {\n\n        @Override\n        public String getButtonName(SystemAbsProduct system) {\n            if (system.getSystem().equals(App.context.getString(R.string.window_phone))) {\n                return \"点击了WindowPhone系统的Button\";\n            }\n            return App.context.getString(R.string.system_error);\n        }\n    }\n\n    public class IOSButton implements ButtonAbsProduct {\n\n        @Override\n        public String getButtonName(SystemAbsProduct system) {\n            if (system.getSystem().equals(App.context.getString(R.string.ios))) {\n                return \"点击了iOS系统的Button\";\n            }\n            return App.context.getString(R.string.system_error);\n        }\n    }\n\n    public class AndroidButton implements ButtonAbsProduct {\n\n        @Override\n        public String getButtonName(SystemAbsProduct system) {\n            if (system.getSystem().equals(App.context.getString(R.string.android))) {\n                return \"点击了Android系统的Button\";\n            }\n            return App.context.getString(R.string.system_error);\n        }\n    }\n}\n```\n因为类的数量庞大，所以我选择使用内部类的形式来实现ConcreteProduct角色。\n我们可以发现，在Button角色中，我们进行了简单的判断，当操作系统不匹配时，会提示用户，这就类似于运行崩溃的效果。\n接下来，我们来创建最后一个角色：ConcreteFactory。\n它应该有多个，每一个负责创建一组具体的产品，也就是说有多少组产品，就应该有多少个具体工厂：\nWindowPhoneFactory：\n```\npublic class WindowPhoneFactory implements AbsFactory {\n    @Override\n    public SystemAbsProduct createSystem() {\n        return new SystemAbsProduct.WindowPhone();\n    }\n\n    @Override\n    public ButtonAbsProduct createButton() {\n        return new ButtonAbsProduct.WindowPhoneButton();\n    }\n}\n```\nIOSFactory：\n```\npublic class IOSFactory implements AbsFactory {\n    @Override\n    public SystemAbsProduct createSystem() {\n        return new SystemAbsProduct.IOS();\n    }\n\n    @Override\n    public ButtonAbsProduct createButton() {\n        return new ButtonAbsProduct.IOSButton();\n    }\n}\n```\nAndroidFactory：\n```\npublic class AndroidFactory implements AbsFactory {\n    @Override\n    public SystemAbsProduct createSystem() {\n        return new SystemAbsProduct.Android();\n    }\n\n    @Override\n    public ButtonAbsProduct createButton() {\n        return new ButtonAbsProduct.AndroidButton();\n    }\n}\n```\n三个具体工厂分别具体产生三组相互依赖的产品。\n至此，简单的**抽象工厂模式**已经构建完成。\n但是最关键的还是使用，接下来我们来写一些简单的测试代码：\n```\n//构建WindowPhone具体工厂\nAbsFactory iOSFactory = new IOSFactory();\n//构建操作系统\nSystemAbsProduct iOSSystem = iOSFactory.createSystem();\n//构建按钮\nButtonAbsProduct iOSButton = iOSFactory.createButton();\n//调用依赖\nToast.makeText(this, iOSButton.getButtonName(iOSSystem), Toast.LENGTH_SHORT).show();\n```\n创建iOS系统工厂，接着创建iOS系统和Button，最后调用Button的点击，会发现成功提示出调用成功。\n如果我们使用错误的依赖：\n```\nAbsFactory androidFactory1 = new AndroidFactory();\nSystemAbsProduct androidSystem1 = androidFactory1.createSystem();\nButtonAbsProduct androidButton1 = androidFactory1.createButton();\nAbsFactory iOSFactory1 = new IOSFactory();\nSystemAbsProduct iOSSystem1 = iOSFactory1.createSystem();\nButtonAbsProduct iOSButton1 = iOSFactory1.createButton();\n//使用Android的Button时，传入iOS操作系统\nToast.makeText(this, androidButton1.getButtonName(iOSSystem1), Toast.LENGTH_SHORT).show();\n```\n上述演示代码，会提示系统不匹配。\n\n## 总结 ##\n**抽象工厂模式**的最大优势就是分离了接口与实现，客户端使用工厂来创建所需对象，实现面向产品的接口编程，使其在切换产品类时更加灵活、容易。\n当然缺点也非常明显，一是类文件的增加，二是不太容易扩展产品类，因为每添加一个新产品，都要修改工厂，随之所有工厂实现都要修改。\n**抽象工厂模式**与[工厂方法模式](http://www.jianshu.com/p/cf3b3335af4b)的区别也很明显：\n**抽象工厂模式**用来生产一组相互依赖的产品。\n[工厂方法模式](http://www.jianshu.com/p/cf3b3335af4b)用来批量生产一种产品。\n[抽象工厂模式的相关代码已经上传至GitHub](https://github.com/YuanTiger/Design-Pattern)，需要的同学可以下载参考。\n\n## 感谢 ##\n\n[抽象工厂模式和工厂模式的区别-caoglish的回答](https://www.zhihu.com/question/20367734/answer/82361745?from=singlemessage&isappinstalled=0)\n\n《Android源码设计模式解析与实战》 何红辉、关爱民 著\n","slug":"Design-Abs-Factory","published":1,"updated":"2018-08-24T09:36:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7sxdw0000dhnnfkbec52g0","content":"<h2 id=\"模式介绍\"><a href=\"#模式介绍\" class=\"headerlink\" title=\"模式介绍\"></a>模式介绍</h2><p>前段时间介绍了<a href=\"http://www.jianshu.com/p/cf3b3335af4b\" target=\"_blank\" rel=\"noopener\">工厂方法模式</a>。<br>本次介绍的模式非常容易和<a href=\"http://www.jianshu.com/p/cf3b3335af4b\" target=\"_blank\" rel=\"noopener\">工厂方法模式</a>混淆，并且复杂度也有一定的提升，叫做<strong>抽象工厂模式</strong>。<br>其实在现实生活中，工厂都会生产某一样具体的产品，不存在说抽象的工厂。<br>那么该模式的含义到底是什么呢？<br><strong>抽象工厂模式</strong>的出现最早是为了解决不同操作系统下的图形化处理，这就好比iOS中的Button、Android中的Button、WindowPhone中的Button一样，虽然都是Button，但系统的不同，会导致Button也存在差异。<br>这就引出了<strong>抽象工厂模式</strong>的定义：<br>为创建出<strong>一组相互依赖</strong>的对象提供一个封装接口。<br>定义中有几个关键字，需要注意：</p>\n<ul>\n<li>一组：这是和<a href=\"http://www.jianshu.com/p/cf3b3335af4b\" target=\"_blank\" rel=\"noopener\">工厂方法模式</a>的重要区别所在，<strong>抽象工厂模式</strong>用于生产多个产品，而不是一个。如果生产一个产品，请使用<a href=\"http://www.jianshu.com/p/cf3b3335af4b\" target=\"_blank\" rel=\"noopener\">工厂方法模式</a>或<a href=\"http://www.jianshu.com/p/07bed15cd13c\" target=\"_blank\" rel=\"noopener\">建造者模式</a>。</li>\n<li>相互依赖：生产出一组产品之后，这组产品<strong>一定</strong>是相互依赖的，注意是<strong>一定</strong>。就好比上面的例子中，Android系统能使用iOS系统的Button吗？答案是否定的，因为iOS的Button依赖于iOS系统。</li>\n</ul>\n<p>解释完名词，想必大家对<strong>抽象工厂模式</strong>的使用场景就有了一些认知：<br>当产品很多，并且有特定的关联可以进行抽象，就可以使用<strong>抽象工厂模式</strong>。</p>\n<h2 id=\"模式构成\"><a href=\"#模式构成\" class=\"headerlink\" title=\"模式构成\"></a>模式构成</h2><p><strong>抽象工厂模式</strong>的主要角色还是4个：</p>\n<ul>\n<li>AbstractFactory：抽象工厂，包含一组产品的生产抽象，<strong>每一个方法都应对应一个产品</strong>。</li>\n<li>ConcreteFactory：抽象工厂实现，应包含生产一组产品的具体实现。</li>\n<li>AbstractProduct：一组产品中的一个产品抽象。</li>\n<li>ConcreteProduct：具体的产品实现。</li>\n</ul>\n<h2 id=\"模式示例\"><a href=\"#模式示例\" class=\"headerlink\" title=\"模式示例\"></a>模式示例</h2><p>现在我们开始实现在上述介绍中提到的例子。<br>我们先来将思路捋一捋：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/DesignModel/design_abs_factory_0.png\" alt=\"对应关系\"></p>\n<ol>\n<li>我们产品包含：操作系统、Button。</li>\n<li>工厂应该生产一组产品，即生产操作系统和Button。</li>\n<li>生产出来的一组产品应相互依赖，并且和另一组产品相互独立。</li>\n</ol>\n<p>接下来，我们就按照思路来实现<strong>抽象工厂模式</strong>。<br>首先我们来初始化抽象产品<strong>AbstractProduct</strong>：<br>操作系统System：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">SystemAbsProduct</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取系统型号</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getSystem</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Button：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ButtonAbsProduct</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//按钮响应</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getButtonName</span>(<span class=\"params\">SystemAbsProduct system</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们可以发现，Button与操作系统存在依赖关系，这种依赖关系的体现由开发人员自己来控制，我这里只是个简单实例。<br>两个产品的抽象已经有了，我们先不急着去实现它们。<br>接下来我们来定义抽象工厂AbstractFactory，它应该有两个方法，分别返回系统和Button两个产品：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">AbsFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建操作系统</span></span><br><span class=\"line\">    <span class=\"function\">SystemAbsProduct <span class=\"title\">createSystem</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建Button</span></span><br><span class=\"line\">    <span class=\"function\">ButtonAbsProduct <span class=\"title\">createButton</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>到这里应该都没有什么问题，抽象工厂、抽象产品都已经创建完成了。<br>接下来我们想要分别构建出WindowPhone系统、Android系统、iOS系统下的Button。<br>我们应该能想到，必须要先要有具体的产品，才能用具体工厂来生产。<br>所以接下来，我们要先创建具体的产品：<br>操作系统<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SystemAbsProduct</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取系统型号</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getSystem</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WindowPhone</span> <span class=\"keyword\">implements</span> <span class=\"title\">SystemAbsProduct</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSystem</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> App.context.getString(R.string.window_phone);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">iOS</span> <span class=\"keyword\">implements</span> <span class=\"title\">SystemAbsProduct</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSystem</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> App.context.getString(R.string.ios);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Android</span> <span class=\"keyword\">implements</span> <span class=\"title\">SystemAbsProduct</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSystem</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> App.context.getString(R.string.android);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Button：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ButtonAbsProduct</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//按钮响应</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getButtonName</span>(<span class=\"params\">SystemAbsProduct system</span>)</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">WindowPhoneButton</span> <span class=\"title\">implements</span> <span class=\"title\">ButtonAbsProduct</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getButtonName</span>(<span class=\"params\">SystemAbsProduct system</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (system.getSystem().<span class=\"keyword\">equals</span>(App.context.getString(R.<span class=\"keyword\">string</span>.window_phone))) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"点击了WindowPhone系统的Button\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> App.context.getString(R.<span class=\"keyword\">string</span>.system_error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">IOSButton</span> <span class=\"title\">implements</span> <span class=\"title\">ButtonAbsProduct</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getButtonName</span>(<span class=\"params\">SystemAbsProduct system</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (system.getSystem().<span class=\"keyword\">equals</span>(App.context.getString(R.<span class=\"keyword\">string</span>.ios))) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"点击了iOS系统的Button\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> App.context.getString(R.<span class=\"keyword\">string</span>.system_error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AndroidButton</span> <span class=\"title\">implements</span> <span class=\"title\">ButtonAbsProduct</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getButtonName</span>(<span class=\"params\">SystemAbsProduct system</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (system.getSystem().<span class=\"keyword\">equals</span>(App.context.getString(R.<span class=\"keyword\">string</span>.android))) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"点击了Android系统的Button\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> App.context.getString(R.<span class=\"keyword\">string</span>.system_error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因为类的数量庞大，所以我选择使用内部类的形式来实现ConcreteProduct角色。<br>我们可以发现，在Button角色中，我们进行了简单的判断，当操作系统不匹配时，会提示用户，这就类似于运行崩溃的效果。<br>接下来，我们来创建最后一个角色：ConcreteFactory。<br>它应该有多个，每一个负责创建一组具体的产品，也就是说有多少组产品，就应该有多少个具体工厂：<br>WindowPhoneFactory：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WindowPhoneFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">AbsFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SystemAbsProduct <span class=\"title\">createSystem</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SystemAbsProduct.WindowPhone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ButtonAbsProduct <span class=\"title\">createButton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ButtonAbsProduct.WindowPhoneButton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>IOSFactory：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOSFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">AbsFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SystemAbsProduct <span class=\"title\">createSystem</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SystemAbsProduct.IOS();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ButtonAbsProduct <span class=\"title\">createButton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ButtonAbsProduct.IOSButton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>AndroidFactory：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndroidFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">AbsFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SystemAbsProduct <span class=\"title\">createSystem</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SystemAbsProduct.Android();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ButtonAbsProduct <span class=\"title\">createButton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ButtonAbsProduct.AndroidButton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>三个具体工厂分别具体产生三组相互依赖的产品。<br>至此，简单的<strong>抽象工厂模式</strong>已经构建完成。<br>但是最关键的还是使用，接下来我们来写一些简单的测试代码：<br><figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//构建WindowPhone具体工厂</span></span><br><span class=\"line\"><span class=\"type\">AbsFactory</span> iOSFactory = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">IOSFactory</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//构建操作系统</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">SystemAbsProduct</span> <span class=\"title\">iOSSystem</span> = <span class=\"title\">iOSFactory</span>.<span class=\"title\">createSystem</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//构建按钮</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ButtonAbsProduct</span> <span class=\"title\">iOSButton</span> = <span class=\"title\">iOSFactory</span>.<span class=\"title\">createButton</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//调用依赖</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Toast</span>.<span class=\"title\">makeText</span>(this, iOSButton.getButtonName(iOSSystem), <span class=\"title\">Toast</span>.<span class=\"title\">LENGTH_SHORT</span>).<span class=\"title\">show</span>();</span></span><br></pre></td></tr></table></figure></p>\n<p>创建iOS系统工厂，接着创建iOS系统和Button，最后调用Button的点击，会发现成功提示出调用成功。<br>如果我们使用错误的依赖：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">AbsFactory</span> <span class=\"keyword\">androidFactory1 </span>= new <span class=\"keyword\">AndroidFactory();</span></span><br><span class=\"line\"><span class=\"keyword\">SystemAbsProduct </span><span class=\"keyword\">androidSystem1 </span>= <span class=\"keyword\">androidFactory1.createSystem();</span></span><br><span class=\"line\"><span class=\"keyword\">ButtonAbsProduct </span><span class=\"keyword\">androidButton1 </span>= <span class=\"keyword\">androidFactory1.createButton();</span></span><br><span class=\"line\"><span class=\"keyword\">AbsFactory </span>iOSFactory1 = new IOSFactory()<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"symbol\">SystemAbsProduct</span> iOSSystem1 = iOSFactory1.createSystem()<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"keyword\">ButtonAbsProduct </span>iOSButton1 = iOSFactory1.createButton()<span class=\"comment\">;</span></span><br><span class=\"line\">//使用<span class=\"keyword\">Android的Button时，传入iOS操作系统</span></span><br><span class=\"line\"><span class=\"keyword\">Toast.makeText(this, </span><span class=\"keyword\">androidButton1.getButtonName(iOSSystem1), </span>Toast.LENGTH_SHORT).show()<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure></p>\n<p>上述演示代码，会提示系统不匹配。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>抽象工厂模式</strong>的最大优势就是分离了接口与实现，客户端使用工厂来创建所需对象，实现面向产品的接口编程，使其在切换产品类时更加灵活、容易。<br>当然缺点也非常明显，一是类文件的增加，二是不太容易扩展产品类，因为每添加一个新产品，都要修改工厂，随之所有工厂实现都要修改。<br><strong>抽象工厂模式</strong>与<a href=\"http://www.jianshu.com/p/cf3b3335af4b\" target=\"_blank\" rel=\"noopener\">工厂方法模式</a>的区别也很明显：<br><strong>抽象工厂模式</strong>用来生产一组相互依赖的产品。<br><a href=\"http://www.jianshu.com/p/cf3b3335af4b\" target=\"_blank\" rel=\"noopener\">工厂方法模式</a>用来批量生产一种产品。<br><a href=\"https://github.com/YuanTiger/Design-Pattern\" target=\"_blank\" rel=\"noopener\">抽象工厂模式的相关代码已经上传至GitHub</a>，需要的同学可以下载参考。</p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p><a href=\"https://www.zhihu.com/question/20367734/answer/82361745?from=singlemessage&amp;isappinstalled=0\" target=\"_blank\" rel=\"noopener\">抽象工厂模式和工厂模式的区别-caoglish的回答</a></p>\n<p>《Android源码设计模式解析与实战》 何红辉、关爱民 著</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"模式介绍\"><a href=\"#模式介绍\" class=\"headerlink\" title=\"模式介绍\"></a>模式介绍</h2><p>前段时间介绍了<a href=\"http://www.jianshu.com/p/cf3b3335af4b\" target=\"_blank\" rel=\"noopener\">工厂方法模式</a>。<br>本次介绍的模式非常容易和<a href=\"http://www.jianshu.com/p/cf3b3335af4b\" target=\"_blank\" rel=\"noopener\">工厂方法模式</a>混淆，并且复杂度也有一定的提升，叫做<strong>抽象工厂模式</strong>。<br>其实在现实生活中，工厂都会生产某一样具体的产品，不存在说抽象的工厂。<br>那么该模式的含义到底是什么呢？<br><strong>抽象工厂模式</strong>的出现最早是为了解决不同操作系统下的图形化处理，这就好比iOS中的Button、Android中的Button、WindowPhone中的Button一样，虽然都是Button，但系统的不同，会导致Button也存在差异。<br>这就引出了<strong>抽象工厂模式</strong>的定义：<br>为创建出<strong>一组相互依赖</strong>的对象提供一个封装接口。<br>定义中有几个关键字，需要注意：</p>\n<ul>\n<li>一组：这是和<a href=\"http://www.jianshu.com/p/cf3b3335af4b\" target=\"_blank\" rel=\"noopener\">工厂方法模式</a>的重要区别所在，<strong>抽象工厂模式</strong>用于生产多个产品，而不是一个。如果生产一个产品，请使用<a href=\"http://www.jianshu.com/p/cf3b3335af4b\" target=\"_blank\" rel=\"noopener\">工厂方法模式</a>或<a href=\"http://www.jianshu.com/p/07bed15cd13c\" target=\"_blank\" rel=\"noopener\">建造者模式</a>。</li>\n<li>相互依赖：生产出一组产品之后，这组产品<strong>一定</strong>是相互依赖的，注意是<strong>一定</strong>。就好比上面的例子中，Android系统能使用iOS系统的Button吗？答案是否定的，因为iOS的Button依赖于iOS系统。</li>\n</ul>\n<p>解释完名词，想必大家对<strong>抽象工厂模式</strong>的使用场景就有了一些认知：<br>当产品很多，并且有特定的关联可以进行抽象，就可以使用<strong>抽象工厂模式</strong>。</p>\n<h2 id=\"模式构成\"><a href=\"#模式构成\" class=\"headerlink\" title=\"模式构成\"></a>模式构成</h2><p><strong>抽象工厂模式</strong>的主要角色还是4个：</p>\n<ul>\n<li>AbstractFactory：抽象工厂，包含一组产品的生产抽象，<strong>每一个方法都应对应一个产品</strong>。</li>\n<li>ConcreteFactory：抽象工厂实现，应包含生产一组产品的具体实现。</li>\n<li>AbstractProduct：一组产品中的一个产品抽象。</li>\n<li>ConcreteProduct：具体的产品实现。</li>\n</ul>\n<h2 id=\"模式示例\"><a href=\"#模式示例\" class=\"headerlink\" title=\"模式示例\"></a>模式示例</h2><p>现在我们开始实现在上述介绍中提到的例子。<br>我们先来将思路捋一捋：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/DesignModel/design_abs_factory_0.png\" alt=\"对应关系\"></p>\n<ol>\n<li>我们产品包含：操作系统、Button。</li>\n<li>工厂应该生产一组产品，即生产操作系统和Button。</li>\n<li>生产出来的一组产品应相互依赖，并且和另一组产品相互独立。</li>\n</ol>\n<p>接下来，我们就按照思路来实现<strong>抽象工厂模式</strong>。<br>首先我们来初始化抽象产品<strong>AbstractProduct</strong>：<br>操作系统System：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">SystemAbsProduct</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取系统型号</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getSystem</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Button：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ButtonAbsProduct</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//按钮响应</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getButtonName</span>(<span class=\"params\">SystemAbsProduct system</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们可以发现，Button与操作系统存在依赖关系，这种依赖关系的体现由开发人员自己来控制，我这里只是个简单实例。<br>两个产品的抽象已经有了，我们先不急着去实现它们。<br>接下来我们来定义抽象工厂AbstractFactory，它应该有两个方法，分别返回系统和Button两个产品：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">AbsFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建操作系统</span></span><br><span class=\"line\">    <span class=\"function\">SystemAbsProduct <span class=\"title\">createSystem</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建Button</span></span><br><span class=\"line\">    <span class=\"function\">ButtonAbsProduct <span class=\"title\">createButton</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>到这里应该都没有什么问题，抽象工厂、抽象产品都已经创建完成了。<br>接下来我们想要分别构建出WindowPhone系统、Android系统、iOS系统下的Button。<br>我们应该能想到，必须要先要有具体的产品，才能用具体工厂来生产。<br>所以接下来，我们要先创建具体的产品：<br>操作系统<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SystemAbsProduct</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取系统型号</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getSystem</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WindowPhone</span> <span class=\"keyword\">implements</span> <span class=\"title\">SystemAbsProduct</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSystem</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> App.context.getString(R.string.window_phone);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">iOS</span> <span class=\"keyword\">implements</span> <span class=\"title\">SystemAbsProduct</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSystem</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> App.context.getString(R.string.ios);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Android</span> <span class=\"keyword\">implements</span> <span class=\"title\">SystemAbsProduct</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSystem</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> App.context.getString(R.string.android);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Button：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ButtonAbsProduct</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//按钮响应</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getButtonName</span>(<span class=\"params\">SystemAbsProduct system</span>)</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">WindowPhoneButton</span> <span class=\"title\">implements</span> <span class=\"title\">ButtonAbsProduct</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getButtonName</span>(<span class=\"params\">SystemAbsProduct system</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (system.getSystem().<span class=\"keyword\">equals</span>(App.context.getString(R.<span class=\"keyword\">string</span>.window_phone))) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"点击了WindowPhone系统的Button\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> App.context.getString(R.<span class=\"keyword\">string</span>.system_error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">IOSButton</span> <span class=\"title\">implements</span> <span class=\"title\">ButtonAbsProduct</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getButtonName</span>(<span class=\"params\">SystemAbsProduct system</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (system.getSystem().<span class=\"keyword\">equals</span>(App.context.getString(R.<span class=\"keyword\">string</span>.ios))) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"点击了iOS系统的Button\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> App.context.getString(R.<span class=\"keyword\">string</span>.system_error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AndroidButton</span> <span class=\"title\">implements</span> <span class=\"title\">ButtonAbsProduct</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getButtonName</span>(<span class=\"params\">SystemAbsProduct system</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (system.getSystem().<span class=\"keyword\">equals</span>(App.context.getString(R.<span class=\"keyword\">string</span>.android))) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">\"点击了Android系统的Button\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> App.context.getString(R.<span class=\"keyword\">string</span>.system_error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因为类的数量庞大，所以我选择使用内部类的形式来实现ConcreteProduct角色。<br>我们可以发现，在Button角色中，我们进行了简单的判断，当操作系统不匹配时，会提示用户，这就类似于运行崩溃的效果。<br>接下来，我们来创建最后一个角色：ConcreteFactory。<br>它应该有多个，每一个负责创建一组具体的产品，也就是说有多少组产品，就应该有多少个具体工厂：<br>WindowPhoneFactory：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WindowPhoneFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">AbsFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SystemAbsProduct <span class=\"title\">createSystem</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SystemAbsProduct.WindowPhone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ButtonAbsProduct <span class=\"title\">createButton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ButtonAbsProduct.WindowPhoneButton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>IOSFactory：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOSFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">AbsFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SystemAbsProduct <span class=\"title\">createSystem</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SystemAbsProduct.IOS();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ButtonAbsProduct <span class=\"title\">createButton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ButtonAbsProduct.IOSButton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>AndroidFactory：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndroidFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">AbsFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SystemAbsProduct <span class=\"title\">createSystem</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SystemAbsProduct.Android();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ButtonAbsProduct <span class=\"title\">createButton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ButtonAbsProduct.AndroidButton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>三个具体工厂分别具体产生三组相互依赖的产品。<br>至此，简单的<strong>抽象工厂模式</strong>已经构建完成。<br>但是最关键的还是使用，接下来我们来写一些简单的测试代码：<br><figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//构建WindowPhone具体工厂</span></span><br><span class=\"line\"><span class=\"type\">AbsFactory</span> iOSFactory = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">IOSFactory</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//构建操作系统</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">SystemAbsProduct</span> <span class=\"title\">iOSSystem</span> = <span class=\"title\">iOSFactory</span>.<span class=\"title\">createSystem</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//构建按钮</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ButtonAbsProduct</span> <span class=\"title\">iOSButton</span> = <span class=\"title\">iOSFactory</span>.<span class=\"title\">createButton</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//调用依赖</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Toast</span>.<span class=\"title\">makeText</span>(this, iOSButton.getButtonName(iOSSystem), <span class=\"title\">Toast</span>.<span class=\"title\">LENGTH_SHORT</span>).<span class=\"title\">show</span>();</span></span><br></pre></td></tr></table></figure></p>\n<p>创建iOS系统工厂，接着创建iOS系统和Button，最后调用Button的点击，会发现成功提示出调用成功。<br>如果我们使用错误的依赖：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">AbsFactory</span> <span class=\"keyword\">androidFactory1 </span>= new <span class=\"keyword\">AndroidFactory();</span></span><br><span class=\"line\"><span class=\"keyword\">SystemAbsProduct </span><span class=\"keyword\">androidSystem1 </span>= <span class=\"keyword\">androidFactory1.createSystem();</span></span><br><span class=\"line\"><span class=\"keyword\">ButtonAbsProduct </span><span class=\"keyword\">androidButton1 </span>= <span class=\"keyword\">androidFactory1.createButton();</span></span><br><span class=\"line\"><span class=\"keyword\">AbsFactory </span>iOSFactory1 = new IOSFactory()<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"symbol\">SystemAbsProduct</span> iOSSystem1 = iOSFactory1.createSystem()<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"keyword\">ButtonAbsProduct </span>iOSButton1 = iOSFactory1.createButton()<span class=\"comment\">;</span></span><br><span class=\"line\">//使用<span class=\"keyword\">Android的Button时，传入iOS操作系统</span></span><br><span class=\"line\"><span class=\"keyword\">Toast.makeText(this, </span><span class=\"keyword\">androidButton1.getButtonName(iOSSystem1), </span>Toast.LENGTH_SHORT).show()<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure></p>\n<p>上述演示代码，会提示系统不匹配。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>抽象工厂模式</strong>的最大优势就是分离了接口与实现，客户端使用工厂来创建所需对象，实现面向产品的接口编程，使其在切换产品类时更加灵活、容易。<br>当然缺点也非常明显，一是类文件的增加，二是不太容易扩展产品类，因为每添加一个新产品，都要修改工厂，随之所有工厂实现都要修改。<br><strong>抽象工厂模式</strong>与<a href=\"http://www.jianshu.com/p/cf3b3335af4b\" target=\"_blank\" rel=\"noopener\">工厂方法模式</a>的区别也很明显：<br><strong>抽象工厂模式</strong>用来生产一组相互依赖的产品。<br><a href=\"http://www.jianshu.com/p/cf3b3335af4b\" target=\"_blank\" rel=\"noopener\">工厂方法模式</a>用来批量生产一种产品。<br><a href=\"https://github.com/YuanTiger/Design-Pattern\" target=\"_blank\" rel=\"noopener\">抽象工厂模式的相关代码已经上传至GitHub</a>，需要的同学可以下载参考。</p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p><a href=\"https://www.zhihu.com/question/20367734/answer/82361745?from=singlemessage&amp;isappinstalled=0\" target=\"_blank\" rel=\"noopener\">抽象工厂模式和工厂模式的区别-caoglish的回答</a></p>\n<p>《Android源码设计模式解析与实战》 何红辉、关爱民 著</p>\n"},{"title":"对象构造简单化-建造者模式","date":"2017-07-05T07:47:53.000Z","_content":"## 模式介绍 ##\nBuilder模式是指一步一步来构建出一个复杂的对象。\n它允许用户在不知道内部构建细节的情况下，非常精细地控制对象构建流程。\n该模式是为了将构建过程非常复杂的对象进行拆分，让它与它的部件解耦，提升代码的可读性以及扩展性。\n\n## 模式结构 ##\n**建造者模式**包含如下角色：\n- Product：产品角色\n- Builder：**抽象**的建造者\n- ConcreteBuilder：具体的建造者\n- Director：指挥者\n\n## 模式示例 ##\n我们来举个生活中的例子来描述**建造者模式**的各个角色：\n假设我们现在是一个手机的生产商，各大手机厂商都会来找我们制造手机，比如小米、华为、三星、魅族等。每个厂商的手机配置都不一致，包括CPU型号、内存大小、像素大小等等。\n现在我们将这个例子中的对象转化成**建造者模式**的各个角色：\n- Product：我们生产的手机就是商品，Product中应该包含手机的各个部件。\n- Builder：抽象Builder类，细节全在ConcreteBuilder中。\n- ConcreteBuilder：继承了Builder类，这里有手机的组装细节。\n- Director：这里的指挥者就是各大手机厂商，我要让你生产一台小米手机并给了你一系列参数，你就要按照参数，生产我想要的手机，其他手机也是同样的同理。\n\n纸上谈兵终觉浅，我们将上述实例转化成代码看一看：\n首先是Product，它应该包含手机的零件元素：\n```\npublic class PhoneProduct {\n\n    private String brand;//品牌\n    private String CPU;//CPU\n    private String memorySize;//内存大小\n    private String pixel;//像素大小\n\n\n    public void setBrand(String brand) {\n        this.brand = brand;\n    }\n\n    public void setCPU(String CPU) {\n        this.CPU = CPU;\n    }\n\n    public void setMemorySize(String memorySize) {\n        this.memorySize = memorySize;\n    }\n\n    public void setPixel(String pixel) {\n        this.pixel = pixel;\n    }\n\n    @Override\n    public String toString() {\n        return \"品牌：\" + brand +\n                \"\\nCPU：\" + CPU +\n                \"\\n内存大小：\" + memorySize +\n                \"\\n像素大小：\" + pixel;\n    }\n\n```\n我们可以看出，一台手机的构建元素有：品牌、CPU、内存大小以及像素大小，如果还有其他元素，只需要继续添加成员变量即可。\n有了手机的构建元素，如何将这些元素拼接成手机，就是Builder要做的事情了：\n```\npublic abstract class PhoneBuilder {\n    //构建手机品牌\n    public abstract void buildBrand(String brand);\n    //构建手机CPU\n    public abstract void buildCPU(String cpu);\n    //构建手机内存\n    public abstract void buildMemorySize(String memorySize);\n    //构建手机像素大小\n    public abstract void buildPixel(String pixel);\n    //将各个零件进行拼接\n    public abstract PhoneProduct create();\n}\n```\n可以看到抽象的Builder类中有各个元素的组装方法，并且最后还有一个将手机进行组装的方法：`create()`。\n接下来我们使用**ConcreteBuilder**来继承**Builder**并实现具体的组装细节：\n```\npublic class ConcretePhoneBuilder extends PhoneBuilder {\n    //商品手机\n    private PhoneProduct product = new PhoneProduct();\n    \n    @Override\n    public void buildBrand(String brand) {\n        product.setBrand(brand);\n    }\n\n    @Override\n    public void buildCPU(String cpu) {\n        product.setCPU(cpu);\n    }\n\n    @Override\n    public void buildMemorySize(String memorySize) {\n        product.setMemorySize(memorySize);\n    }\n\n    @Override\n    public void buildPixel(String pixel) {\n        product.setPixel(pixel);\n    }\n\n    @Override\n    public PhoneProduct create() {\n        return product;\n    }\n}\n\n```\n**ConcreteBuilder**中包含了每个零件组装和最后拼接过程**create()**的所有细节。\n到这里，我们作为一个手机生产商，已经具备了生产手机的能力，接下来就要接待客户了！\n平时大家都说，客户是上帝。今天在这里，也是如此。\n所以起到主导作用的，就是我们的客户**Director**：\n```\npublic class PhoneDirector {\n\n    private PhoneBuilder builder;\n\n    public PhoneDirector(PhoneBuilder builder) {\n        this.builder = builder;\n    }\n\n    public PhoneProduct constuct(String brand, String cpu, String memorySize, String pixel) {\n\n\n        builder.buildBrand(brand);\n        builder.buildCPU(cpu);\n        builder.buildMemorySize(memorySize);\n        builder.buildPixel(pixel);\n\n        return builder.create();\n    }\n}\n```\n可以看到**Director**中持有PhoneBuilder对象，这里的**constuct(,,,,)**就相当于客户的需求，告诉我们手机的具体配置，接着我们拿着具体需求去**ConcreteBuilder**中构建具体的手机，并返回给用户。\n整个**建造者模式**就是这样的，接下来我们来做下简单的测试：\n```\n//创建Builder对象\nPhoneBuilder miBuilder = new ConcretePhoneBuilder();\n//创建管理者\nPhoneDirector director = new PhoneDirector(miBuilder);\n//生成商品\nPhoneProduct product = director.constuct(\"小米\", \"骁龙825\", \"4GB\", \"1500万像素\");\n//展示构建结果\ntextView.setText(product.toString());\n```\n首先创建**Builder**并传递给**Director**，接下来调用**Director**的构建方法并传递需求，一台手机就构建出来了。\n在这个过程中，管理者**Director**完全不知手机道构建细节。代码的扩展性以及可读性都有质的提升。\n\n## 模式变形 ##\n在刚刚接触到Builder模式时，我就发现了于我而言，一个非常巨大的应用场景，完美解决一个让我极其难受的问题。\n[由于篇幅问题，模式变形我决定新起一篇文章中解释](https://YuanTiger.github.io/2017/07/11/Builder-Dialog/)。\n## 总结 ##\n[Demo我已经上传至GitHub，各位看官可自行食用](https://github.com/YuanTiger/Design-Pattern)。\n上面的例子，仅仅是个例子，看起来似乎仅仅是增加了工作量。\n但事实并不是这样的，这种写法的扩展性、可读性都是有很大提升的，希望各位看官都可以理解这种**代码思想**。\n还有一点是，**建造者模式**与之后要讲到的**工厂模式**类似，他们都是建造者模式，适用的场景也很相似。\n一般来说，如果产品的建造很复杂，那么请用**工厂模式**；如果产品的建造**更复**杂，那么请用**建造者模式**。\n\n## 感谢 ##\n\n《Android源码设计模式解析与实战》 何红辉、关爱民 著","source":"_posts/Design-Builder.md","raw":"---\ntitle: 对象构造简单化-建造者模式\ndate: 2017-07-05 15:47:53\ntags:\n   - 编程思想\n---\n## 模式介绍 ##\nBuilder模式是指一步一步来构建出一个复杂的对象。\n它允许用户在不知道内部构建细节的情况下，非常精细地控制对象构建流程。\n该模式是为了将构建过程非常复杂的对象进行拆分，让它与它的部件解耦，提升代码的可读性以及扩展性。\n\n## 模式结构 ##\n**建造者模式**包含如下角色：\n- Product：产品角色\n- Builder：**抽象**的建造者\n- ConcreteBuilder：具体的建造者\n- Director：指挥者\n\n## 模式示例 ##\n我们来举个生活中的例子来描述**建造者模式**的各个角色：\n假设我们现在是一个手机的生产商，各大手机厂商都会来找我们制造手机，比如小米、华为、三星、魅族等。每个厂商的手机配置都不一致，包括CPU型号、内存大小、像素大小等等。\n现在我们将这个例子中的对象转化成**建造者模式**的各个角色：\n- Product：我们生产的手机就是商品，Product中应该包含手机的各个部件。\n- Builder：抽象Builder类，细节全在ConcreteBuilder中。\n- ConcreteBuilder：继承了Builder类，这里有手机的组装细节。\n- Director：这里的指挥者就是各大手机厂商，我要让你生产一台小米手机并给了你一系列参数，你就要按照参数，生产我想要的手机，其他手机也是同样的同理。\n\n纸上谈兵终觉浅，我们将上述实例转化成代码看一看：\n首先是Product，它应该包含手机的零件元素：\n```\npublic class PhoneProduct {\n\n    private String brand;//品牌\n    private String CPU;//CPU\n    private String memorySize;//内存大小\n    private String pixel;//像素大小\n\n\n    public void setBrand(String brand) {\n        this.brand = brand;\n    }\n\n    public void setCPU(String CPU) {\n        this.CPU = CPU;\n    }\n\n    public void setMemorySize(String memorySize) {\n        this.memorySize = memorySize;\n    }\n\n    public void setPixel(String pixel) {\n        this.pixel = pixel;\n    }\n\n    @Override\n    public String toString() {\n        return \"品牌：\" + brand +\n                \"\\nCPU：\" + CPU +\n                \"\\n内存大小：\" + memorySize +\n                \"\\n像素大小：\" + pixel;\n    }\n\n```\n我们可以看出，一台手机的构建元素有：品牌、CPU、内存大小以及像素大小，如果还有其他元素，只需要继续添加成员变量即可。\n有了手机的构建元素，如何将这些元素拼接成手机，就是Builder要做的事情了：\n```\npublic abstract class PhoneBuilder {\n    //构建手机品牌\n    public abstract void buildBrand(String brand);\n    //构建手机CPU\n    public abstract void buildCPU(String cpu);\n    //构建手机内存\n    public abstract void buildMemorySize(String memorySize);\n    //构建手机像素大小\n    public abstract void buildPixel(String pixel);\n    //将各个零件进行拼接\n    public abstract PhoneProduct create();\n}\n```\n可以看到抽象的Builder类中有各个元素的组装方法，并且最后还有一个将手机进行组装的方法：`create()`。\n接下来我们使用**ConcreteBuilder**来继承**Builder**并实现具体的组装细节：\n```\npublic class ConcretePhoneBuilder extends PhoneBuilder {\n    //商品手机\n    private PhoneProduct product = new PhoneProduct();\n    \n    @Override\n    public void buildBrand(String brand) {\n        product.setBrand(brand);\n    }\n\n    @Override\n    public void buildCPU(String cpu) {\n        product.setCPU(cpu);\n    }\n\n    @Override\n    public void buildMemorySize(String memorySize) {\n        product.setMemorySize(memorySize);\n    }\n\n    @Override\n    public void buildPixel(String pixel) {\n        product.setPixel(pixel);\n    }\n\n    @Override\n    public PhoneProduct create() {\n        return product;\n    }\n}\n\n```\n**ConcreteBuilder**中包含了每个零件组装和最后拼接过程**create()**的所有细节。\n到这里，我们作为一个手机生产商，已经具备了生产手机的能力，接下来就要接待客户了！\n平时大家都说，客户是上帝。今天在这里，也是如此。\n所以起到主导作用的，就是我们的客户**Director**：\n```\npublic class PhoneDirector {\n\n    private PhoneBuilder builder;\n\n    public PhoneDirector(PhoneBuilder builder) {\n        this.builder = builder;\n    }\n\n    public PhoneProduct constuct(String brand, String cpu, String memorySize, String pixel) {\n\n\n        builder.buildBrand(brand);\n        builder.buildCPU(cpu);\n        builder.buildMemorySize(memorySize);\n        builder.buildPixel(pixel);\n\n        return builder.create();\n    }\n}\n```\n可以看到**Director**中持有PhoneBuilder对象，这里的**constuct(,,,,)**就相当于客户的需求，告诉我们手机的具体配置，接着我们拿着具体需求去**ConcreteBuilder**中构建具体的手机，并返回给用户。\n整个**建造者模式**就是这样的，接下来我们来做下简单的测试：\n```\n//创建Builder对象\nPhoneBuilder miBuilder = new ConcretePhoneBuilder();\n//创建管理者\nPhoneDirector director = new PhoneDirector(miBuilder);\n//生成商品\nPhoneProduct product = director.constuct(\"小米\", \"骁龙825\", \"4GB\", \"1500万像素\");\n//展示构建结果\ntextView.setText(product.toString());\n```\n首先创建**Builder**并传递给**Director**，接下来调用**Director**的构建方法并传递需求，一台手机就构建出来了。\n在这个过程中，管理者**Director**完全不知手机道构建细节。代码的扩展性以及可读性都有质的提升。\n\n## 模式变形 ##\n在刚刚接触到Builder模式时，我就发现了于我而言，一个非常巨大的应用场景，完美解决一个让我极其难受的问题。\n[由于篇幅问题，模式变形我决定新起一篇文章中解释](https://YuanTiger.github.io/2017/07/11/Builder-Dialog/)。\n## 总结 ##\n[Demo我已经上传至GitHub，各位看官可自行食用](https://github.com/YuanTiger/Design-Pattern)。\n上面的例子，仅仅是个例子，看起来似乎仅仅是增加了工作量。\n但事实并不是这样的，这种写法的扩展性、可读性都是有很大提升的，希望各位看官都可以理解这种**代码思想**。\n还有一点是，**建造者模式**与之后要讲到的**工厂模式**类似，他们都是建造者模式，适用的场景也很相似。\n一般来说，如果产品的建造很复杂，那么请用**工厂模式**；如果产品的建造**更复**杂，那么请用**建造者模式**。\n\n## 感谢 ##\n\n《Android源码设计模式解析与实战》 何红辉、关爱民 著","slug":"Design-Builder","published":1,"updated":"2018-08-24T09:36:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7sxdw3000fhnnfgorpk301","content":"<h2 id=\"模式介绍\"><a href=\"#模式介绍\" class=\"headerlink\" title=\"模式介绍\"></a>模式介绍</h2><p>Builder模式是指一步一步来构建出一个复杂的对象。<br>它允许用户在不知道内部构建细节的情况下，非常精细地控制对象构建流程。<br>该模式是为了将构建过程非常复杂的对象进行拆分，让它与它的部件解耦，提升代码的可读性以及扩展性。</p>\n<h2 id=\"模式结构\"><a href=\"#模式结构\" class=\"headerlink\" title=\"模式结构\"></a>模式结构</h2><p><strong>建造者模式</strong>包含如下角色：</p>\n<ul>\n<li>Product：产品角色</li>\n<li>Builder：<strong>抽象</strong>的建造者</li>\n<li>ConcreteBuilder：具体的建造者</li>\n<li>Director：指挥者</li>\n</ul>\n<h2 id=\"模式示例\"><a href=\"#模式示例\" class=\"headerlink\" title=\"模式示例\"></a>模式示例</h2><p>我们来举个生活中的例子来描述<strong>建造者模式</strong>的各个角色：<br>假设我们现在是一个手机的生产商，各大手机厂商都会来找我们制造手机，比如小米、华为、三星、魅族等。每个厂商的手机配置都不一致，包括CPU型号、内存大小、像素大小等等。<br>现在我们将这个例子中的对象转化成<strong>建造者模式</strong>的各个角色：</p>\n<ul>\n<li>Product：我们生产的手机就是商品，Product中应该包含手机的各个部件。</li>\n<li>Builder：抽象Builder类，细节全在ConcreteBuilder中。</li>\n<li>ConcreteBuilder：继承了Builder类，这里有手机的组装细节。</li>\n<li>Director：这里的指挥者就是各大手机厂商，我要让你生产一台小米手机并给了你一系列参数，你就要按照参数，生产我想要的手机，其他手机也是同样的同理。</li>\n</ul>\n<p>纸上谈兵终觉浅，我们将上述实例转化成代码看一看：<br>首先是Product，它应该包含手机的零件元素：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> PhoneProduct &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">String</span> brand;<span class=\"comment\">//品牌</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">String</span> CPU;<span class=\"comment\">//CPU</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">String</span> memorySize;<span class=\"comment\">//内存大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">String</span> pixel;<span class=\"comment\">//像素大小</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">void</span> setBrand(<span class=\"built_in\">String</span> brand) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.brand = brand;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">void</span> setCPU(<span class=\"built_in\">String</span> CPU) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.CPU = CPU;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">void</span> setMemorySize(<span class=\"built_in\">String</span> memorySize) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.memorySize = memorySize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">void</span> setPixel(<span class=\"built_in\">String</span> pixel) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pixel = pixel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">String</span> toString() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"品牌：\"</span> + brand +</span><br><span class=\"line\">                <span class=\"string\">\"\\nCPU：\"</span> + CPU +</span><br><span class=\"line\">                <span class=\"string\">\"\\n内存大小：\"</span> + memorySize +</span><br><span class=\"line\">                <span class=\"string\">\"\\n像素大小：\"</span> + pixel;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们可以看出，一台手机的构建元素有：品牌、CPU、内存大小以及像素大小，如果还有其他元素，只需要继续添加成员变量即可。<br>有了手机的构建元素，如何将这些元素拼接成手机，就是Builder要做的事情了：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">PhoneBuilder</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//构建手机品牌</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildBrand</span>(<span class=\"params\">String brand</span>)</span>;</span><br><span class=\"line\">    <span class=\"comment\">//构建手机CPU</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildCPU</span>(<span class=\"params\">String cpu</span>)</span>;</span><br><span class=\"line\">    <span class=\"comment\">//构建手机内存</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildMemorySize</span>(<span class=\"params\">String memorySize</span>)</span>;</span><br><span class=\"line\">    <span class=\"comment\">//构建手机像素大小</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildPixel</span>(<span class=\"params\">String pixel</span>)</span>;</span><br><span class=\"line\">    <span class=\"comment\">//将各个零件进行拼接</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> PhoneProduct <span class=\"title\">create</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到抽象的Builder类中有各个元素的组装方法，并且最后还有一个将手机进行组装的方法：<code>create()</code>。<br>接下来我们使用<strong>ConcreteBuilder</strong>来继承<strong>Builder</strong>并实现具体的组装细节：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcretePhoneBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">PhoneBuilder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//商品手机</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PhoneProduct product = <span class=\"keyword\">new</span> PhoneProduct();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buildBrand</span><span class=\"params\">(String brand)</span> </span>&#123;</span><br><span class=\"line\">        product.setBrand(brand);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buildCPU</span><span class=\"params\">(String cpu)</span> </span>&#123;</span><br><span class=\"line\">        product.setCPU(cpu);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buildMemorySize</span><span class=\"params\">(String memorySize)</span> </span>&#123;</span><br><span class=\"line\">        product.setMemorySize(memorySize);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buildPixel</span><span class=\"params\">(String pixel)</span> </span>&#123;</span><br><span class=\"line\">        product.setPixel(pixel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PhoneProduct <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> product;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>ConcreteBuilder</strong>中包含了每个零件组装和最后拼接过程<strong>create()</strong>的所有细节。<br>到这里，我们作为一个手机生产商，已经具备了生产手机的能力，接下来就要接待客户了！<br>平时大家都说，客户是上帝。今天在这里，也是如此。<br>所以起到主导作用的，就是我们的客户<strong>Director</strong>：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">public</span> class PhoneDirector &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private PhoneBuilder <span class=\"keyword\">builder;</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\"> </span>   public PhoneDirector(PhoneBuilder <span class=\"keyword\">builder) </span>&#123;</span><br><span class=\"line\">        this.<span class=\"keyword\">builder </span>= <span class=\"keyword\">builder;</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public PhoneProduct constuct(<span class=\"keyword\">String </span><span class=\"keyword\">brand, </span><span class=\"keyword\">String </span>cpu, <span class=\"keyword\">String </span>memorySize, <span class=\"keyword\">String </span>pixel) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">builder.buildBrand(brand);</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>       <span class=\"keyword\">builder.buildCPU(cpu);</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>       <span class=\"keyword\">builder.buildMemorySize(memorySize);</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>       <span class=\"keyword\">builder.buildPixel(pixel);</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\"> </span>       return <span class=\"keyword\">builder.create();</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到<strong>Director</strong>中持有PhoneBuilder对象，这里的<strong>constuct(,,,,)</strong>就相当于客户的需求，告诉我们手机的具体配置，接着我们拿着具体需求去<strong>ConcreteBuilder</strong>中构建具体的手机，并返回给用户。<br>整个<strong>建造者模式</strong>就是这样的，接下来我们来做下简单的测试：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建Builder对象</span></span><br><span class=\"line\">PhoneBuilder miBuilder = <span class=\"keyword\">new</span> <span class=\"type\">ConcretePhoneBuilder</span>();</span><br><span class=\"line\"><span class=\"comment\">//创建管理者</span></span><br><span class=\"line\">PhoneDirector director = <span class=\"keyword\">new</span> <span class=\"type\">PhoneDirector</span>(miBuilder);</span><br><span class=\"line\"><span class=\"comment\">//生成商品</span></span><br><span class=\"line\">PhoneProduct product = director.constuct(<span class=\"string\">\"小米\"</span>, <span class=\"string\">\"骁龙825\"</span>, <span class=\"string\">\"4GB\"</span>, <span class=\"string\">\"1500万像素\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//展示构建结果</span></span><br><span class=\"line\">textView.setText(product.toString());</span><br></pre></td></tr></table></figure></p>\n<p>首先创建<strong>Builder</strong>并传递给<strong>Director</strong>，接下来调用<strong>Director</strong>的构建方法并传递需求，一台手机就构建出来了。<br>在这个过程中，管理者<strong>Director</strong>完全不知手机道构建细节。代码的扩展性以及可读性都有质的提升。</p>\n<h2 id=\"模式变形\"><a href=\"#模式变形\" class=\"headerlink\" title=\"模式变形\"></a>模式变形</h2><p>在刚刚接触到Builder模式时，我就发现了于我而言，一个非常巨大的应用场景，完美解决一个让我极其难受的问题。<br><a href=\"https://YuanTiger.github.io/2017/07/11/Builder-Dialog/\" target=\"_blank\" rel=\"noopener\">由于篇幅问题，模式变形我决定新起一篇文章中解释</a>。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><a href=\"https://github.com/YuanTiger/Design-Pattern\" target=\"_blank\" rel=\"noopener\">Demo我已经上传至GitHub，各位看官可自行食用</a>。<br>上面的例子，仅仅是个例子，看起来似乎仅仅是增加了工作量。<br>但事实并不是这样的，这种写法的扩展性、可读性都是有很大提升的，希望各位看官都可以理解这种<strong>代码思想</strong>。<br>还有一点是，<strong>建造者模式</strong>与之后要讲到的<strong>工厂模式</strong>类似，他们都是建造者模式，适用的场景也很相似。<br>一般来说，如果产品的建造很复杂，那么请用<strong>工厂模式</strong>；如果产品的建造<strong>更复</strong>杂，那么请用<strong>建造者模式</strong>。</p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p>《Android源码设计模式解析与实战》 何红辉、关爱民 著</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"模式介绍\"><a href=\"#模式介绍\" class=\"headerlink\" title=\"模式介绍\"></a>模式介绍</h2><p>Builder模式是指一步一步来构建出一个复杂的对象。<br>它允许用户在不知道内部构建细节的情况下，非常精细地控制对象构建流程。<br>该模式是为了将构建过程非常复杂的对象进行拆分，让它与它的部件解耦，提升代码的可读性以及扩展性。</p>\n<h2 id=\"模式结构\"><a href=\"#模式结构\" class=\"headerlink\" title=\"模式结构\"></a>模式结构</h2><p><strong>建造者模式</strong>包含如下角色：</p>\n<ul>\n<li>Product：产品角色</li>\n<li>Builder：<strong>抽象</strong>的建造者</li>\n<li>ConcreteBuilder：具体的建造者</li>\n<li>Director：指挥者</li>\n</ul>\n<h2 id=\"模式示例\"><a href=\"#模式示例\" class=\"headerlink\" title=\"模式示例\"></a>模式示例</h2><p>我们来举个生活中的例子来描述<strong>建造者模式</strong>的各个角色：<br>假设我们现在是一个手机的生产商，各大手机厂商都会来找我们制造手机，比如小米、华为、三星、魅族等。每个厂商的手机配置都不一致，包括CPU型号、内存大小、像素大小等等。<br>现在我们将这个例子中的对象转化成<strong>建造者模式</strong>的各个角色：</p>\n<ul>\n<li>Product：我们生产的手机就是商品，Product中应该包含手机的各个部件。</li>\n<li>Builder：抽象Builder类，细节全在ConcreteBuilder中。</li>\n<li>ConcreteBuilder：继承了Builder类，这里有手机的组装细节。</li>\n<li>Director：这里的指挥者就是各大手机厂商，我要让你生产一台小米手机并给了你一系列参数，你就要按照参数，生产我想要的手机，其他手机也是同样的同理。</li>\n</ul>\n<p>纸上谈兵终觉浅，我们将上述实例转化成代码看一看：<br>首先是Product，它应该包含手机的零件元素：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> PhoneProduct &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">String</span> brand;<span class=\"comment\">//品牌</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">String</span> CPU;<span class=\"comment\">//CPU</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">String</span> memorySize;<span class=\"comment\">//内存大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">String</span> pixel;<span class=\"comment\">//像素大小</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">void</span> setBrand(<span class=\"built_in\">String</span> brand) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.brand = brand;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">void</span> setCPU(<span class=\"built_in\">String</span> CPU) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.CPU = CPU;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">void</span> setMemorySize(<span class=\"built_in\">String</span> memorySize) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.memorySize = memorySize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">void</span> setPixel(<span class=\"built_in\">String</span> pixel) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pixel = pixel;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">String</span> toString() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"品牌：\"</span> + brand +</span><br><span class=\"line\">                <span class=\"string\">\"\\nCPU：\"</span> + CPU +</span><br><span class=\"line\">                <span class=\"string\">\"\\n内存大小：\"</span> + memorySize +</span><br><span class=\"line\">                <span class=\"string\">\"\\n像素大小：\"</span> + pixel;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们可以看出，一台手机的构建元素有：品牌、CPU、内存大小以及像素大小，如果还有其他元素，只需要继续添加成员变量即可。<br>有了手机的构建元素，如何将这些元素拼接成手机，就是Builder要做的事情了：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">PhoneBuilder</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//构建手机品牌</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildBrand</span>(<span class=\"params\">String brand</span>)</span>;</span><br><span class=\"line\">    <span class=\"comment\">//构建手机CPU</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildCPU</span>(<span class=\"params\">String cpu</span>)</span>;</span><br><span class=\"line\">    <span class=\"comment\">//构建手机内存</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildMemorySize</span>(<span class=\"params\">String memorySize</span>)</span>;</span><br><span class=\"line\">    <span class=\"comment\">//构建手机像素大小</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildPixel</span>(<span class=\"params\">String pixel</span>)</span>;</span><br><span class=\"line\">    <span class=\"comment\">//将各个零件进行拼接</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> PhoneProduct <span class=\"title\">create</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到抽象的Builder类中有各个元素的组装方法，并且最后还有一个将手机进行组装的方法：<code>create()</code>。<br>接下来我们使用<strong>ConcreteBuilder</strong>来继承<strong>Builder</strong>并实现具体的组装细节：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcretePhoneBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">PhoneBuilder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//商品手机</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PhoneProduct product = <span class=\"keyword\">new</span> PhoneProduct();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buildBrand</span><span class=\"params\">(String brand)</span> </span>&#123;</span><br><span class=\"line\">        product.setBrand(brand);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buildCPU</span><span class=\"params\">(String cpu)</span> </span>&#123;</span><br><span class=\"line\">        product.setCPU(cpu);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buildMemorySize</span><span class=\"params\">(String memorySize)</span> </span>&#123;</span><br><span class=\"line\">        product.setMemorySize(memorySize);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buildPixel</span><span class=\"params\">(String pixel)</span> </span>&#123;</span><br><span class=\"line\">        product.setPixel(pixel);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PhoneProduct <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> product;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>ConcreteBuilder</strong>中包含了每个零件组装和最后拼接过程<strong>create()</strong>的所有细节。<br>到这里，我们作为一个手机生产商，已经具备了生产手机的能力，接下来就要接待客户了！<br>平时大家都说，客户是上帝。今天在这里，也是如此。<br>所以起到主导作用的，就是我们的客户<strong>Director</strong>：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">public</span> class PhoneDirector &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private PhoneBuilder <span class=\"keyword\">builder;</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\"> </span>   public PhoneDirector(PhoneBuilder <span class=\"keyword\">builder) </span>&#123;</span><br><span class=\"line\">        this.<span class=\"keyword\">builder </span>= <span class=\"keyword\">builder;</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public PhoneProduct constuct(<span class=\"keyword\">String </span><span class=\"keyword\">brand, </span><span class=\"keyword\">String </span>cpu, <span class=\"keyword\">String </span>memorySize, <span class=\"keyword\">String </span>pixel) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">builder.buildBrand(brand);</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>       <span class=\"keyword\">builder.buildCPU(cpu);</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>       <span class=\"keyword\">builder.buildMemorySize(memorySize);</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>       <span class=\"keyword\">builder.buildPixel(pixel);</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\"> </span>       return <span class=\"keyword\">builder.create();</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到<strong>Director</strong>中持有PhoneBuilder对象，这里的<strong>constuct(,,,,)</strong>就相当于客户的需求，告诉我们手机的具体配置，接着我们拿着具体需求去<strong>ConcreteBuilder</strong>中构建具体的手机，并返回给用户。<br>整个<strong>建造者模式</strong>就是这样的，接下来我们来做下简单的测试：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建Builder对象</span></span><br><span class=\"line\">PhoneBuilder miBuilder = <span class=\"keyword\">new</span> <span class=\"type\">ConcretePhoneBuilder</span>();</span><br><span class=\"line\"><span class=\"comment\">//创建管理者</span></span><br><span class=\"line\">PhoneDirector director = <span class=\"keyword\">new</span> <span class=\"type\">PhoneDirector</span>(miBuilder);</span><br><span class=\"line\"><span class=\"comment\">//生成商品</span></span><br><span class=\"line\">PhoneProduct product = director.constuct(<span class=\"string\">\"小米\"</span>, <span class=\"string\">\"骁龙825\"</span>, <span class=\"string\">\"4GB\"</span>, <span class=\"string\">\"1500万像素\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//展示构建结果</span></span><br><span class=\"line\">textView.setText(product.toString());</span><br></pre></td></tr></table></figure></p>\n<p>首先创建<strong>Builder</strong>并传递给<strong>Director</strong>，接下来调用<strong>Director</strong>的构建方法并传递需求，一台手机就构建出来了。<br>在这个过程中，管理者<strong>Director</strong>完全不知手机道构建细节。代码的扩展性以及可读性都有质的提升。</p>\n<h2 id=\"模式变形\"><a href=\"#模式变形\" class=\"headerlink\" title=\"模式变形\"></a>模式变形</h2><p>在刚刚接触到Builder模式时，我就发现了于我而言，一个非常巨大的应用场景，完美解决一个让我极其难受的问题。<br><a href=\"https://YuanTiger.github.io/2017/07/11/Builder-Dialog/\" target=\"_blank\" rel=\"noopener\">由于篇幅问题，模式变形我决定新起一篇文章中解释</a>。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><a href=\"https://github.com/YuanTiger/Design-Pattern\" target=\"_blank\" rel=\"noopener\">Demo我已经上传至GitHub，各位看官可自行食用</a>。<br>上面的例子，仅仅是个例子，看起来似乎仅仅是增加了工作量。<br>但事实并不是这样的，这种写法的扩展性、可读性都是有很大提升的，希望各位看官都可以理解这种<strong>代码思想</strong>。<br>还有一点是，<strong>建造者模式</strong>与之后要讲到的<strong>工厂模式</strong>类似，他们都是建造者模式，适用的场景也很相似。<br>一般来说，如果产品的建造很复杂，那么请用<strong>工厂模式</strong>；如果产品的建造<strong>更复</strong>杂，那么请用<strong>建造者模式</strong>。</p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p>《Android源码设计模式解析与实战》 何红辉、关爱民 著</p>\n"},{"title":"23种设计模式","date":"2017-05-31T06:52:23.000Z","_content":"1. [单例模式](https://YuanTiger.github.io/2017/05/27/Design-Single/)\n2. [建造者模式](https://YuanTiger.github.io/2017/07/05/Design-Builder/)\n3. [原型模式](https://YuanTiger.github.io/2017/07/15/Design-Clone/)\n4. [工厂方法模式](https://YuanTiger.github.io/2017/07/24/Design-Factory/)\n5. [抽象工厂模式](https://YuanTiger.github.io/2017/08/02/Design-Abs-Factory/)\n6. [策略模式](https://YuanTiger.github.io/2017/08/02/Design-Strategy/)\n7. [状态模式](https://yuantiger.github.io/2017/11/14/Design-State/)\n8. [责任链模式](https://yuantiger.github.io/2017/11/16/Design-Responsibility/)\n9. [解释器模式]()\n10. [命令模式]()\n11. [观察者模式]()\n12. [备忘录模式]()\n13. [迭代器模式]()\n14. [模板方法模式]()\n15. [访问者模式]()\n16. [中介者模式]()\n17. [代理模式]()\n18. [组合模式]()\n19. [适配器模式]()\n20. [装饰模式]()\n21. [享元模式]()\n22. [外观模式]()\n23. [桥接模式]()\n\n参考：《Android源码设计模式解析与实战》 何红辉、关爱民 著","source":"_posts/Design-Catalog.md","raw":"---\ntitle: 23种设计模式\ndate: 2017-05-31 14:52:23\ntags:\n   - 编程思想\n---\n1. [单例模式](https://YuanTiger.github.io/2017/05/27/Design-Single/)\n2. [建造者模式](https://YuanTiger.github.io/2017/07/05/Design-Builder/)\n3. [原型模式](https://YuanTiger.github.io/2017/07/15/Design-Clone/)\n4. [工厂方法模式](https://YuanTiger.github.io/2017/07/24/Design-Factory/)\n5. [抽象工厂模式](https://YuanTiger.github.io/2017/08/02/Design-Abs-Factory/)\n6. [策略模式](https://YuanTiger.github.io/2017/08/02/Design-Strategy/)\n7. [状态模式](https://yuantiger.github.io/2017/11/14/Design-State/)\n8. [责任链模式](https://yuantiger.github.io/2017/11/16/Design-Responsibility/)\n9. [解释器模式]()\n10. [命令模式]()\n11. [观察者模式]()\n12. [备忘录模式]()\n13. [迭代器模式]()\n14. [模板方法模式]()\n15. [访问者模式]()\n16. [中介者模式]()\n17. [代理模式]()\n18. [组合模式]()\n19. [适配器模式]()\n20. [装饰模式]()\n21. [享元模式]()\n22. [外观模式]()\n23. [桥接模式]()\n\n参考：《Android源码设计模式解析与实战》 何红辉、关爱民 著","slug":"Design-Catalog","published":1,"updated":"2018-08-24T09:36:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7sxdw6000ihnnfck4kl042","content":"<ol>\n<li><a href=\"https://YuanTiger.github.io/2017/05/27/Design-Single/\" target=\"_blank\" rel=\"noopener\">单例模式</a></li>\n<li><a href=\"https://YuanTiger.github.io/2017/07/05/Design-Builder/\" target=\"_blank\" rel=\"noopener\">建造者模式</a></li>\n<li><a href=\"https://YuanTiger.github.io/2017/07/15/Design-Clone/\" target=\"_blank\" rel=\"noopener\">原型模式</a></li>\n<li><a href=\"https://YuanTiger.github.io/2017/07/24/Design-Factory/\" target=\"_blank\" rel=\"noopener\">工厂方法模式</a></li>\n<li><a href=\"https://YuanTiger.github.io/2017/08/02/Design-Abs-Factory/\" target=\"_blank\" rel=\"noopener\">抽象工厂模式</a></li>\n<li><a href=\"https://YuanTiger.github.io/2017/08/02/Design-Strategy/\" target=\"_blank\" rel=\"noopener\">策略模式</a></li>\n<li><a href=\"https://yuantiger.github.io/2017/11/14/Design-State/\" target=\"_blank\" rel=\"noopener\">状态模式</a></li>\n<li><a href=\"https://yuantiger.github.io/2017/11/16/Design-Responsibility/\" target=\"_blank\" rel=\"noopener\">责任链模式</a></li>\n<li><a href=\"\">解释器模式</a></li>\n<li><a href=\"\">命令模式</a></li>\n<li><a href=\"\">观察者模式</a></li>\n<li><a href=\"\">备忘录模式</a></li>\n<li><a href=\"\">迭代器模式</a></li>\n<li><a href=\"\">模板方法模式</a></li>\n<li><a href=\"\">访问者模式</a></li>\n<li><a href=\"\">中介者模式</a></li>\n<li><a href=\"\">代理模式</a></li>\n<li><a href=\"\">组合模式</a></li>\n<li><a href=\"\">适配器模式</a></li>\n<li><a href=\"\">装饰模式</a></li>\n<li><a href=\"\">享元模式</a></li>\n<li><a href=\"\">外观模式</a></li>\n<li><a href=\"\">桥接模式</a></li>\n</ol>\n<p>参考：《Android源码设计模式解析与实战》 何红辉、关爱民 著</p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><a href=\"https://YuanTiger.github.io/2017/05/27/Design-Single/\" target=\"_blank\" rel=\"noopener\">单例模式</a></li>\n<li><a href=\"https://YuanTiger.github.io/2017/07/05/Design-Builder/\" target=\"_blank\" rel=\"noopener\">建造者模式</a></li>\n<li><a href=\"https://YuanTiger.github.io/2017/07/15/Design-Clone/\" target=\"_blank\" rel=\"noopener\">原型模式</a></li>\n<li><a href=\"https://YuanTiger.github.io/2017/07/24/Design-Factory/\" target=\"_blank\" rel=\"noopener\">工厂方法模式</a></li>\n<li><a href=\"https://YuanTiger.github.io/2017/08/02/Design-Abs-Factory/\" target=\"_blank\" rel=\"noopener\">抽象工厂模式</a></li>\n<li><a href=\"https://YuanTiger.github.io/2017/08/02/Design-Strategy/\" target=\"_blank\" rel=\"noopener\">策略模式</a></li>\n<li><a href=\"https://yuantiger.github.io/2017/11/14/Design-State/\" target=\"_blank\" rel=\"noopener\">状态模式</a></li>\n<li><a href=\"https://yuantiger.github.io/2017/11/16/Design-Responsibility/\" target=\"_blank\" rel=\"noopener\">责任链模式</a></li>\n<li><a href=\"\">解释器模式</a></li>\n<li><a href=\"\">命令模式</a></li>\n<li><a href=\"\">观察者模式</a></li>\n<li><a href=\"\">备忘录模式</a></li>\n<li><a href=\"\">迭代器模式</a></li>\n<li><a href=\"\">模板方法模式</a></li>\n<li><a href=\"\">访问者模式</a></li>\n<li><a href=\"\">中介者模式</a></li>\n<li><a href=\"\">代理模式</a></li>\n<li><a href=\"\">组合模式</a></li>\n<li><a href=\"\">适配器模式</a></li>\n<li><a href=\"\">装饰模式</a></li>\n<li><a href=\"\">享元模式</a></li>\n<li><a href=\"\">外观模式</a></li>\n<li><a href=\"\">桥接模式</a></li>\n</ol>\n<p>参考：《Android源码设计模式解析与实战》 何红辉、关爱民 著</p>\n"},{"title":"程序运行更高效-原型模式","date":"2017-07-15T06:52:23.000Z","_content":"## 模式介绍 ##\n**原型模式**是一种创建式模式。\n用户可以从一个样板对象中复制出一个内部属性一致的对象，这个过程也就是我们常说的“克隆”。\n被复制出的对象就是我们所说的“原型”，这个“原型”是可以进行定制的。\n**原型模式**多用于创建复杂、构造耗时的对象，**因为在这种情况下，利用原型模式复制一个已经存在的对象可以使程序运行更高效**。\n## 应用场景 ##\n- 一个对象初始化时需要消耗非常多的资源；\n- 一个对象需要提供给多个对象访问，并且多个对象调用时需要进行定制。\n\n需要注意的是，复制操作并不一定比new快，只有当new对象较为耗时或成本较高时，通过复制才能获得效率上的提升。\n因此，在使用**原型模式**时需要对对象的构建成本进行一些效率测试。\n## 简单示例 ##\n如何实现复制操作？\n非常简单，Java提供了一个叫做**Cloneable**的接口，我们只需实现该接口，重写它的`clone()`方法即可。\n现在我们来举个简单实例来演示**原型模式**：\n假设我们现在有一篇文档对象：\n```\npublic class WordDocument{\n    //文本\n    private String text;\n    //作者\n    private String author;\n    //图片集合\n    private ArrayList<String> imageList;\n\n    //....省略get、set\n}\n```\n里面包含了作者、文本以及图片合集，现在我们要让这个文档实现复制功能：\n```\npublic class WordDocument implements Cloneable {\n    //文本\n    private String text;\n    //作者\n    private String author;\n    //图片集合\n    private ArrayList<String> imageList;\n    \n    @Override\n    protected WordDocument clone() {\n        WordDocument document = null;\n        try {\n            document = (WordDocument) super.clone();\n            document.text = this.text;\n            document.author = this.author;\n            document.imageList = this.imageList;\n            return document;\n        } catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    \n    //....省略get、set\n}\n```\n非常简单，我们让**WordDocument**实现了**Cloneable**接口并重写了`clone()`方法，在`clone()`中进行对象的克隆操作。\n那么接下来我们来实际演示下克隆效果：\n```\n//创建对象\nWordDocument document = new WordDocument();\ndocument.setAuthor(\"孟远\");\ndocument.setText(\"这是一篇极好的文章。\");\ndocument.addImage(\"图0\");\ndocument.addImage(\"图1\");\n//打印创建的对象\ntv_clone_0.append(\"创建的对象:\\n\" + document.toString());\n//克隆对象\nWordDocument cloneBean = document.clone();\n//打印克隆的对象\ntv_clone_0.append(\"克隆的对象:\\n\" + cloneBean.toString());\n//修改克隆的对象\ncloneBean.setAuthor(\"黑色小老虎\");\ncloneBean.addImage(\"新加图片2\");\n//再次打印2个对象\ntv_clone_0.append(\"修改克隆对象:\\n\" + cloneBean.toString());\ntv_clone_0.append(\"最开始的对象:\\n\" + document.toString());\n```\n这段代码我们创建了一篇文章，之后拷贝了这篇文章并修改了拷贝文章。\n在这期间，一共进行了4次对象的`toString`：\n1. 创建对象完成时打印了创建对象；\n2. 拷贝完成时打印了拷贝对象；\n3. 修改拷贝对象完成时打印了拷贝对象；\n4. 最后再次打印最初创建的对象。\n\n这里请注意，我们修改拷贝对象时，修改了作者姓名并且添加了一张图片。\n最后打印的结果如下：\n![](http://7xvzby.com1.z0.glb.clouddn.com/design_clone_0.png)\n细心的同学会发现，我们修改了拷贝对象的作者昵称，原对象没有受到影响。但是我们增加一张图片到拷贝对象的集合中时，原对象也发生了变化。\n这就牵扯到了**浅拷贝**和**深拷贝**。\n\n## 深拷贝 ##\n上述简单实例，是使用了**浅拷贝**来实现的。所谓**浅拷贝**就是直接引用原对象中的嵌套对象，不会去进行创建。\n大家应该都知道**对象引用**的问题：\n```\nBean a = new Bean(\"孟远\",\"23\",\"男\");\nBean b = a;\n```\n此时b对象引用了a对象，也就是说其实a和b两个对象在堆内存中指向的是同一个地址，当修改b时，a也必定跟着发生变化。\n同理我们再回头重新看下**WordDocument**的`clone()`代码：\n```\n @Override\n protected WordDocument clone() {\n     WordDocument document = null;\n     try {\n         document = (WordDocument) super.clone();\n         document.text = this.text;\n         document.author = this.author;\n         //问题所在，直接引用当前对象的List\n         document.imageList = this.imageList;\n         return document;\n     } catch (CloneNotSupportedException e) {\n         e.printStackTrace();\n     }\n     return null;\n }\n```\n可以发现我们直接引用了当前对象的List，导致在内存中拷贝对象和最初对象的List指向了同一个地址。\n上面代码就是我们口中的**浅拷贝**。\n那么如何解决这个问题？\n很简单，使用**深拷贝**，**即内部对象也使用`clone()`：**\n```\n@Override\nprotected WordDocument clone() {\n    WordDocument document = null;\n    try {\n        document = (WordDocument) super.clone();\n        document.text = this.text;\n        document.author = this.author;\n        //关建行\n        document.imageList = (ArrayList<String>) imageList.clone();\n        return document;\n    } catch (CloneNotSupportedException e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n```\n我们点进ArrayList的源码可以发现，ArrayList已经实现了**Cloneable**接口，所以我们直接调用ArrayList的`clone()`即可。\n修改完这一行代码之后，再次执行上面演示代码：\n![](http://7xvzby.com1.z0.glb.clouddn.com/design_clone_1.png)\n完美，可以发现在修改完克隆对象之后，最开始的对象已经不会受到影响。\n## 总结 ##\n[上述演示代码已经上传至GitHub。](https://github.com/YuanTiger/Design-Pattern)\n**原型模式**是非常简单的一个模式，它的核心问题就是对原始对象进行拷贝，在这个模式的使用过程中需要注意一点就是：深、浅拷贝的问题。\n在实际开发过程中，为了减少错误，建议各位读者在使用**原型模式**时尽量使用深拷贝，避免操作副本时影响到原始对象。\n\n## 感谢 ##\n《Android源码设计模式解析与实战》 何红辉、关爱民 著","source":"_posts/Design-Clone.md","raw":"---\ntitle: 程序运行更高效-原型模式\ndate: 2017-07-15 14:52:23\ntags:\n   - 编程思想\n---\n## 模式介绍 ##\n**原型模式**是一种创建式模式。\n用户可以从一个样板对象中复制出一个内部属性一致的对象，这个过程也就是我们常说的“克隆”。\n被复制出的对象就是我们所说的“原型”，这个“原型”是可以进行定制的。\n**原型模式**多用于创建复杂、构造耗时的对象，**因为在这种情况下，利用原型模式复制一个已经存在的对象可以使程序运行更高效**。\n## 应用场景 ##\n- 一个对象初始化时需要消耗非常多的资源；\n- 一个对象需要提供给多个对象访问，并且多个对象调用时需要进行定制。\n\n需要注意的是，复制操作并不一定比new快，只有当new对象较为耗时或成本较高时，通过复制才能获得效率上的提升。\n因此，在使用**原型模式**时需要对对象的构建成本进行一些效率测试。\n## 简单示例 ##\n如何实现复制操作？\n非常简单，Java提供了一个叫做**Cloneable**的接口，我们只需实现该接口，重写它的`clone()`方法即可。\n现在我们来举个简单实例来演示**原型模式**：\n假设我们现在有一篇文档对象：\n```\npublic class WordDocument{\n    //文本\n    private String text;\n    //作者\n    private String author;\n    //图片集合\n    private ArrayList<String> imageList;\n\n    //....省略get、set\n}\n```\n里面包含了作者、文本以及图片合集，现在我们要让这个文档实现复制功能：\n```\npublic class WordDocument implements Cloneable {\n    //文本\n    private String text;\n    //作者\n    private String author;\n    //图片集合\n    private ArrayList<String> imageList;\n    \n    @Override\n    protected WordDocument clone() {\n        WordDocument document = null;\n        try {\n            document = (WordDocument) super.clone();\n            document.text = this.text;\n            document.author = this.author;\n            document.imageList = this.imageList;\n            return document;\n        } catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    \n    //....省略get、set\n}\n```\n非常简单，我们让**WordDocument**实现了**Cloneable**接口并重写了`clone()`方法，在`clone()`中进行对象的克隆操作。\n那么接下来我们来实际演示下克隆效果：\n```\n//创建对象\nWordDocument document = new WordDocument();\ndocument.setAuthor(\"孟远\");\ndocument.setText(\"这是一篇极好的文章。\");\ndocument.addImage(\"图0\");\ndocument.addImage(\"图1\");\n//打印创建的对象\ntv_clone_0.append(\"创建的对象:\\n\" + document.toString());\n//克隆对象\nWordDocument cloneBean = document.clone();\n//打印克隆的对象\ntv_clone_0.append(\"克隆的对象:\\n\" + cloneBean.toString());\n//修改克隆的对象\ncloneBean.setAuthor(\"黑色小老虎\");\ncloneBean.addImage(\"新加图片2\");\n//再次打印2个对象\ntv_clone_0.append(\"修改克隆对象:\\n\" + cloneBean.toString());\ntv_clone_0.append(\"最开始的对象:\\n\" + document.toString());\n```\n这段代码我们创建了一篇文章，之后拷贝了这篇文章并修改了拷贝文章。\n在这期间，一共进行了4次对象的`toString`：\n1. 创建对象完成时打印了创建对象；\n2. 拷贝完成时打印了拷贝对象；\n3. 修改拷贝对象完成时打印了拷贝对象；\n4. 最后再次打印最初创建的对象。\n\n这里请注意，我们修改拷贝对象时，修改了作者姓名并且添加了一张图片。\n最后打印的结果如下：\n![](http://7xvzby.com1.z0.glb.clouddn.com/design_clone_0.png)\n细心的同学会发现，我们修改了拷贝对象的作者昵称，原对象没有受到影响。但是我们增加一张图片到拷贝对象的集合中时，原对象也发生了变化。\n这就牵扯到了**浅拷贝**和**深拷贝**。\n\n## 深拷贝 ##\n上述简单实例，是使用了**浅拷贝**来实现的。所谓**浅拷贝**就是直接引用原对象中的嵌套对象，不会去进行创建。\n大家应该都知道**对象引用**的问题：\n```\nBean a = new Bean(\"孟远\",\"23\",\"男\");\nBean b = a;\n```\n此时b对象引用了a对象，也就是说其实a和b两个对象在堆内存中指向的是同一个地址，当修改b时，a也必定跟着发生变化。\n同理我们再回头重新看下**WordDocument**的`clone()`代码：\n```\n @Override\n protected WordDocument clone() {\n     WordDocument document = null;\n     try {\n         document = (WordDocument) super.clone();\n         document.text = this.text;\n         document.author = this.author;\n         //问题所在，直接引用当前对象的List\n         document.imageList = this.imageList;\n         return document;\n     } catch (CloneNotSupportedException e) {\n         e.printStackTrace();\n     }\n     return null;\n }\n```\n可以发现我们直接引用了当前对象的List，导致在内存中拷贝对象和最初对象的List指向了同一个地址。\n上面代码就是我们口中的**浅拷贝**。\n那么如何解决这个问题？\n很简单，使用**深拷贝**，**即内部对象也使用`clone()`：**\n```\n@Override\nprotected WordDocument clone() {\n    WordDocument document = null;\n    try {\n        document = (WordDocument) super.clone();\n        document.text = this.text;\n        document.author = this.author;\n        //关建行\n        document.imageList = (ArrayList<String>) imageList.clone();\n        return document;\n    } catch (CloneNotSupportedException e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n```\n我们点进ArrayList的源码可以发现，ArrayList已经实现了**Cloneable**接口，所以我们直接调用ArrayList的`clone()`即可。\n修改完这一行代码之后，再次执行上面演示代码：\n![](http://7xvzby.com1.z0.glb.clouddn.com/design_clone_1.png)\n完美，可以发现在修改完克隆对象之后，最开始的对象已经不会受到影响。\n## 总结 ##\n[上述演示代码已经上传至GitHub。](https://github.com/YuanTiger/Design-Pattern)\n**原型模式**是非常简单的一个模式，它的核心问题就是对原始对象进行拷贝，在这个模式的使用过程中需要注意一点就是：深、浅拷贝的问题。\n在实际开发过程中，为了减少错误，建议各位读者在使用**原型模式**时尽量使用深拷贝，避免操作副本时影响到原始对象。\n\n## 感谢 ##\n《Android源码设计模式解析与实战》 何红辉、关爱民 著","slug":"Design-Clone","published":1,"updated":"2018-08-24T09:36:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7sxdw9000khnnfv88hdwh8","content":"<h2 id=\"模式介绍\"><a href=\"#模式介绍\" class=\"headerlink\" title=\"模式介绍\"></a>模式介绍</h2><p><strong>原型模式</strong>是一种创建式模式。<br>用户可以从一个样板对象中复制出一个内部属性一致的对象，这个过程也就是我们常说的“克隆”。<br>被复制出的对象就是我们所说的“原型”，这个“原型”是可以进行定制的。<br><strong>原型模式</strong>多用于创建复杂、构造耗时的对象，<strong>因为在这种情况下，利用原型模式复制一个已经存在的对象可以使程序运行更高效</strong>。</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><ul>\n<li>一个对象初始化时需要消耗非常多的资源；</li>\n<li>一个对象需要提供给多个对象访问，并且多个对象调用时需要进行定制。</li>\n</ul>\n<p>需要注意的是，复制操作并不一定比new快，只有当new对象较为耗时或成本较高时，通过复制才能获得效率上的提升。<br>因此，在使用<strong>原型模式</strong>时需要对对象的构建成本进行一些效率测试。</p>\n<h2 id=\"简单示例\"><a href=\"#简单示例\" class=\"headerlink\" title=\"简单示例\"></a>简单示例</h2><p>如何实现复制操作？<br>非常简单，Java提供了一个叫做<strong>Cloneable</strong>的接口，我们只需实现该接口，重写它的<code>clone()</code>方法即可。<br>现在我们来举个简单实例来演示<strong>原型模式</strong>：<br>假设我们现在有一篇文档对象：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordDocument</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//文本</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">String</span> text;</span><br><span class=\"line\">    <span class=\"comment\">//作者</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">String</span> author;</span><br><span class=\"line\">    <span class=\"comment\">//图片集合</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;<span class=\"keyword\">String</span>&gt; imageList;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//....省略get、set</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>里面包含了作者、文本以及图片合集，现在我们要让这个文档实现复制功能：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> WordDocument <span class=\"keyword\">implements</span> Cloneable &#123;</span><br><span class=\"line\">    <span class=\"comment\">//文本</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">String</span> text;</span><br><span class=\"line\">    <span class=\"comment\">//作者</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">String</span> author;</span><br><span class=\"line\">    <span class=\"comment\">//图片集合</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;<span class=\"built_in\">String</span>&gt; imageList;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> WordDocument clone() &#123;</span><br><span class=\"line\">        WordDocument <span class=\"built_in\">document</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span> = (WordDocument) <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.text = <span class=\"keyword\">this</span>.text;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.author = <span class=\"keyword\">this</span>.author;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.imageList = <span class=\"keyword\">this</span>.imageList;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//....省略get、set</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>非常简单，我们让<strong>WordDocument</strong>实现了<strong>Cloneable</strong>接口并重写了<code>clone()</code>方法，在<code>clone()</code>中进行对象的克隆操作。<br>那么接下来我们来实际演示下克隆效果：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建对象</span></span><br><span class=\"line\">WordDocument <span class=\"built_in\">document</span> = <span class=\"keyword\">new</span> WordDocument();</span><br><span class=\"line\"><span class=\"built_in\">document</span>.setAuthor(<span class=\"string\">\"孟远\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.setText(<span class=\"string\">\"这是一篇极好的文章。\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.addImage(<span class=\"string\">\"图0\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.addImage(<span class=\"string\">\"图1\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//打印创建的对象</span></span><br><span class=\"line\">tv_clone_0.append(<span class=\"string\">\"创建的对象:\\n\"</span> + <span class=\"built_in\">document</span>.toString());</span><br><span class=\"line\"><span class=\"comment\">//克隆对象</span></span><br><span class=\"line\">WordDocument cloneBean = <span class=\"built_in\">document</span>.clone();</span><br><span class=\"line\"><span class=\"comment\">//打印克隆的对象</span></span><br><span class=\"line\">tv_clone_0.append(<span class=\"string\">\"克隆的对象:\\n\"</span> + cloneBean.toString());</span><br><span class=\"line\"><span class=\"comment\">//修改克隆的对象</span></span><br><span class=\"line\">cloneBean.setAuthor(<span class=\"string\">\"黑色小老虎\"</span>);</span><br><span class=\"line\">cloneBean.addImage(<span class=\"string\">\"新加图片2\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//再次打印2个对象</span></span><br><span class=\"line\">tv_clone_0.append(<span class=\"string\">\"修改克隆对象:\\n\"</span> + cloneBean.toString());</span><br><span class=\"line\">tv_clone_0.append(<span class=\"string\">\"最开始的对象:\\n\"</span> + <span class=\"built_in\">document</span>.toString());</span><br></pre></td></tr></table></figure></p>\n<p>这段代码我们创建了一篇文章，之后拷贝了这篇文章并修改了拷贝文章。<br>在这期间，一共进行了4次对象的<code>toString</code>：</p>\n<ol>\n<li>创建对象完成时打印了创建对象；</li>\n<li>拷贝完成时打印了拷贝对象；</li>\n<li>修改拷贝对象完成时打印了拷贝对象；</li>\n<li>最后再次打印最初创建的对象。</li>\n</ol>\n<p>这里请注意，我们修改拷贝对象时，修改了作者姓名并且添加了一张图片。<br>最后打印的结果如下：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/design_clone_0.png\" alt=\"\"><br>细心的同学会发现，我们修改了拷贝对象的作者昵称，原对象没有受到影响。但是我们增加一张图片到拷贝对象的集合中时，原对象也发生了变化。<br>这就牵扯到了<strong>浅拷贝</strong>和<strong>深拷贝</strong>。</p>\n<h2 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h2><p>上述简单实例，是使用了<strong>浅拷贝</strong>来实现的。所谓<strong>浅拷贝</strong>就是直接引用原对象中的嵌套对象，不会去进行创建。<br>大家应该都知道<strong>对象引用</strong>的问题：<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Bean a</span> = new Bean(<span class=\"string\">\"孟远\"</span>,<span class=\"string\">\"23\"</span>,<span class=\"string\">\"男\"</span>);</span><br><span class=\"line\"><span class=\"attribute\">Bean b</span> = a;</span><br></pre></td></tr></table></figure></p>\n<p>此时b对象引用了a对象，也就是说其实a和b两个对象在堆内存中指向的是同一个地址，当修改b时，a也必定跟着发生变化。<br>同理我们再回头重新看下<strong>WordDocument</strong>的<code>clone()</code>代码：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> WordDocument clone() &#123;</span><br><span class=\"line\">    WordDocument <span class=\"built_in\">document</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span> = (WordDocument) <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.text = <span class=\"keyword\">this</span>.text;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.author = <span class=\"keyword\">this</span>.author;</span><br><span class=\"line\">        <span class=\"comment\">//问题所在，直接引用当前对象的List</span></span><br><span class=\"line\">        <span class=\"built_in\">document</span>.imageList = <span class=\"keyword\">this</span>.imageList;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以发现我们直接引用了当前对象的List，导致在内存中拷贝对象和最初对象的List指向了同一个地址。<br>上面代码就是我们口中的<strong>浅拷贝</strong>。<br>那么如何解决这个问题？<br>很简单，使用<strong>深拷贝</strong>，<strong>即内部对象也使用<code>clone()</code>：</strong><br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> WordDocument clone() &#123;</span><br><span class=\"line\">    WordDocument <span class=\"built_in\">document</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span> = (WordDocument) <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.text = <span class=\"keyword\">this</span>.text;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.author = <span class=\"keyword\">this</span>.author;</span><br><span class=\"line\">        <span class=\"comment\">//关建行</span></span><br><span class=\"line\">        <span class=\"built_in\">document</span>.imageList = (ArrayList&lt;<span class=\"built_in\">String</span>&gt;) imageList.clone();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们点进ArrayList的源码可以发现，ArrayList已经实现了<strong>Cloneable</strong>接口，所以我们直接调用ArrayList的<code>clone()</code>即可。<br>修改完这一行代码之后，再次执行上面演示代码：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/design_clone_1.png\" alt=\"\"><br>完美，可以发现在修改完克隆对象之后，最开始的对象已经不会受到影响。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><a href=\"https://github.com/YuanTiger/Design-Pattern\" target=\"_blank\" rel=\"noopener\">上述演示代码已经上传至GitHub。</a><br><strong>原型模式</strong>是非常简单的一个模式，它的核心问题就是对原始对象进行拷贝，在这个模式的使用过程中需要注意一点就是：深、浅拷贝的问题。<br>在实际开发过程中，为了减少错误，建议各位读者在使用<strong>原型模式</strong>时尽量使用深拷贝，避免操作副本时影响到原始对象。</p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p>《Android源码设计模式解析与实战》 何红辉、关爱民 著</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"模式介绍\"><a href=\"#模式介绍\" class=\"headerlink\" title=\"模式介绍\"></a>模式介绍</h2><p><strong>原型模式</strong>是一种创建式模式。<br>用户可以从一个样板对象中复制出一个内部属性一致的对象，这个过程也就是我们常说的“克隆”。<br>被复制出的对象就是我们所说的“原型”，这个“原型”是可以进行定制的。<br><strong>原型模式</strong>多用于创建复杂、构造耗时的对象，<strong>因为在这种情况下，利用原型模式复制一个已经存在的对象可以使程序运行更高效</strong>。</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><ul>\n<li>一个对象初始化时需要消耗非常多的资源；</li>\n<li>一个对象需要提供给多个对象访问，并且多个对象调用时需要进行定制。</li>\n</ul>\n<p>需要注意的是，复制操作并不一定比new快，只有当new对象较为耗时或成本较高时，通过复制才能获得效率上的提升。<br>因此，在使用<strong>原型模式</strong>时需要对对象的构建成本进行一些效率测试。</p>\n<h2 id=\"简单示例\"><a href=\"#简单示例\" class=\"headerlink\" title=\"简单示例\"></a>简单示例</h2><p>如何实现复制操作？<br>非常简单，Java提供了一个叫做<strong>Cloneable</strong>的接口，我们只需实现该接口，重写它的<code>clone()</code>方法即可。<br>现在我们来举个简单实例来演示<strong>原型模式</strong>：<br>假设我们现在有一篇文档对象：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WordDocument</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//文本</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">String</span> text;</span><br><span class=\"line\">    <span class=\"comment\">//作者</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">String</span> author;</span><br><span class=\"line\">    <span class=\"comment\">//图片集合</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;<span class=\"keyword\">String</span>&gt; imageList;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//....省略get、set</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>里面包含了作者、文本以及图片合集，现在我们要让这个文档实现复制功能：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> WordDocument <span class=\"keyword\">implements</span> Cloneable &#123;</span><br><span class=\"line\">    <span class=\"comment\">//文本</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">String</span> text;</span><br><span class=\"line\">    <span class=\"comment\">//作者</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">String</span> author;</span><br><span class=\"line\">    <span class=\"comment\">//图片集合</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;<span class=\"built_in\">String</span>&gt; imageList;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> WordDocument clone() &#123;</span><br><span class=\"line\">        WordDocument <span class=\"built_in\">document</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">document</span> = (WordDocument) <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.text = <span class=\"keyword\">this</span>.text;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.author = <span class=\"keyword\">this</span>.author;</span><br><span class=\"line\">            <span class=\"built_in\">document</span>.imageList = <span class=\"keyword\">this</span>.imageList;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//....省略get、set</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>非常简单，我们让<strong>WordDocument</strong>实现了<strong>Cloneable</strong>接口并重写了<code>clone()</code>方法，在<code>clone()</code>中进行对象的克隆操作。<br>那么接下来我们来实际演示下克隆效果：<br><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建对象</span></span><br><span class=\"line\">WordDocument <span class=\"built_in\">document</span> = <span class=\"keyword\">new</span> WordDocument();</span><br><span class=\"line\"><span class=\"built_in\">document</span>.setAuthor(<span class=\"string\">\"孟远\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.setText(<span class=\"string\">\"这是一篇极好的文章。\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.addImage(<span class=\"string\">\"图0\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.addImage(<span class=\"string\">\"图1\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//打印创建的对象</span></span><br><span class=\"line\">tv_clone_0.append(<span class=\"string\">\"创建的对象:\\n\"</span> + <span class=\"built_in\">document</span>.toString());</span><br><span class=\"line\"><span class=\"comment\">//克隆对象</span></span><br><span class=\"line\">WordDocument cloneBean = <span class=\"built_in\">document</span>.clone();</span><br><span class=\"line\"><span class=\"comment\">//打印克隆的对象</span></span><br><span class=\"line\">tv_clone_0.append(<span class=\"string\">\"克隆的对象:\\n\"</span> + cloneBean.toString());</span><br><span class=\"line\"><span class=\"comment\">//修改克隆的对象</span></span><br><span class=\"line\">cloneBean.setAuthor(<span class=\"string\">\"黑色小老虎\"</span>);</span><br><span class=\"line\">cloneBean.addImage(<span class=\"string\">\"新加图片2\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//再次打印2个对象</span></span><br><span class=\"line\">tv_clone_0.append(<span class=\"string\">\"修改克隆对象:\\n\"</span> + cloneBean.toString());</span><br><span class=\"line\">tv_clone_0.append(<span class=\"string\">\"最开始的对象:\\n\"</span> + <span class=\"built_in\">document</span>.toString());</span><br></pre></td></tr></table></figure></p>\n<p>这段代码我们创建了一篇文章，之后拷贝了这篇文章并修改了拷贝文章。<br>在这期间，一共进行了4次对象的<code>toString</code>：</p>\n<ol>\n<li>创建对象完成时打印了创建对象；</li>\n<li>拷贝完成时打印了拷贝对象；</li>\n<li>修改拷贝对象完成时打印了拷贝对象；</li>\n<li>最后再次打印最初创建的对象。</li>\n</ol>\n<p>这里请注意，我们修改拷贝对象时，修改了作者姓名并且添加了一张图片。<br>最后打印的结果如下：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/design_clone_0.png\" alt=\"\"><br>细心的同学会发现，我们修改了拷贝对象的作者昵称，原对象没有受到影响。但是我们增加一张图片到拷贝对象的集合中时，原对象也发生了变化。<br>这就牵扯到了<strong>浅拷贝</strong>和<strong>深拷贝</strong>。</p>\n<h2 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h2><p>上述简单实例，是使用了<strong>浅拷贝</strong>来实现的。所谓<strong>浅拷贝</strong>就是直接引用原对象中的嵌套对象，不会去进行创建。<br>大家应该都知道<strong>对象引用</strong>的问题：<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Bean a</span> = new Bean(<span class=\"string\">\"孟远\"</span>,<span class=\"string\">\"23\"</span>,<span class=\"string\">\"男\"</span>);</span><br><span class=\"line\"><span class=\"attribute\">Bean b</span> = a;</span><br></pre></td></tr></table></figure></p>\n<p>此时b对象引用了a对象，也就是说其实a和b两个对象在堆内存中指向的是同一个地址，当修改b时，a也必定跟着发生变化。<br>同理我们再回头重新看下<strong>WordDocument</strong>的<code>clone()</code>代码：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> WordDocument clone() &#123;</span><br><span class=\"line\">    WordDocument <span class=\"built_in\">document</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span> = (WordDocument) <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.text = <span class=\"keyword\">this</span>.text;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.author = <span class=\"keyword\">this</span>.author;</span><br><span class=\"line\">        <span class=\"comment\">//问题所在，直接引用当前对象的List</span></span><br><span class=\"line\">        <span class=\"built_in\">document</span>.imageList = <span class=\"keyword\">this</span>.imageList;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以发现我们直接引用了当前对象的List，导致在内存中拷贝对象和最初对象的List指向了同一个地址。<br>上面代码就是我们口中的<strong>浅拷贝</strong>。<br>那么如何解决这个问题？<br>很简单，使用<strong>深拷贝</strong>，<strong>即内部对象也使用<code>clone()</code>：</strong><br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> WordDocument clone() &#123;</span><br><span class=\"line\">    WordDocument <span class=\"built_in\">document</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span> = (WordDocument) <span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.text = <span class=\"keyword\">this</span>.text;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.author = <span class=\"keyword\">this</span>.author;</span><br><span class=\"line\">        <span class=\"comment\">//关建行</span></span><br><span class=\"line\">        <span class=\"built_in\">document</span>.imageList = (ArrayList&lt;<span class=\"built_in\">String</span>&gt;) imageList.clone();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们点进ArrayList的源码可以发现，ArrayList已经实现了<strong>Cloneable</strong>接口，所以我们直接调用ArrayList的<code>clone()</code>即可。<br>修改完这一行代码之后，再次执行上面演示代码：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/design_clone_1.png\" alt=\"\"><br>完美，可以发现在修改完克隆对象之后，最开始的对象已经不会受到影响。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><a href=\"https://github.com/YuanTiger/Design-Pattern\" target=\"_blank\" rel=\"noopener\">上述演示代码已经上传至GitHub。</a><br><strong>原型模式</strong>是非常简单的一个模式，它的核心问题就是对原始对象进行拷贝，在这个模式的使用过程中需要注意一点就是：深、浅拷贝的问题。<br>在实际开发过程中，为了减少错误，建议各位读者在使用<strong>原型模式</strong>时尽量使用深拷贝，避免操作副本时影响到原始对象。</p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p>《Android源码设计模式解析与实战》 何红辉、关爱民 著</p>\n"},{"title":"应用最广-工厂方法模式","date":"2017-07-24T05:57:55.000Z","_content":"## 模式介绍 ##\n**工厂方法模式**是应用最广泛的模式之一，也是创建型模式之一。\n**工厂方法模式**指的是定义出一个用于创建对象的接口，让子类决定实例化哪个类。听起来可能不太懂，没关系，往下看慢慢就明白了。\n**工厂方法模式**是一种结构简单的模式，在我们平时开发中应用非常广泛，也许你并不知道，但你已经使用了无数次该模式。\n\n## 使用场景 ##\n在任何需要生成复杂对象的地方，都可以用使用**工厂方法模式**。简单对象无需使用**工厂方法模式**，更无需使用[**建造者模式**](http://www.jianshu.com/p/07bed15cd13c)，因为这样反而会损失性能。\n\n## 模式构成 ##\n**工厂方法模式**的成员构成如下：\n- Product：商品功能的抽象。\n- ConcreteProduct：商品功能的具体实现。\n- Factory：生产商品的工厂抽象。\n- ConcreteFactory：生产商品的工厂具体实现。\n\n需要注意的是，**工厂方法模式**中的Product和[**建造者模式**](http://www.jianshu.com/p/07bed15cd13c)中的Product是有区别的：\n前者的Product指的是商品的**功能**，后者指的是商品的**属性**。\n也就是两者Product中封装的内容是不一致的，是两个完全不同的模式结构。\n\n## 模式示例 ##\n如果将汽车的功能抽象出来，其实都是一致的，无非是有些高级功能，有的汽车有，有的汽车没有。\n但是最基本的功能，比如驾驶、大灯、雨刷等功能，是所有汽车都应该具备的。\n不过就算是这些都具备的功能，也会因车的品牌、型号的不同，存在差异。\n这些就是后话了，我们现在就开始用**工厂方法模式**的代码来实现上述示例。\n先来创建汽车Product，它应该包含汽车所有的功能：\n```\npublic interface CarProduct {\n    /**\n     * 汽车-通用功能封装\n     * 开始驾驶\n     */\n    void drive();\n    /**\n     * 汽车-通用功能封装\n     * 打开车的大灯\n     */\n    void openHeadlamps();\n    \n    //....省略其他功能\n\n}\n```\n可以看出，我们的汽车商品包含驾驶以及大灯两个功能。\n两个最简单的功能，在不同品牌、不同型号的车下都会存在差异：\n奥迪A6L：\n```\npublic class AudiA6L implements CarProduct{\n    @Override\n    public void drive() {\n        Log.i(\"factory\",\"奥迪A6L，平稳起步。\");\n    }\n\n    @Override\n    public void openHeadlamps() {\n        Log.i(\"factory\",\"奥迪A6L，尊享华丽大灯打开！\");\n    }\n}\n```\n奔驰E260L：\n```\npublic class BenzE260L implements CarProduct {\n    @Override\n    public void drive() {\n        Log.i(\"factory\",\"奔驰E260L，弹射起步！\");\n    }\n\n    @Override\n    public void openHeadlamps() {\n        Log.i(\"factory\",\"奔驰E260L，标配大灯打开。\");\n    }\n}\n```\n我们创建了两款汽车，分别去实现了`CarProduct`，并且实现了各自功能的细节。\n栗子而已，各位看官可不要因为奔驰E260L能不能弹射起步和我撕啊。\n![](http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/%E9%80%80%E5%87%BA%E8%A3%85%E9%80%BC%E7%95%8C.jpg)\n如果还有其他类型的汽车，我们只需要接着创建类去实现`CarProduct`即可。\n接下来我们就要创建汽车的生产工厂了：\n```\npublic abstract class CarFactory {\n\n    /**\n     * 创建CarProduct\n     *\n     * @return CarProduct\n     */\n    public abstract CarProduct createProduct();\n}\n```\n可以看出我们的抽象工厂中，返回了**抽象**的商品对象。\n那么我们应该在工厂实现中，实现创建商品的具体细节：\n奥迪A6L的工厂：\n```\npublic class AudiA6LFactory extends CarFactory {\n    @Override\n    public CarProduct createProduct() {\n        return new AudiA6L();\n    }\n}\n```\n奔驰E260L的工厂：\n```\npublic class BenzE260LFactory extends CarFactory {\n    @Override\n    public CarProduct createProduct() {\n        return new BenzE260L();\n    }\n}\n```\n因为示例比较简单，仅仅是new的操作，实际创建汽车会更复杂一些。\n接下来我们写一些测试代码：\n```\n//创建奔驰工厂\nCarFactory carFactory1 = new BenzE260LFactory();\nBenzE260L product1 = (BenzE260L) carFactory1.createProduct();\nproduct1.drive();\nproduct1.openHeadlamps();\n//创建奥迪工厂\nCarFactory carFactory2 = new AudiA6LFactory();\nAudiA6L product2 = (AudiA6L) carFactory2.createProduct();\nproduct2.drive();\nproduct2.openHeadlamps();\n```\n这里注意一点，创建工厂的代码是利用面向对象思想中**多态思想（继承、重写、父类引用指向子类对象）**来书写的。\n接下来打印的Log如下：\n```\nfactory: 奔驰E260L，弹射起步！\nfactory: 奔驰E260L，标配大灯打开。\nfactory: 奥迪A6L，平稳起步。\nfactory: 奥迪A6L，尊享华丽大灯打开！\n```\n到这里，我们最基本的**工厂方法模式**已经实现了。\n但是到这里还有一个缺陷：**商品实现与工厂实现一对一。**\n也就是说每多出一个汽车类型、就要为其创建一个具体工厂实现。\n为了解决这一问题，我们需要对工厂抽象、工厂细节进行优化，利用**泛型**和**反射**来实现**商品实现与工厂实现多对一：**\n```\npublic abstract class NewCarFactory {\n    /**\n     * 利用泛型来决定要生成的具体商品\n     *\n     * @param clz 具体商品的类名class\n     * @param <T> 具体商品的类名\n     * @return 具体商品类\n     */\n    public abstract <T extends CarProduct> T createProduct(Class<T> clz);\n}\n```\n上面代码就是经过优化的抽象工厂，创建方法增加了一个参数，决定了要创建的具体商品。\n接下来是工厂的具体细节，应该具备创建任意商品的功能：\n```\npublic class CarConcreteFactory extends NewCarFactory {\n\n    @Override\n    public <T extends CarProduct> T createProduct(Class<T> clz) {\n        CarProduct product = null;\n        try {\n            product = (CarProduct) Class.forName(clz.getName()).newInstance();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return (T) product;\n    }\n}\n```\n我们用参数得到类名，然后通过反射来创建对应的类。\n这样子我们只要有这么一个工厂细节，就能应对所有的商品创建。\n写一下测试代码：\n```\n//创建通用汽车工厂\nNewCarFactory carFactory = new CarConcreteFactory();\n//创建奔驰E260L\nBenzE260L benzE260L = carFactory.createProduct(BenzE260L.class);\n//创建奥迪A6L\nAudiA6L audiA6L = carFactory.createProduct(AudiA6L.class);\n//测试\nbenzE260L.drive();\naudiA6L.drive();\nbenzE260L.openHeadlamps();\naudiA6L.openHeadlamps();\n```\n只有一个工厂，生产出了不同类型的汽车。\n```\nfactory: 奔驰E260L，弹射起步！\nfactory: 奥迪A6L，平稳起步。\nfactory: 奔驰E260L，标配大灯打开。\nfactory: 奥迪A6L，尊享华丽大灯打开！\n```\n结果是一致的。\n两种实现方式都可以，利用**反射**的方式更简洁而已。\n而且上面一对一的写法，还有一个名字：**多工厂方法模式**。\n\n## 总结 ##\n**工厂方法模式**对于大家来说是非常好理解的一个模式，即便是第一次听说，只要读者懂点Java知识，理解这个模式绝对不难。\n**工厂方法模式**也存在缺陷：每次我们添加新的商品时，都要创建新的类。\n如果你辞职了，让不懂**工厂方法模式**的人接手了，这简直是折磨，因为虽然解耦了，但是代码复杂度也随之提升了。\n是否使用**工厂方法模式**，需要设计者，你，来决定。\n## 感谢 ##\n\n《Android源码设计模式解析与实战》 何红辉、关爱民 著","source":"_posts/Design-Factory.md","raw":"---\ntitle: 应用最广-工厂方法模式\ndate: 2017-07-24 13:57:55\ntags:\n   - 编程思想\n---\n## 模式介绍 ##\n**工厂方法模式**是应用最广泛的模式之一，也是创建型模式之一。\n**工厂方法模式**指的是定义出一个用于创建对象的接口，让子类决定实例化哪个类。听起来可能不太懂，没关系，往下看慢慢就明白了。\n**工厂方法模式**是一种结构简单的模式，在我们平时开发中应用非常广泛，也许你并不知道，但你已经使用了无数次该模式。\n\n## 使用场景 ##\n在任何需要生成复杂对象的地方，都可以用使用**工厂方法模式**。简单对象无需使用**工厂方法模式**，更无需使用[**建造者模式**](http://www.jianshu.com/p/07bed15cd13c)，因为这样反而会损失性能。\n\n## 模式构成 ##\n**工厂方法模式**的成员构成如下：\n- Product：商品功能的抽象。\n- ConcreteProduct：商品功能的具体实现。\n- Factory：生产商品的工厂抽象。\n- ConcreteFactory：生产商品的工厂具体实现。\n\n需要注意的是，**工厂方法模式**中的Product和[**建造者模式**](http://www.jianshu.com/p/07bed15cd13c)中的Product是有区别的：\n前者的Product指的是商品的**功能**，后者指的是商品的**属性**。\n也就是两者Product中封装的内容是不一致的，是两个完全不同的模式结构。\n\n## 模式示例 ##\n如果将汽车的功能抽象出来，其实都是一致的，无非是有些高级功能，有的汽车有，有的汽车没有。\n但是最基本的功能，比如驾驶、大灯、雨刷等功能，是所有汽车都应该具备的。\n不过就算是这些都具备的功能，也会因车的品牌、型号的不同，存在差异。\n这些就是后话了，我们现在就开始用**工厂方法模式**的代码来实现上述示例。\n先来创建汽车Product，它应该包含汽车所有的功能：\n```\npublic interface CarProduct {\n    /**\n     * 汽车-通用功能封装\n     * 开始驾驶\n     */\n    void drive();\n    /**\n     * 汽车-通用功能封装\n     * 打开车的大灯\n     */\n    void openHeadlamps();\n    \n    //....省略其他功能\n\n}\n```\n可以看出，我们的汽车商品包含驾驶以及大灯两个功能。\n两个最简单的功能，在不同品牌、不同型号的车下都会存在差异：\n奥迪A6L：\n```\npublic class AudiA6L implements CarProduct{\n    @Override\n    public void drive() {\n        Log.i(\"factory\",\"奥迪A6L，平稳起步。\");\n    }\n\n    @Override\n    public void openHeadlamps() {\n        Log.i(\"factory\",\"奥迪A6L，尊享华丽大灯打开！\");\n    }\n}\n```\n奔驰E260L：\n```\npublic class BenzE260L implements CarProduct {\n    @Override\n    public void drive() {\n        Log.i(\"factory\",\"奔驰E260L，弹射起步！\");\n    }\n\n    @Override\n    public void openHeadlamps() {\n        Log.i(\"factory\",\"奔驰E260L，标配大灯打开。\");\n    }\n}\n```\n我们创建了两款汽车，分别去实现了`CarProduct`，并且实现了各自功能的细节。\n栗子而已，各位看官可不要因为奔驰E260L能不能弹射起步和我撕啊。\n![](http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/%E9%80%80%E5%87%BA%E8%A3%85%E9%80%BC%E7%95%8C.jpg)\n如果还有其他类型的汽车，我们只需要接着创建类去实现`CarProduct`即可。\n接下来我们就要创建汽车的生产工厂了：\n```\npublic abstract class CarFactory {\n\n    /**\n     * 创建CarProduct\n     *\n     * @return CarProduct\n     */\n    public abstract CarProduct createProduct();\n}\n```\n可以看出我们的抽象工厂中，返回了**抽象**的商品对象。\n那么我们应该在工厂实现中，实现创建商品的具体细节：\n奥迪A6L的工厂：\n```\npublic class AudiA6LFactory extends CarFactory {\n    @Override\n    public CarProduct createProduct() {\n        return new AudiA6L();\n    }\n}\n```\n奔驰E260L的工厂：\n```\npublic class BenzE260LFactory extends CarFactory {\n    @Override\n    public CarProduct createProduct() {\n        return new BenzE260L();\n    }\n}\n```\n因为示例比较简单，仅仅是new的操作，实际创建汽车会更复杂一些。\n接下来我们写一些测试代码：\n```\n//创建奔驰工厂\nCarFactory carFactory1 = new BenzE260LFactory();\nBenzE260L product1 = (BenzE260L) carFactory1.createProduct();\nproduct1.drive();\nproduct1.openHeadlamps();\n//创建奥迪工厂\nCarFactory carFactory2 = new AudiA6LFactory();\nAudiA6L product2 = (AudiA6L) carFactory2.createProduct();\nproduct2.drive();\nproduct2.openHeadlamps();\n```\n这里注意一点，创建工厂的代码是利用面向对象思想中**多态思想（继承、重写、父类引用指向子类对象）**来书写的。\n接下来打印的Log如下：\n```\nfactory: 奔驰E260L，弹射起步！\nfactory: 奔驰E260L，标配大灯打开。\nfactory: 奥迪A6L，平稳起步。\nfactory: 奥迪A6L，尊享华丽大灯打开！\n```\n到这里，我们最基本的**工厂方法模式**已经实现了。\n但是到这里还有一个缺陷：**商品实现与工厂实现一对一。**\n也就是说每多出一个汽车类型、就要为其创建一个具体工厂实现。\n为了解决这一问题，我们需要对工厂抽象、工厂细节进行优化，利用**泛型**和**反射**来实现**商品实现与工厂实现多对一：**\n```\npublic abstract class NewCarFactory {\n    /**\n     * 利用泛型来决定要生成的具体商品\n     *\n     * @param clz 具体商品的类名class\n     * @param <T> 具体商品的类名\n     * @return 具体商品类\n     */\n    public abstract <T extends CarProduct> T createProduct(Class<T> clz);\n}\n```\n上面代码就是经过优化的抽象工厂，创建方法增加了一个参数，决定了要创建的具体商品。\n接下来是工厂的具体细节，应该具备创建任意商品的功能：\n```\npublic class CarConcreteFactory extends NewCarFactory {\n\n    @Override\n    public <T extends CarProduct> T createProduct(Class<T> clz) {\n        CarProduct product = null;\n        try {\n            product = (CarProduct) Class.forName(clz.getName()).newInstance();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return (T) product;\n    }\n}\n```\n我们用参数得到类名，然后通过反射来创建对应的类。\n这样子我们只要有这么一个工厂细节，就能应对所有的商品创建。\n写一下测试代码：\n```\n//创建通用汽车工厂\nNewCarFactory carFactory = new CarConcreteFactory();\n//创建奔驰E260L\nBenzE260L benzE260L = carFactory.createProduct(BenzE260L.class);\n//创建奥迪A6L\nAudiA6L audiA6L = carFactory.createProduct(AudiA6L.class);\n//测试\nbenzE260L.drive();\naudiA6L.drive();\nbenzE260L.openHeadlamps();\naudiA6L.openHeadlamps();\n```\n只有一个工厂，生产出了不同类型的汽车。\n```\nfactory: 奔驰E260L，弹射起步！\nfactory: 奥迪A6L，平稳起步。\nfactory: 奔驰E260L，标配大灯打开。\nfactory: 奥迪A6L，尊享华丽大灯打开！\n```\n结果是一致的。\n两种实现方式都可以，利用**反射**的方式更简洁而已。\n而且上面一对一的写法，还有一个名字：**多工厂方法模式**。\n\n## 总结 ##\n**工厂方法模式**对于大家来说是非常好理解的一个模式，即便是第一次听说，只要读者懂点Java知识，理解这个模式绝对不难。\n**工厂方法模式**也存在缺陷：每次我们添加新的商品时，都要创建新的类。\n如果你辞职了，让不懂**工厂方法模式**的人接手了，这简直是折磨，因为虽然解耦了，但是代码复杂度也随之提升了。\n是否使用**工厂方法模式**，需要设计者，你，来决定。\n## 感谢 ##\n\n《Android源码设计模式解析与实战》 何红辉、关爱民 著","slug":"Design-Factory","published":1,"updated":"2018-08-24T09:36:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7sxdwd000mhnnft658asyb","content":"<h2 id=\"模式介绍\"><a href=\"#模式介绍\" class=\"headerlink\" title=\"模式介绍\"></a>模式介绍</h2><p><strong>工厂方法模式</strong>是应用最广泛的模式之一，也是创建型模式之一。<br><strong>工厂方法模式</strong>指的是定义出一个用于创建对象的接口，让子类决定实例化哪个类。听起来可能不太懂，没关系，往下看慢慢就明白了。<br><strong>工厂方法模式</strong>是一种结构简单的模式，在我们平时开发中应用非常广泛，也许你并不知道，但你已经使用了无数次该模式。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>在任何需要生成复杂对象的地方，都可以用使用<strong>工厂方法模式</strong>。简单对象无需使用<strong>工厂方法模式</strong>，更无需使用<a href=\"http://www.jianshu.com/p/07bed15cd13c\" target=\"_blank\" rel=\"noopener\"><strong>建造者模式</strong></a>，因为这样反而会损失性能。</p>\n<h2 id=\"模式构成\"><a href=\"#模式构成\" class=\"headerlink\" title=\"模式构成\"></a>模式构成</h2><p><strong>工厂方法模式</strong>的成员构成如下：</p>\n<ul>\n<li>Product：商品功能的抽象。</li>\n<li>ConcreteProduct：商品功能的具体实现。</li>\n<li>Factory：生产商品的工厂抽象。</li>\n<li>ConcreteFactory：生产商品的工厂具体实现。</li>\n</ul>\n<p>需要注意的是，<strong>工厂方法模式</strong>中的Product和<a href=\"http://www.jianshu.com/p/07bed15cd13c\" target=\"_blank\" rel=\"noopener\"><strong>建造者模式</strong></a>中的Product是有区别的：<br>前者的Product指的是商品的<strong>功能</strong>，后者指的是商品的<strong>属性</strong>。<br>也就是两者Product中封装的内容是不一致的，是两个完全不同的模式结构。</p>\n<h2 id=\"模式示例\"><a href=\"#模式示例\" class=\"headerlink\" title=\"模式示例\"></a>模式示例</h2><p>如果将汽车的功能抽象出来，其实都是一致的，无非是有些高级功能，有的汽车有，有的汽车没有。<br>但是最基本的功能，比如驾驶、大灯、雨刷等功能，是所有汽车都应该具备的。<br>不过就算是这些都具备的功能，也会因车的品牌、型号的不同，存在差异。<br>这些就是后话了，我们现在就开始用<strong>工厂方法模式</strong>的代码来实现上述示例。<br>先来创建汽车Product，它应该包含汽车所有的功能：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">CarProduct</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 汽车-通用功能封装</span></span><br><span class=\"line\"><span class=\"comment\">     * 开始驾驶</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">drive</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 汽车-通用功能封装</span></span><br><span class=\"line\"><span class=\"comment\">     * 打开车的大灯</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">openHeadlamps</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//....省略其他功能</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看出，我们的汽车商品包含驾驶以及大灯两个功能。<br>两个最简单的功能，在不同品牌、不同型号的车下都会存在差异：<br>奥迪A6L：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AudiA6L</span> <span class=\"keyword\">implements</span> <span class=\"title\">CarProduct</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"factory\"</span>,<span class=\"string\">\"奥迪A6L，平稳起步。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">openHeadlamps</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"factory\"</span>,<span class=\"string\">\"奥迪A6L，尊享华丽大灯打开！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>奔驰E260L：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BenzE260L</span> <span class=\"keyword\">implements</span> <span class=\"title\">CarProduct</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"factory\"</span>,<span class=\"string\">\"奔驰E260L，弹射起步！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">openHeadlamps</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"factory\"</span>,<span class=\"string\">\"奔驰E260L，标配大灯打开。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们创建了两款汽车，分别去实现了<code>CarProduct</code>，并且实现了各自功能的细节。<br>栗子而已，各位看官可不要因为奔驰E260L能不能弹射起步和我撕啊。<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/%E9%80%80%E5%87%BA%E8%A3%85%E9%80%BC%E7%95%8C.jpg\" alt=\"\"><br>如果还有其他类型的汽车，我们只需要接着创建类去实现<code>CarProduct</code>即可。<br>接下来我们就要创建汽车的生产工厂了：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">CarFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建CarProduct</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @return CarProduct</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> CarProduct <span class=\"title\">createProduct</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看出我们的抽象工厂中，返回了<strong>抽象</strong>的商品对象。<br>那么我们应该在工厂实现中，实现创建商品的具体细节：<br>奥迪A6L的工厂：<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AudiA6LFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">CarFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    public <span class=\"type\">CarProduct</span> createProduct() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"type\">AudiA6L</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>奔驰E260L的工厂：<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BenzE260LFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">CarFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    public <span class=\"type\">CarProduct</span> createProduct() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"type\">BenzE260L</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因为示例比较简单，仅仅是new的操作，实际创建汽车会更复杂一些。<br>接下来我们写一些测试代码：<br><figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建奔驰工厂</span></span><br><span class=\"line\"><span class=\"type\">CarFactory</span> carFactory1 = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">BenzE260LFactory</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">BenzE260L</span> <span class=\"title\">product1</span> = (<span class=\"type\">BenzE260L</span>) <span class=\"title\">carFactory1</span>.<span class=\"title\">createProduct</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">product1</span>.<span class=\"title\">drive</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">product1</span>.<span class=\"title\">openHeadlamps</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//创建奥迪工厂</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">CarFactory</span> <span class=\"title\">carFactory2</span> = <span class=\"title\">new</span> <span class=\"title\">AudiA6LFactory</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">AudiA6L</span> <span class=\"title\">product2</span> = (<span class=\"type\">AudiA6L</span>) <span class=\"title\">carFactory2</span>.<span class=\"title\">createProduct</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">product2</span>.<span class=\"title\">drive</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">product2</span>.<span class=\"title\">openHeadlamps</span>();</span></span><br></pre></td></tr></table></figure></p>\n<p>这里注意一点，创建工厂的代码是利用面向对象思想中<strong>多态思想（继承、重写、父类引用指向子类对象）</strong>来书写的。<br>接下来打印的Log如下：<br><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">factory:</span> 奔驰E260L，弹射起步！</span><br><span class=\"line\"><span class=\"symbol\">factory:</span> 奔驰E260L，标配大灯打开。</span><br><span class=\"line\"><span class=\"symbol\">factory:</span> 奥迪A6L，平稳起步。</span><br><span class=\"line\"><span class=\"symbol\">factory:</span> 奥迪A6L，尊享华丽大灯打开！</span><br></pre></td></tr></table></figure></p>\n<p>到这里，我们最基本的<strong>工厂方法模式</strong>已经实现了。<br>但是到这里还有一个缺陷：<strong>商品实现与工厂实现一对一。</strong><br>也就是说每多出一个汽车类型、就要为其创建一个具体工厂实现。<br>为了解决这一问题，我们需要对工厂抽象、工厂细节进行优化，利用<strong>泛型</strong>和<strong>反射</strong>来实现<strong>商品实现与工厂实现多对一：</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewCarFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 利用泛型来决定要生成的具体商品</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> clz 具体商品的类名class</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt; 具体商品的类名</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 具体商品类</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> &lt;T extends CarProduct&gt; T createProduct(<span class=\"class\"><span class=\"keyword\">Class</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">clz</span>);</span></span><br><span class=\"line\"><span class=\"class\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码就是经过优化的抽象工厂，创建方法增加了一个参数，决定了要创建的具体商品。<br>接下来是工厂的具体细节，应该具备创建任意商品的功能：<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarConcreteFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">NewCarFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    public &lt;<span class=\"type\">T</span> <span class=\"keyword\">extends</span> <span class=\"type\">CarProduct</span>&gt; <span class=\"type\">T</span> createProduct(<span class=\"type\">Class</span>&lt;<span class=\"type\">T</span>&gt; clz) &#123;</span><br><span class=\"line\">        <span class=\"type\">CarProduct</span> product = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            product = (<span class=\"type\">CarProduct</span>) <span class=\"type\">Class</span>.forName(clz.getName()).newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"type\">Exception</span> e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">T</span>) product;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们用参数得到类名，然后通过反射来创建对应的类。<br>这样子我们只要有这么一个工厂细节，就能应对所有的商品创建。<br>写一下测试代码：<br><figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建通用汽车工厂</span></span><br><span class=\"line\"><span class=\"type\">NewCarFactory</span> carFactory = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">CarConcreteFactory</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//创建奔驰E260L</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">BenzE260L</span> <span class=\"title\">benzE260L</span> = <span class=\"title\">carFactory</span>.<span class=\"title\">createProduct</span>(<span class=\"type\">BenzE260L</span>.class);</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//创建奥迪A6L</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">AudiA6L</span> <span class=\"title\">audiA6L</span> = <span class=\"title\">carFactory</span>.<span class=\"title\">createProduct</span>(<span class=\"type\">AudiA6L</span>.class);</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//测试</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">benzE260L</span>.<span class=\"title\">drive</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">audiA6L</span>.<span class=\"title\">drive</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">benzE260L</span>.<span class=\"title\">openHeadlamps</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">audiA6L</span>.<span class=\"title\">openHeadlamps</span>();</span></span><br></pre></td></tr></table></figure></p>\n<p>只有一个工厂，生产出了不同类型的汽车。<br><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">factory:</span> 奔驰E260L，弹射起步！</span><br><span class=\"line\"><span class=\"symbol\">factory:</span> 奥迪A6L，平稳起步。</span><br><span class=\"line\"><span class=\"symbol\">factory:</span> 奔驰E260L，标配大灯打开。</span><br><span class=\"line\"><span class=\"symbol\">factory:</span> 奥迪A6L，尊享华丽大灯打开！</span><br></pre></td></tr></table></figure></p>\n<p>结果是一致的。<br>两种实现方式都可以，利用<strong>反射</strong>的方式更简洁而已。<br>而且上面一对一的写法，还有一个名字：<strong>多工厂方法模式</strong>。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>工厂方法模式</strong>对于大家来说是非常好理解的一个模式，即便是第一次听说，只要读者懂点Java知识，理解这个模式绝对不难。<br><strong>工厂方法模式</strong>也存在缺陷：每次我们添加新的商品时，都要创建新的类。<br>如果你辞职了，让不懂<strong>工厂方法模式</strong>的人接手了，这简直是折磨，因为虽然解耦了，但是代码复杂度也随之提升了。<br>是否使用<strong>工厂方法模式</strong>，需要设计者，你，来决定。</p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p>《Android源码设计模式解析与实战》 何红辉、关爱民 著</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"模式介绍\"><a href=\"#模式介绍\" class=\"headerlink\" title=\"模式介绍\"></a>模式介绍</h2><p><strong>工厂方法模式</strong>是应用最广泛的模式之一，也是创建型模式之一。<br><strong>工厂方法模式</strong>指的是定义出一个用于创建对象的接口，让子类决定实例化哪个类。听起来可能不太懂，没关系，往下看慢慢就明白了。<br><strong>工厂方法模式</strong>是一种结构简单的模式，在我们平时开发中应用非常广泛，也许你并不知道，但你已经使用了无数次该模式。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>在任何需要生成复杂对象的地方，都可以用使用<strong>工厂方法模式</strong>。简单对象无需使用<strong>工厂方法模式</strong>，更无需使用<a href=\"http://www.jianshu.com/p/07bed15cd13c\" target=\"_blank\" rel=\"noopener\"><strong>建造者模式</strong></a>，因为这样反而会损失性能。</p>\n<h2 id=\"模式构成\"><a href=\"#模式构成\" class=\"headerlink\" title=\"模式构成\"></a>模式构成</h2><p><strong>工厂方法模式</strong>的成员构成如下：</p>\n<ul>\n<li>Product：商品功能的抽象。</li>\n<li>ConcreteProduct：商品功能的具体实现。</li>\n<li>Factory：生产商品的工厂抽象。</li>\n<li>ConcreteFactory：生产商品的工厂具体实现。</li>\n</ul>\n<p>需要注意的是，<strong>工厂方法模式</strong>中的Product和<a href=\"http://www.jianshu.com/p/07bed15cd13c\" target=\"_blank\" rel=\"noopener\"><strong>建造者模式</strong></a>中的Product是有区别的：<br>前者的Product指的是商品的<strong>功能</strong>，后者指的是商品的<strong>属性</strong>。<br>也就是两者Product中封装的内容是不一致的，是两个完全不同的模式结构。</p>\n<h2 id=\"模式示例\"><a href=\"#模式示例\" class=\"headerlink\" title=\"模式示例\"></a>模式示例</h2><p>如果将汽车的功能抽象出来，其实都是一致的，无非是有些高级功能，有的汽车有，有的汽车没有。<br>但是最基本的功能，比如驾驶、大灯、雨刷等功能，是所有汽车都应该具备的。<br>不过就算是这些都具备的功能，也会因车的品牌、型号的不同，存在差异。<br>这些就是后话了，我们现在就开始用<strong>工厂方法模式</strong>的代码来实现上述示例。<br>先来创建汽车Product，它应该包含汽车所有的功能：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">CarProduct</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 汽车-通用功能封装</span></span><br><span class=\"line\"><span class=\"comment\">     * 开始驾驶</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">drive</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 汽车-通用功能封装</span></span><br><span class=\"line\"><span class=\"comment\">     * 打开车的大灯</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">openHeadlamps</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//....省略其他功能</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看出，我们的汽车商品包含驾驶以及大灯两个功能。<br>两个最简单的功能，在不同品牌、不同型号的车下都会存在差异：<br>奥迪A6L：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AudiA6L</span> <span class=\"keyword\">implements</span> <span class=\"title\">CarProduct</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"factory\"</span>,<span class=\"string\">\"奥迪A6L，平稳起步。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">openHeadlamps</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"factory\"</span>,<span class=\"string\">\"奥迪A6L，尊享华丽大灯打开！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>奔驰E260L：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BenzE260L</span> <span class=\"keyword\">implements</span> <span class=\"title\">CarProduct</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"factory\"</span>,<span class=\"string\">\"奔驰E260L，弹射起步！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">openHeadlamps</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"factory\"</span>,<span class=\"string\">\"奔驰E260L，标配大灯打开。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们创建了两款汽车，分别去实现了<code>CarProduct</code>，并且实现了各自功能的细节。<br>栗子而已，各位看官可不要因为奔驰E260L能不能弹射起步和我撕啊。<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/%E9%80%80%E5%87%BA%E8%A3%85%E9%80%BC%E7%95%8C.jpg\" alt=\"\"><br>如果还有其他类型的汽车，我们只需要接着创建类去实现<code>CarProduct</code>即可。<br>接下来我们就要创建汽车的生产工厂了：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">CarFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建CarProduct</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @return CarProduct</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> CarProduct <span class=\"title\">createProduct</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看出我们的抽象工厂中，返回了<strong>抽象</strong>的商品对象。<br>那么我们应该在工厂实现中，实现创建商品的具体细节：<br>奥迪A6L的工厂：<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AudiA6LFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">CarFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    public <span class=\"type\">CarProduct</span> createProduct() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"type\">AudiA6L</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>奔驰E260L的工厂：<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BenzE260LFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">CarFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    public <span class=\"type\">CarProduct</span> createProduct() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"type\">BenzE260L</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因为示例比较简单，仅仅是new的操作，实际创建汽车会更复杂一些。<br>接下来我们写一些测试代码：<br><figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建奔驰工厂</span></span><br><span class=\"line\"><span class=\"type\">CarFactory</span> carFactory1 = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">BenzE260LFactory</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">BenzE260L</span> <span class=\"title\">product1</span> = (<span class=\"type\">BenzE260L</span>) <span class=\"title\">carFactory1</span>.<span class=\"title\">createProduct</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">product1</span>.<span class=\"title\">drive</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">product1</span>.<span class=\"title\">openHeadlamps</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//创建奥迪工厂</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">CarFactory</span> <span class=\"title\">carFactory2</span> = <span class=\"title\">new</span> <span class=\"title\">AudiA6LFactory</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">AudiA6L</span> <span class=\"title\">product2</span> = (<span class=\"type\">AudiA6L</span>) <span class=\"title\">carFactory2</span>.<span class=\"title\">createProduct</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">product2</span>.<span class=\"title\">drive</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">product2</span>.<span class=\"title\">openHeadlamps</span>();</span></span><br></pre></td></tr></table></figure></p>\n<p>这里注意一点，创建工厂的代码是利用面向对象思想中<strong>多态思想（继承、重写、父类引用指向子类对象）</strong>来书写的。<br>接下来打印的Log如下：<br><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">factory:</span> 奔驰E260L，弹射起步！</span><br><span class=\"line\"><span class=\"symbol\">factory:</span> 奔驰E260L，标配大灯打开。</span><br><span class=\"line\"><span class=\"symbol\">factory:</span> 奥迪A6L，平稳起步。</span><br><span class=\"line\"><span class=\"symbol\">factory:</span> 奥迪A6L，尊享华丽大灯打开！</span><br></pre></td></tr></table></figure></p>\n<p>到这里，我们最基本的<strong>工厂方法模式</strong>已经实现了。<br>但是到这里还有一个缺陷：<strong>商品实现与工厂实现一对一。</strong><br>也就是说每多出一个汽车类型、就要为其创建一个具体工厂实现。<br>为了解决这一问题，我们需要对工厂抽象、工厂细节进行优化，利用<strong>泛型</strong>和<strong>反射</strong>来实现<strong>商品实现与工厂实现多对一：</strong><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewCarFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 利用泛型来决定要生成的具体商品</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> clz 具体商品的类名class</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt; 具体商品的类名</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 具体商品类</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> &lt;T extends CarProduct&gt; T createProduct(<span class=\"class\"><span class=\"keyword\">Class</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">clz</span>);</span></span><br><span class=\"line\"><span class=\"class\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码就是经过优化的抽象工厂，创建方法增加了一个参数，决定了要创建的具体商品。<br>接下来是工厂的具体细节，应该具备创建任意商品的功能：<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarConcreteFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">NewCarFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    public &lt;<span class=\"type\">T</span> <span class=\"keyword\">extends</span> <span class=\"type\">CarProduct</span>&gt; <span class=\"type\">T</span> createProduct(<span class=\"type\">Class</span>&lt;<span class=\"type\">T</span>&gt; clz) &#123;</span><br><span class=\"line\">        <span class=\"type\">CarProduct</span> product = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            product = (<span class=\"type\">CarProduct</span>) <span class=\"type\">Class</span>.forName(clz.getName()).newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"type\">Exception</span> e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">T</span>) product;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们用参数得到类名，然后通过反射来创建对应的类。<br>这样子我们只要有这么一个工厂细节，就能应对所有的商品创建。<br>写一下测试代码：<br><figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建通用汽车工厂</span></span><br><span class=\"line\"><span class=\"type\">NewCarFactory</span> carFactory = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">CarConcreteFactory</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//创建奔驰E260L</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">BenzE260L</span> <span class=\"title\">benzE260L</span> = <span class=\"title\">carFactory</span>.<span class=\"title\">createProduct</span>(<span class=\"type\">BenzE260L</span>.class);</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//创建奥迪A6L</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">AudiA6L</span> <span class=\"title\">audiA6L</span> = <span class=\"title\">carFactory</span>.<span class=\"title\">createProduct</span>(<span class=\"type\">AudiA6L</span>.class);</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">//测试</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">benzE260L</span>.<span class=\"title\">drive</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">audiA6L</span>.<span class=\"title\">drive</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">benzE260L</span>.<span class=\"title\">openHeadlamps</span>();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">audiA6L</span>.<span class=\"title\">openHeadlamps</span>();</span></span><br></pre></td></tr></table></figure></p>\n<p>只有一个工厂，生产出了不同类型的汽车。<br><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">factory:</span> 奔驰E260L，弹射起步！</span><br><span class=\"line\"><span class=\"symbol\">factory:</span> 奥迪A6L，平稳起步。</span><br><span class=\"line\"><span class=\"symbol\">factory:</span> 奔驰E260L，标配大灯打开。</span><br><span class=\"line\"><span class=\"symbol\">factory:</span> 奥迪A6L，尊享华丽大灯打开！</span><br></pre></td></tr></table></figure></p>\n<p>结果是一致的。<br>两种实现方式都可以，利用<strong>反射</strong>的方式更简洁而已。<br>而且上面一对一的写法，还有一个名字：<strong>多工厂方法模式</strong>。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>工厂方法模式</strong>对于大家来说是非常好理解的一个模式，即便是第一次听说，只要读者懂点Java知识，理解这个模式绝对不难。<br><strong>工厂方法模式</strong>也存在缺陷：每次我们添加新的商品时，都要创建新的类。<br>如果你辞职了，让不懂<strong>工厂方法模式</strong>的人接手了，这简直是折磨，因为虽然解耦了，但是代码复杂度也随之提升了。<br>是否使用<strong>工厂方法模式</strong>，需要设计者，你，来决定。</p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p>《Android源码设计模式解析与实战》 何红辉、关爱民 著</p>\n"},{"title":"提升代码灵活性-责任链模式","date":"2017-11-16T07:54:00.000Z","_content":"## 模式介绍 ##\n**责任链模式**是行为设计模式之一。\n\n首先我们从字面去理解**责任链模式**：“责任”指的是一个人应尽的义务、分内应做的事；“链”指的是一个个小环首尾相连，组成的长链条。\n\n为什么是“链”？因为“链”的每一环都是可以拆卸的，它们虽然是环环相扣，但是哪天我不想要中间的某一环，我只需要将其去下来即可，这大大提升了代码的灵活性。\n\n所以**责任链模式**通俗来讲，指的是**一件**事情，有顺序地传递给**一群人**，当第一个人无法处理时，再传递给第二个人去做，直到有人可以解决掉这件事情为止。\n\n## 模式示例 ##\n小明是一家技术公司的测试，他除了完成本职工作外，还负责给技术部的小伙伴购买零食，不过零食钱是先由小明自己垫付的，接着到月底拿着发票去找领导报销的流程。\n\n这个月的月底，小明算了一下，一共花费了2450元。\n\n接着小明拿着零食的发票去找组长报销，结果组长说这金额太大了，只有500以下我才有权限签字，你得去找技术总监。\n\n接着小明找到技术总监，总监说2450太多啦，只有2000以下我才有权限签字，你得去找咱们的老板。\n\n接着小明去到老板的办公室，老板看了一下说非常好，技术部的同学们都非常辛苦，以后都多买一些零食，接着麻溜地就签了字，小明顺利完成了此月的零食报销请求。\n\n## 使用场景 ##\n通过上述示例，我相信大家已经有些理解**责任链模式**了。\n\n组长、总监、老板针对小明的报销请求，都有自己要做的事情，但是根据小明的报销金额不同，无法第一时间就知道到底是谁来处理这个报销请求。\n\n这就需要小明按照一定的顺序，一个个地去问，直到找到能处理此次报销请求的人为止。\n\n这种情况下，就非常适合使用我们今天要说的**责任链模式**。\n\n通过上面的描述，我们可以得出**责任链模式**的使用场景：\n- 一个请求需要多个对象处理，但具体由哪个对象处理需要在运行时动态判断时；\n- 需要动态指定一组对象处理一个请求。\n\n## 所含角色 ##\n**责任链模式**包含两个主要角色：\n- 处理者抽象(Handler)：抽象的处理者，声明一个处理请求的方法，并在其中保持对下一个处理者的引用。\n- 处理者实现(HandlerImpl)：处理者抽象的具体实现，对请求进行处理，如果无法处理，则通过下一个处理者的引用将其转发下去。\n\n## 具体代码 ##\n针对上述示例和角色描述，我们来将其转化成具体的代码。\n\n首先是处理者的抽象，针对上述示例，我们的抽象的请求处理方法应该为报销：\n```\npublic abstract class Leader {\n    //下一个处理者\n    private Leader nextLeader;\n\n    /**\n     * 处理报销请求\n     *\n     * @param money 申请报销的金额\n     */\n    public final void handlerRequest(int money) {\n        if (money <= getSelfLimit()) {\n            //当申请的金额<=自己的处理额度时,将此次请求消化\n            handler(money);\n        } else {\n            //否则交给下一个处理者来处理\n            if (nextLeader != null) {\n                nextLeader.handlerRequest(money);\n            }\n        }\n\n    }\n\n    /**\n     * 获取自身的额度，由具体实现来设置\n     *\n     * @return 自身能处理的额度\n     */\n    public abstract int getSelfLimit();\n\n    /**\n     * 具体处理逻辑在这里实现\n     *\n     * @param money 申请报销的金额\n     */\n    public abstract void handler(int money);\n\n\n    public void setNextLeader(Leader nextLeader) {\n        this.nextLeader = nextLeader;\n    }\n\n    public Leader getNextLeader() {\n        return nextLeader;\n    }\n}\n```\n代码还是有些多的，让我们来解释一下这个处理者抽象类：\n- nextLeader：指定了当请求无法处理时，下一级的处理者。这是**责任链模式**中，“链”的核心。对外暴露了set、get方法。\n- handlerRequest(int money)：注意此方法不是抽象并且是final修饰的，也就是无法重写，无法修改。它其中的逻辑是用来判断此次请求，应该是由自己消化，还是分发给下一个处理者。当你要开始请求时，只需要调用此方法即可。为了适应我们举的示例，这里有一个money参数。这里说一下，每一种设计模式仅仅代表着一种编程思想，具体代码还是要看需求的，如果需求复杂，那么这里分发的逻辑也会复杂、参数也会更多，反之亦然。\n- getSelfLimit()：抽象方法，指定处理者的最高处理额度。\n- handler(int money)：当此次请求该由自己消化时，具体的消化逻辑在这里实现。\n\n如果还有疑问，不要急，我们先来具体看一个处理者的实现，可能你就会恍然大悟：\n组长：\n```\npublic class LeaderGroup extends Leader {\n\n    /**\n     * @return 组长报销的处理额度\n     */\n    @Override\n    public int getSelfLimit() {\n        return 500;\n    }\n\n    /**\n     * 当报销金额 <= getSelfLimit() 时，请求会到这里来消化\n     *\n     * @param money 申请报销的金额\n     */\n    @Override\n    public void handler(int money) {\n        Toast.makeText(App.context, \"小钱，组长报销:\" + money, Toast.LENGTH_SHORT).show();\n    }\n}\n```\n组长继承了抽象的处理者，并指定了组长的报销额度以及具体的处理逻辑。\n同样的，总监和老板也是一样的道理：\n总监：\n```\npublic class LeaderGeneral extends Leader {\n\n    /**\n     * @return 总监报销的处理额度\n     */\n    @Override\n    public int getSelfLimit() {\n        return 2000;\n    }\n\n\n    /**\n     * 当报销金额 <= getSelfLimit() 时，请求会到这里来消化\n     *\n     * @param money 申请报销的金额\n     */\n    @Override\n    public void handler(int money) {\n        Toast.makeText(App.context, \"金额挺大，总监报销:\" + money, Toast.LENGTH_SHORT).show();\n    }\n}\n```\n老板：\n```\npublic class LeaderCEO extends Leader {\n\n    /**\n     * @return 老板报销的处理额度\n     */\n    @Override\n    public int getSelfLimit() {\n        return Integer.MAX_VALUE;\n    }\n\n\n    /**\n     * 当报销金额 <= getSelfLimit() 时，请求会到这里来消化\n     *\n     * @param money 申请报销的金额\n     */\n    @Override\n    public void handler(int money) {\n        Toast.makeText(App.context, \"这么多钱，老板报销:\" + money, Toast.LENGTH_SHORT).show();\n    }\n}\n```\n至此，我们的处理者抽象，以及处理者实现都已经完成了，下面我们来具体模拟一下报销流程：\n```\n//获取输入框中输入的金额\nString money = et_money.getText().toString();\nif (TextUtils.isEmpty(money)) {\n    Toast.makeText(this, \"请输入金额\", Toast.LENGTH_SHORT).show();\n    return;\n}\n//组长实例\nLeader group = new LeaderGroup();\n//总监实例\nLeader general = new LeaderGeneral();\n//CEO实例\nLeader CEO = new LeaderCEO();\n//组长的下一级是总监\ngroup.setNextLeader(general);\n//总监的下一级是CEO\ngeneral.setNextLeader(CEO);\n//由组长优先处理报销\ngroup.handlerRequest(Integer.valueOf(money));\n```\n上面的测试代码逻辑也很清晰：\n1. 获取到具体的报销金额\n2. 首先创了组长、总监、CEO的实例\n3. 按照组长 -> 总监 -> 老板 的报销顺序将其进行排序\n4. 由组长优先处理报销请求，当组长无法处理时，会由组长实例中的下一个处理者来处理。\n\n当我们需求发生变化，比如组长的报销金额变成了1000、比如现在组长没有报销权限了等等，你会发现非常地好维护。\n\n这里我们假设总监无法报销了，当组长无法报销时，直接找到CEO来报销：\n```\nLeader group = new LeaderGroup();\nLeader CEO = new LeaderCEO();\n\ngroup.setNextLeader(CEO);\n\ngroup.handlerRequest(Integer.valueOf(money));\n```\n我们仅仅是将组长的下一个处理者改为老板即可，就可以完美删除掉总监的存在。\n\n这种“链”式的写法，完美解耦了请求者和处理者，提高代码了灵活性。\n\n## 总结 ##\n到这里，一个最基本的**责任链模式**就完成了。\n\n[代码已经上传至GitHub](https://github.com/YuanTiger/Design-Pattern)。\n\n**责任链模式**的优点已经说过了。\n\n缺点就是处理者太多的话，必定会影响性能，尤其是在一些递归调用中，使用时一定要注意。\n\n## 感谢 ##\n\n《Android源码设计模式解析与实战》 何红辉、关爱民 著\n\n\n\n\n","source":"_posts/Design-Responsibility.md","raw":"---\ntitle: 提升代码灵活性-责任链模式\ndate: 2017-11-16 15:54:00\ntags:\n   - 编程思想\n---\n## 模式介绍 ##\n**责任链模式**是行为设计模式之一。\n\n首先我们从字面去理解**责任链模式**：“责任”指的是一个人应尽的义务、分内应做的事；“链”指的是一个个小环首尾相连，组成的长链条。\n\n为什么是“链”？因为“链”的每一环都是可以拆卸的，它们虽然是环环相扣，但是哪天我不想要中间的某一环，我只需要将其去下来即可，这大大提升了代码的灵活性。\n\n所以**责任链模式**通俗来讲，指的是**一件**事情，有顺序地传递给**一群人**，当第一个人无法处理时，再传递给第二个人去做，直到有人可以解决掉这件事情为止。\n\n## 模式示例 ##\n小明是一家技术公司的测试，他除了完成本职工作外，还负责给技术部的小伙伴购买零食，不过零食钱是先由小明自己垫付的，接着到月底拿着发票去找领导报销的流程。\n\n这个月的月底，小明算了一下，一共花费了2450元。\n\n接着小明拿着零食的发票去找组长报销，结果组长说这金额太大了，只有500以下我才有权限签字，你得去找技术总监。\n\n接着小明找到技术总监，总监说2450太多啦，只有2000以下我才有权限签字，你得去找咱们的老板。\n\n接着小明去到老板的办公室，老板看了一下说非常好，技术部的同学们都非常辛苦，以后都多买一些零食，接着麻溜地就签了字，小明顺利完成了此月的零食报销请求。\n\n## 使用场景 ##\n通过上述示例，我相信大家已经有些理解**责任链模式**了。\n\n组长、总监、老板针对小明的报销请求，都有自己要做的事情，但是根据小明的报销金额不同，无法第一时间就知道到底是谁来处理这个报销请求。\n\n这就需要小明按照一定的顺序，一个个地去问，直到找到能处理此次报销请求的人为止。\n\n这种情况下，就非常适合使用我们今天要说的**责任链模式**。\n\n通过上面的描述，我们可以得出**责任链模式**的使用场景：\n- 一个请求需要多个对象处理，但具体由哪个对象处理需要在运行时动态判断时；\n- 需要动态指定一组对象处理一个请求。\n\n## 所含角色 ##\n**责任链模式**包含两个主要角色：\n- 处理者抽象(Handler)：抽象的处理者，声明一个处理请求的方法，并在其中保持对下一个处理者的引用。\n- 处理者实现(HandlerImpl)：处理者抽象的具体实现，对请求进行处理，如果无法处理，则通过下一个处理者的引用将其转发下去。\n\n## 具体代码 ##\n针对上述示例和角色描述，我们来将其转化成具体的代码。\n\n首先是处理者的抽象，针对上述示例，我们的抽象的请求处理方法应该为报销：\n```\npublic abstract class Leader {\n    //下一个处理者\n    private Leader nextLeader;\n\n    /**\n     * 处理报销请求\n     *\n     * @param money 申请报销的金额\n     */\n    public final void handlerRequest(int money) {\n        if (money <= getSelfLimit()) {\n            //当申请的金额<=自己的处理额度时,将此次请求消化\n            handler(money);\n        } else {\n            //否则交给下一个处理者来处理\n            if (nextLeader != null) {\n                nextLeader.handlerRequest(money);\n            }\n        }\n\n    }\n\n    /**\n     * 获取自身的额度，由具体实现来设置\n     *\n     * @return 自身能处理的额度\n     */\n    public abstract int getSelfLimit();\n\n    /**\n     * 具体处理逻辑在这里实现\n     *\n     * @param money 申请报销的金额\n     */\n    public abstract void handler(int money);\n\n\n    public void setNextLeader(Leader nextLeader) {\n        this.nextLeader = nextLeader;\n    }\n\n    public Leader getNextLeader() {\n        return nextLeader;\n    }\n}\n```\n代码还是有些多的，让我们来解释一下这个处理者抽象类：\n- nextLeader：指定了当请求无法处理时，下一级的处理者。这是**责任链模式**中，“链”的核心。对外暴露了set、get方法。\n- handlerRequest(int money)：注意此方法不是抽象并且是final修饰的，也就是无法重写，无法修改。它其中的逻辑是用来判断此次请求，应该是由自己消化，还是分发给下一个处理者。当你要开始请求时，只需要调用此方法即可。为了适应我们举的示例，这里有一个money参数。这里说一下，每一种设计模式仅仅代表着一种编程思想，具体代码还是要看需求的，如果需求复杂，那么这里分发的逻辑也会复杂、参数也会更多，反之亦然。\n- getSelfLimit()：抽象方法，指定处理者的最高处理额度。\n- handler(int money)：当此次请求该由自己消化时，具体的消化逻辑在这里实现。\n\n如果还有疑问，不要急，我们先来具体看一个处理者的实现，可能你就会恍然大悟：\n组长：\n```\npublic class LeaderGroup extends Leader {\n\n    /**\n     * @return 组长报销的处理额度\n     */\n    @Override\n    public int getSelfLimit() {\n        return 500;\n    }\n\n    /**\n     * 当报销金额 <= getSelfLimit() 时，请求会到这里来消化\n     *\n     * @param money 申请报销的金额\n     */\n    @Override\n    public void handler(int money) {\n        Toast.makeText(App.context, \"小钱，组长报销:\" + money, Toast.LENGTH_SHORT).show();\n    }\n}\n```\n组长继承了抽象的处理者，并指定了组长的报销额度以及具体的处理逻辑。\n同样的，总监和老板也是一样的道理：\n总监：\n```\npublic class LeaderGeneral extends Leader {\n\n    /**\n     * @return 总监报销的处理额度\n     */\n    @Override\n    public int getSelfLimit() {\n        return 2000;\n    }\n\n\n    /**\n     * 当报销金额 <= getSelfLimit() 时，请求会到这里来消化\n     *\n     * @param money 申请报销的金额\n     */\n    @Override\n    public void handler(int money) {\n        Toast.makeText(App.context, \"金额挺大，总监报销:\" + money, Toast.LENGTH_SHORT).show();\n    }\n}\n```\n老板：\n```\npublic class LeaderCEO extends Leader {\n\n    /**\n     * @return 老板报销的处理额度\n     */\n    @Override\n    public int getSelfLimit() {\n        return Integer.MAX_VALUE;\n    }\n\n\n    /**\n     * 当报销金额 <= getSelfLimit() 时，请求会到这里来消化\n     *\n     * @param money 申请报销的金额\n     */\n    @Override\n    public void handler(int money) {\n        Toast.makeText(App.context, \"这么多钱，老板报销:\" + money, Toast.LENGTH_SHORT).show();\n    }\n}\n```\n至此，我们的处理者抽象，以及处理者实现都已经完成了，下面我们来具体模拟一下报销流程：\n```\n//获取输入框中输入的金额\nString money = et_money.getText().toString();\nif (TextUtils.isEmpty(money)) {\n    Toast.makeText(this, \"请输入金额\", Toast.LENGTH_SHORT).show();\n    return;\n}\n//组长实例\nLeader group = new LeaderGroup();\n//总监实例\nLeader general = new LeaderGeneral();\n//CEO实例\nLeader CEO = new LeaderCEO();\n//组长的下一级是总监\ngroup.setNextLeader(general);\n//总监的下一级是CEO\ngeneral.setNextLeader(CEO);\n//由组长优先处理报销\ngroup.handlerRequest(Integer.valueOf(money));\n```\n上面的测试代码逻辑也很清晰：\n1. 获取到具体的报销金额\n2. 首先创了组长、总监、CEO的实例\n3. 按照组长 -> 总监 -> 老板 的报销顺序将其进行排序\n4. 由组长优先处理报销请求，当组长无法处理时，会由组长实例中的下一个处理者来处理。\n\n当我们需求发生变化，比如组长的报销金额变成了1000、比如现在组长没有报销权限了等等，你会发现非常地好维护。\n\n这里我们假设总监无法报销了，当组长无法报销时，直接找到CEO来报销：\n```\nLeader group = new LeaderGroup();\nLeader CEO = new LeaderCEO();\n\ngroup.setNextLeader(CEO);\n\ngroup.handlerRequest(Integer.valueOf(money));\n```\n我们仅仅是将组长的下一个处理者改为老板即可，就可以完美删除掉总监的存在。\n\n这种“链”式的写法，完美解耦了请求者和处理者，提高代码了灵活性。\n\n## 总结 ##\n到这里，一个最基本的**责任链模式**就完成了。\n\n[代码已经上传至GitHub](https://github.com/YuanTiger/Design-Pattern)。\n\n**责任链模式**的优点已经说过了。\n\n缺点就是处理者太多的话，必定会影响性能，尤其是在一些递归调用中，使用时一定要注意。\n\n## 感谢 ##\n\n《Android源码设计模式解析与实战》 何红辉、关爱民 著\n\n\n\n\n","slug":"Design-Responsibility","published":1,"updated":"2018-08-24T09:36:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7sxdwg000nhnnf99tj4x84","content":"<h2 id=\"模式介绍\"><a href=\"#模式介绍\" class=\"headerlink\" title=\"模式介绍\"></a>模式介绍</h2><p><strong>责任链模式</strong>是行为设计模式之一。</p>\n<p>首先我们从字面去理解<strong>责任链模式</strong>：“责任”指的是一个人应尽的义务、分内应做的事；“链”指的是一个个小环首尾相连，组成的长链条。</p>\n<p>为什么是“链”？因为“链”的每一环都是可以拆卸的，它们虽然是环环相扣，但是哪天我不想要中间的某一环，我只需要将其去下来即可，这大大提升了代码的灵活性。</p>\n<p>所以<strong>责任链模式</strong>通俗来讲，指的是<strong>一件</strong>事情，有顺序地传递给<strong>一群人</strong>，当第一个人无法处理时，再传递给第二个人去做，直到有人可以解决掉这件事情为止。</p>\n<h2 id=\"模式示例\"><a href=\"#模式示例\" class=\"headerlink\" title=\"模式示例\"></a>模式示例</h2><p>小明是一家技术公司的测试，他除了完成本职工作外，还负责给技术部的小伙伴购买零食，不过零食钱是先由小明自己垫付的，接着到月底拿着发票去找领导报销的流程。</p>\n<p>这个月的月底，小明算了一下，一共花费了2450元。</p>\n<p>接着小明拿着零食的发票去找组长报销，结果组长说这金额太大了，只有500以下我才有权限签字，你得去找技术总监。</p>\n<p>接着小明找到技术总监，总监说2450太多啦，只有2000以下我才有权限签字，你得去找咱们的老板。</p>\n<p>接着小明去到老板的办公室，老板看了一下说非常好，技术部的同学们都非常辛苦，以后都多买一些零食，接着麻溜地就签了字，小明顺利完成了此月的零食报销请求。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>通过上述示例，我相信大家已经有些理解<strong>责任链模式</strong>了。</p>\n<p>组长、总监、老板针对小明的报销请求，都有自己要做的事情，但是根据小明的报销金额不同，无法第一时间就知道到底是谁来处理这个报销请求。</p>\n<p>这就需要小明按照一定的顺序，一个个地去问，直到找到能处理此次报销请求的人为止。</p>\n<p>这种情况下，就非常适合使用我们今天要说的<strong>责任链模式</strong>。</p>\n<p>通过上面的描述，我们可以得出<strong>责任链模式</strong>的使用场景：</p>\n<ul>\n<li>一个请求需要多个对象处理，但具体由哪个对象处理需要在运行时动态判断时；</li>\n<li>需要动态指定一组对象处理一个请求。</li>\n</ul>\n<h2 id=\"所含角色\"><a href=\"#所含角色\" class=\"headerlink\" title=\"所含角色\"></a>所含角色</h2><p><strong>责任链模式</strong>包含两个主要角色：</p>\n<ul>\n<li>处理者抽象(Handler)：抽象的处理者，声明一个处理请求的方法，并在其中保持对下一个处理者的引用。</li>\n<li>处理者实现(HandlerImpl)：处理者抽象的具体实现，对请求进行处理，如果无法处理，则通过下一个处理者的引用将其转发下去。</li>\n</ul>\n<h2 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h2><p>针对上述示例和角色描述，我们来将其转化成具体的代码。</p>\n<p>首先是处理者的抽象，针对上述示例，我们的抽象的请求处理方法应该为报销：<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Leader</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//下一个处理者</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Leader nextLeader;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理报销请求</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> money 申请报销的金额</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handlerRequest</span><span class=\"params\">(<span class=\"keyword\">int</span> money)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (money &lt;= getSelfLimit()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//当申请的金额&lt;=自己的处理额度时,将此次请求消化</span></span><br><span class=\"line\">            <span class=\"keyword\">handler</span>(money);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//否则交给下一个处理者来处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nextLeader != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                nextLeader.handlerRequest(money);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取自身的额度，由具体实现来设置</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 自身能处理的额度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getSelfLimit</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 具体处理逻辑在这里实现</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> money 申请报销的金额</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handler</span><span class=\"params\">(<span class=\"keyword\">int</span> money)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setNextLeader</span><span class=\"params\">(Leader nextLeader)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nextLeader = nextLeader;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\">Leader <span class=\"title\">getNextLeader</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nextLeader;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>代码还是有些多的，让我们来解释一下这个处理者抽象类：</p>\n<ul>\n<li>nextLeader：指定了当请求无法处理时，下一级的处理者。这是<strong>责任链模式</strong>中，“链”的核心。对外暴露了set、get方法。</li>\n<li>handlerRequest(int money)：注意此方法不是抽象并且是final修饰的，也就是无法重写，无法修改。它其中的逻辑是用来判断此次请求，应该是由自己消化，还是分发给下一个处理者。当你要开始请求时，只需要调用此方法即可。为了适应我们举的示例，这里有一个money参数。这里说一下，每一种设计模式仅仅代表着一种编程思想，具体代码还是要看需求的，如果需求复杂，那么这里分发的逻辑也会复杂、参数也会更多，反之亦然。</li>\n<li>getSelfLimit()：抽象方法，指定处理者的最高处理额度。</li>\n<li>handler(int money)：当此次请求该由自己消化时，具体的消化逻辑在这里实现。</li>\n</ul>\n<p>如果还有疑问，不要急，我们先来具体看一个处理者的实现，可能你就会恍然大悟：<br>组长：<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LeaderGroup</span> <span class=\"keyword\">extends</span> <span class=\"title\">Leader</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @return 组长报销的处理额度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    public int getSelfLimit() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">500</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当报销金额 &lt;= getSelfLimit() 时，请求会到这里来消化</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @param money 申请报销的金额</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    public void handler(int money) &#123;</span><br><span class=\"line\">        <span class=\"type\">Toast</span>.makeText(<span class=\"type\">App</span>.context, <span class=\"string\">\"小钱，组长报销:\"</span> + money, <span class=\"type\">Toast</span>.<span class=\"type\">LENGTH_SHORT</span>).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>组长继承了抽象的处理者，并指定了组长的报销额度以及具体的处理逻辑。<br>同样的，总监和老板也是一样的道理：<br>总监：<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LeaderGeneral</span> <span class=\"keyword\">extends</span> <span class=\"title\">Leader</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @return 总监报销的处理额度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    public int getSelfLimit() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2000</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当报销金额 &lt;= getSelfLimit() 时，请求会到这里来消化</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @param money 申请报销的金额</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    public void handler(int money) &#123;</span><br><span class=\"line\">        <span class=\"type\">Toast</span>.makeText(<span class=\"type\">App</span>.context, <span class=\"string\">\"金额挺大，总监报销:\"</span> + money, <span class=\"type\">Toast</span>.<span class=\"type\">LENGTH_SHORT</span>).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>老板：<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LeaderCEO</span> <span class=\"keyword\">extends</span> <span class=\"title\">Leader</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @return 老板报销的处理额度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    public int getSelfLimit() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Integer</span>.<span class=\"type\">MAX_VALUE</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当报销金额 &lt;= getSelfLimit() 时，请求会到这里来消化</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @param money 申请报销的金额</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    public void handler(int money) &#123;</span><br><span class=\"line\">        <span class=\"type\">Toast</span>.makeText(<span class=\"type\">App</span>.context, <span class=\"string\">\"这么多钱，老板报销:\"</span> + money, <span class=\"type\">Toast</span>.<span class=\"type\">LENGTH_SHORT</span>).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>至此，我们的处理者抽象，以及处理者实现都已经完成了，下面我们来具体模拟一下报销流程：<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取输入框中输入的金额</span></span><br><span class=\"line\">String money = et_money.<span class=\"keyword\">getText</span>().toString();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (TextUtils.isEmpty(money)) &#123;</span><br><span class=\"line\">    Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"请输入金额\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//组长实例</span></span><br><span class=\"line\">Leader <span class=\"keyword\">group</span> = <span class=\"keyword\">new</span> LeaderGroup();</span><br><span class=\"line\"><span class=\"comment\">//总监实例</span></span><br><span class=\"line\">Leader general = <span class=\"keyword\">new</span> LeaderGeneral();</span><br><span class=\"line\"><span class=\"comment\">//CEO实例</span></span><br><span class=\"line\">Leader CEO = <span class=\"keyword\">new</span> LeaderCEO();</span><br><span class=\"line\"><span class=\"comment\">//组长的下一级是总监</span></span><br><span class=\"line\"><span class=\"keyword\">group</span>.setNextLeader(general);</span><br><span class=\"line\"><span class=\"comment\">//总监的下一级是CEO</span></span><br><span class=\"line\">general.setNextLeader(CEO);</span><br><span class=\"line\"><span class=\"comment\">//由组长优先处理报销</span></span><br><span class=\"line\"><span class=\"keyword\">group</span>.handlerRequest(Integer.valueOf(money));</span><br></pre></td></tr></table></figure></p>\n<p>上面的测试代码逻辑也很清晰：</p>\n<ol>\n<li>获取到具体的报销金额</li>\n<li>首先创了组长、总监、CEO的实例</li>\n<li>按照组长 -&gt; 总监 -&gt; 老板 的报销顺序将其进行排序</li>\n<li>由组长优先处理报销请求，当组长无法处理时，会由组长实例中的下一个处理者来处理。</li>\n</ol>\n<p>当我们需求发生变化，比如组长的报销金额变成了1000、比如现在组长没有报销权限了等等，你会发现非常地好维护。</p>\n<p>这里我们假设总监无法报销了，当组长无法报销时，直接找到CEO来报销：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Leader<span class=\"built_in\"> group </span>= new LeaderGroup();</span><br><span class=\"line\">Leader CEO = new LeaderCEO();</span><br><span class=\"line\"></span><br><span class=\"line\">group.setNextLeader(CEO);</span><br><span class=\"line\"></span><br><span class=\"line\">group.handlerRequest(Integer.valueOf(money));</span><br></pre></td></tr></table></figure></p>\n<p>我们仅仅是将组长的下一个处理者改为老板即可，就可以完美删除掉总监的存在。</p>\n<p>这种“链”式的写法，完美解耦了请求者和处理者，提高代码了灵活性。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到这里，一个最基本的<strong>责任链模式</strong>就完成了。</p>\n<p><a href=\"https://github.com/YuanTiger/Design-Pattern\" target=\"_blank\" rel=\"noopener\">代码已经上传至GitHub</a>。</p>\n<p><strong>责任链模式</strong>的优点已经说过了。</p>\n<p>缺点就是处理者太多的话，必定会影响性能，尤其是在一些递归调用中，使用时一定要注意。</p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p>《Android源码设计模式解析与实战》 何红辉、关爱民 著</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"模式介绍\"><a href=\"#模式介绍\" class=\"headerlink\" title=\"模式介绍\"></a>模式介绍</h2><p><strong>责任链模式</strong>是行为设计模式之一。</p>\n<p>首先我们从字面去理解<strong>责任链模式</strong>：“责任”指的是一个人应尽的义务、分内应做的事；“链”指的是一个个小环首尾相连，组成的长链条。</p>\n<p>为什么是“链”？因为“链”的每一环都是可以拆卸的，它们虽然是环环相扣，但是哪天我不想要中间的某一环，我只需要将其去下来即可，这大大提升了代码的灵活性。</p>\n<p>所以<strong>责任链模式</strong>通俗来讲，指的是<strong>一件</strong>事情，有顺序地传递给<strong>一群人</strong>，当第一个人无法处理时，再传递给第二个人去做，直到有人可以解决掉这件事情为止。</p>\n<h2 id=\"模式示例\"><a href=\"#模式示例\" class=\"headerlink\" title=\"模式示例\"></a>模式示例</h2><p>小明是一家技术公司的测试，他除了完成本职工作外，还负责给技术部的小伙伴购买零食，不过零食钱是先由小明自己垫付的，接着到月底拿着发票去找领导报销的流程。</p>\n<p>这个月的月底，小明算了一下，一共花费了2450元。</p>\n<p>接着小明拿着零食的发票去找组长报销，结果组长说这金额太大了，只有500以下我才有权限签字，你得去找技术总监。</p>\n<p>接着小明找到技术总监，总监说2450太多啦，只有2000以下我才有权限签字，你得去找咱们的老板。</p>\n<p>接着小明去到老板的办公室，老板看了一下说非常好，技术部的同学们都非常辛苦，以后都多买一些零食，接着麻溜地就签了字，小明顺利完成了此月的零食报销请求。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>通过上述示例，我相信大家已经有些理解<strong>责任链模式</strong>了。</p>\n<p>组长、总监、老板针对小明的报销请求，都有自己要做的事情，但是根据小明的报销金额不同，无法第一时间就知道到底是谁来处理这个报销请求。</p>\n<p>这就需要小明按照一定的顺序，一个个地去问，直到找到能处理此次报销请求的人为止。</p>\n<p>这种情况下，就非常适合使用我们今天要说的<strong>责任链模式</strong>。</p>\n<p>通过上面的描述，我们可以得出<strong>责任链模式</strong>的使用场景：</p>\n<ul>\n<li>一个请求需要多个对象处理，但具体由哪个对象处理需要在运行时动态判断时；</li>\n<li>需要动态指定一组对象处理一个请求。</li>\n</ul>\n<h2 id=\"所含角色\"><a href=\"#所含角色\" class=\"headerlink\" title=\"所含角色\"></a>所含角色</h2><p><strong>责任链模式</strong>包含两个主要角色：</p>\n<ul>\n<li>处理者抽象(Handler)：抽象的处理者，声明一个处理请求的方法，并在其中保持对下一个处理者的引用。</li>\n<li>处理者实现(HandlerImpl)：处理者抽象的具体实现，对请求进行处理，如果无法处理，则通过下一个处理者的引用将其转发下去。</li>\n</ul>\n<h2 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h2><p>针对上述示例和角色描述，我们来将其转化成具体的代码。</p>\n<p>首先是处理者的抽象，针对上述示例，我们的抽象的请求处理方法应该为报销：<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Leader</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//下一个处理者</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Leader nextLeader;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 处理报销请求</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> money 申请报销的金额</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handlerRequest</span><span class=\"params\">(<span class=\"keyword\">int</span> money)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (money &lt;= getSelfLimit()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//当申请的金额&lt;=自己的处理额度时,将此次请求消化</span></span><br><span class=\"line\">            <span class=\"keyword\">handler</span>(money);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//否则交给下一个处理者来处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nextLeader != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                nextLeader.handlerRequest(money);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取自身的额度，由具体实现来设置</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 自身能处理的额度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getSelfLimit</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 具体处理逻辑在这里实现</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> money 申请报销的金额</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handler</span><span class=\"params\">(<span class=\"keyword\">int</span> money)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setNextLeader</span><span class=\"params\">(Leader nextLeader)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nextLeader = nextLeader;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\">Leader <span class=\"title\">getNextLeader</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nextLeader;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>代码还是有些多的，让我们来解释一下这个处理者抽象类：</p>\n<ul>\n<li>nextLeader：指定了当请求无法处理时，下一级的处理者。这是<strong>责任链模式</strong>中，“链”的核心。对外暴露了set、get方法。</li>\n<li>handlerRequest(int money)：注意此方法不是抽象并且是final修饰的，也就是无法重写，无法修改。它其中的逻辑是用来判断此次请求，应该是由自己消化，还是分发给下一个处理者。当你要开始请求时，只需要调用此方法即可。为了适应我们举的示例，这里有一个money参数。这里说一下，每一种设计模式仅仅代表着一种编程思想，具体代码还是要看需求的，如果需求复杂，那么这里分发的逻辑也会复杂、参数也会更多，反之亦然。</li>\n<li>getSelfLimit()：抽象方法，指定处理者的最高处理额度。</li>\n<li>handler(int money)：当此次请求该由自己消化时，具体的消化逻辑在这里实现。</li>\n</ul>\n<p>如果还有疑问，不要急，我们先来具体看一个处理者的实现，可能你就会恍然大悟：<br>组长：<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LeaderGroup</span> <span class=\"keyword\">extends</span> <span class=\"title\">Leader</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @return 组长报销的处理额度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    public int getSelfLimit() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">500</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当报销金额 &lt;= getSelfLimit() 时，请求会到这里来消化</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @param money 申请报销的金额</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    public void handler(int money) &#123;</span><br><span class=\"line\">        <span class=\"type\">Toast</span>.makeText(<span class=\"type\">App</span>.context, <span class=\"string\">\"小钱，组长报销:\"</span> + money, <span class=\"type\">Toast</span>.<span class=\"type\">LENGTH_SHORT</span>).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>组长继承了抽象的处理者，并指定了组长的报销额度以及具体的处理逻辑。<br>同样的，总监和老板也是一样的道理：<br>总监：<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LeaderGeneral</span> <span class=\"keyword\">extends</span> <span class=\"title\">Leader</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @return 总监报销的处理额度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    public int getSelfLimit() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2000</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当报销金额 &lt;= getSelfLimit() 时，请求会到这里来消化</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @param money 申请报销的金额</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    public void handler(int money) &#123;</span><br><span class=\"line\">        <span class=\"type\">Toast</span>.makeText(<span class=\"type\">App</span>.context, <span class=\"string\">\"金额挺大，总监报销:\"</span> + money, <span class=\"type\">Toast</span>.<span class=\"type\">LENGTH_SHORT</span>).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>老板：<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LeaderCEO</span> <span class=\"keyword\">extends</span> <span class=\"title\">Leader</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * @return 老板报销的处理额度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    public int getSelfLimit() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Integer</span>.<span class=\"type\">MAX_VALUE</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当报销金额 &lt;= getSelfLimit() 时，请求会到这里来消化</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @param money 申请报销的金额</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    public void handler(int money) &#123;</span><br><span class=\"line\">        <span class=\"type\">Toast</span>.makeText(<span class=\"type\">App</span>.context, <span class=\"string\">\"这么多钱，老板报销:\"</span> + money, <span class=\"type\">Toast</span>.<span class=\"type\">LENGTH_SHORT</span>).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>至此，我们的处理者抽象，以及处理者实现都已经完成了，下面我们来具体模拟一下报销流程：<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取输入框中输入的金额</span></span><br><span class=\"line\">String money = et_money.<span class=\"keyword\">getText</span>().toString();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (TextUtils.isEmpty(money)) &#123;</span><br><span class=\"line\">    Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"请输入金额\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//组长实例</span></span><br><span class=\"line\">Leader <span class=\"keyword\">group</span> = <span class=\"keyword\">new</span> LeaderGroup();</span><br><span class=\"line\"><span class=\"comment\">//总监实例</span></span><br><span class=\"line\">Leader general = <span class=\"keyword\">new</span> LeaderGeneral();</span><br><span class=\"line\"><span class=\"comment\">//CEO实例</span></span><br><span class=\"line\">Leader CEO = <span class=\"keyword\">new</span> LeaderCEO();</span><br><span class=\"line\"><span class=\"comment\">//组长的下一级是总监</span></span><br><span class=\"line\"><span class=\"keyword\">group</span>.setNextLeader(general);</span><br><span class=\"line\"><span class=\"comment\">//总监的下一级是CEO</span></span><br><span class=\"line\">general.setNextLeader(CEO);</span><br><span class=\"line\"><span class=\"comment\">//由组长优先处理报销</span></span><br><span class=\"line\"><span class=\"keyword\">group</span>.handlerRequest(Integer.valueOf(money));</span><br></pre></td></tr></table></figure></p>\n<p>上面的测试代码逻辑也很清晰：</p>\n<ol>\n<li>获取到具体的报销金额</li>\n<li>首先创了组长、总监、CEO的实例</li>\n<li>按照组长 -&gt; 总监 -&gt; 老板 的报销顺序将其进行排序</li>\n<li>由组长优先处理报销请求，当组长无法处理时，会由组长实例中的下一个处理者来处理。</li>\n</ol>\n<p>当我们需求发生变化，比如组长的报销金额变成了1000、比如现在组长没有报销权限了等等，你会发现非常地好维护。</p>\n<p>这里我们假设总监无法报销了，当组长无法报销时，直接找到CEO来报销：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Leader<span class=\"built_in\"> group </span>= new LeaderGroup();</span><br><span class=\"line\">Leader CEO = new LeaderCEO();</span><br><span class=\"line\"></span><br><span class=\"line\">group.setNextLeader(CEO);</span><br><span class=\"line\"></span><br><span class=\"line\">group.handlerRequest(Integer.valueOf(money));</span><br></pre></td></tr></table></figure></p>\n<p>我们仅仅是将组长的下一个处理者改为老板即可，就可以完美删除掉总监的存在。</p>\n<p>这种“链”式的写法，完美解耦了请求者和处理者，提高代码了灵活性。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到这里，一个最基本的<strong>责任链模式</strong>就完成了。</p>\n<p><a href=\"https://github.com/YuanTiger/Design-Pattern\" target=\"_blank\" rel=\"noopener\">代码已经上传至GitHub</a>。</p>\n<p><strong>责任链模式</strong>的优点已经说过了。</p>\n<p>缺点就是处理者太多的话，必定会影响性能，尤其是在一些递归调用中，使用时一定要注意。</p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p>《Android源码设计模式解析与实战》 何红辉、关爱民 著</p>\n"},{"title":"应用最广-单例模式","date":"2017-05-27T02:45:14.000Z","_content":"## 模式介绍 ##\n单例模式是应用最广泛的模式之一。\n单例模式是为了确保一个类在整个项目中只有一个实例对象。\n**单例模式最大的优势就是可以避免资源的浪费**。\n比如访问IO和数据库等资源时就应考虑使用单例模式。\n## 模式特点 ##\n1. 构造方法私有化，使用`private`来修饰；\n2. 确保对象有且只有一个，尤其是在多线程的环境下；\n3. 通过静态方法或枚举返回已经实例化好的对象。\n\n## 模式示例 ##\n实现单例模式的方式有很多，不过核心是不变的，都要严格遵循单例模式的特点。\n下面我们来介绍实现单例的方式：\n1. 饿汉式\n\n    ```\npublic class 饿汉式 {\n    //自行实例化对象\n    private static final 饿汉式 ourInstance = new 饿汉式();\n    //通过静态方法返回对象\n    public static 饿汉式 getInstance() {\n        return ourInstance;\n    }\n    //构造方法私有化，不能通过new来创建对象\n    private 饿汉式() {\n    }\n}\n    ```\n 值得一提的是，AndroidStudio在创建类时指定该类为单例的时候，默认就是使用饿汉式：\n![](http://7xvzby.com1.z0.glb.clouddn.com/design_single_01.png)\n 饿汉式写起来非常简单、快捷，但是缺点也显而易见：\n在类初始化的时候，对象就已经创建好了。\n如果说我们没有用到该类，就会造成资源的浪费。\n\n2. 懒汉式\n    ```\npublic class 最简单的懒汉式 {\n    //全项目唯一的对象\n    private static 最简单的懒汉式 ourInstance;\n\n    //构造方法私有化\n    private 最简单的懒汉式() {\n\n    }\n\n    //通过静态方法来返回对象\n    public static 最简单的懒汉式 getInstance() {\n        //在调用该方法时进行判空，在对象为null时创建对象\n        if (ourInstance == null) {\n            ourInstance = new 最简单的懒汉式();\n        }\n        return ourInstance;\n    }\n}\n    ```\n 这就是单例中懒汉式的最基本写法。\n 比起饿汉式，最大的优势就是不会造成资源的浪费。因为只有在用到时，才会进行对象的实例化。\n 但是就上面的写法而言，还存在一个很致命的问题：\n **在多线程同时调用时，会出现多个实例对象的情况**。\n[Demo](https://github.com/YuanTiger/Design-Pattern)里有对应的测试代码，出现的概率很小，但是确实会出现。\n解决这个问题的方式也很简单，为静态方法添加同步锁：\n    ```\n//通过静态方法来返回对象\npublic static synchronized 同步锁的懒汉式 getInstance() {\n     //在调用该方法时进行判空，在对象为null时创建对象\n        if (ourInstance == null) {\n            ourInstance = new 同步锁的懒汉式();\n        }\n         return ourInstance;\n}\n    ```\n `synchronized`就是同步锁的关键字，加上该关键字，代表着该方法同时只能在唯一的一个线程中运行。\n比如当10个线程去调用`同步锁的懒汉式.getInstance()`时，只有当第1个线程完成访问时，第2个线程才会开始执行该方法。当第1个线程访问完成后，单例对象就已经创建完成，所以第2个线程就会直接返回该对象，不会再去创建，这就保证了线程安全。\n这样确实解决了我们所说的线程安全的问题，但是这种做法明显是低效率的：\n我们的目的是保证项目中有且只有一个对象，上述代码确实实现了这个目的。但是当对象创建成功后，我们希望多线程访问的时候应该是异步高效、同时执行的的，而不是像上面那样队列式的，我要等你用完我才能用。所以就有了**双重校验锁**的懒汉式：\n    ```\npublic static 同步锁的懒汉式 getInstance() {\n    if (ourInstance == null) {\n        synchronized (new Object()) {\n            if (ourInstance == null) {\n                ourInstance = new 同步锁的懒汉式()\n            }\n        }\n    }\n    return ourInstance;\n}\n    ```\n 这种写法可以完美解决多线程效率低下的问题，那么到底是如何解决的？\n **双重校验锁**指的是会进行两次判空操作：\n\t```\nourInstance == null\n\t```\n 一次在同步锁外，一次在同步锁内。\n 有的看官就有疑问了：两次判空？\n 首先是`synchronized`关键字，我们删除了方法的同步锁，将其移动到了方法内部，对\n \t```\nourInstance = new 同步锁的懒汉式()\n\t```\n 单独加锁。这就代表着我们这个方法本身已经不是线程安全了，会有多个线程同时访问外层的**if**。如果同步锁内部没有判空，就会有多个线程等待对象创建，就会生成多个实例对象。\n所以**双重校验锁**的每一步都非常关键，必不可少。\n**双重校验锁**的写法主要是为了在多线程创建对象时，用同步锁来保证对象的唯一。当对象创建完成后，同步锁外层的判空操作就不成立了，那么会直接返回对象，整个方法就与同步锁无关，多线程访问时也就不需要等待了。\n**双重校验锁**懒汉式，看起来已经非常完美了！\n但是，很遗憾。\n因为JVM存在**指令重排**的优化，又会产生新的问题。\n ![](http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/heirenwenhao_2.jpg)\n **指令重排**是JVM为了提高程序运行效率。\nJVM规范规定，**指令重排序可以在不影响单线程程序执行结果的情况下改变代码执行顺序**。\n该处会产生**指令重排**的代码是\n\t```\nourInstance = new 同步锁的懒汉式();\n\t```\n 这句代码在JVM看来，主要是做了以下三件事情：\n  （1）给`ourInstance`分配内存；\n  （2）调用构造方法创建对象，对对象进行初始化；\n  （3）将`ourInstance`对象指向JVM分配的内存空间（此步完成之后，`ourInstance`就是非null了）。\n因为JVM存在**指令重排**，所以在不影响最终结果的情况下，JVM会选择性能最优的的顺序执行：\n也就是说，上面三件事情，执行的顺序可能是1-2-3，也有可能是1-3-2。\n1-2-3，1-3-2，有区别吗？\n在结果上来看，没有任何区别。\n但是在多线程的情况下，是有风险的：\n假设线程x的执行顺序是1-3-2，当3执行完成时，`ourInstance`就已经不为空了，但是2还没有执行完成时，线程y介入了。此时线程y会发现`ourInstance`已经不为null了，但是其实`ourInstance`的初始化工作并未完成，这样很明显就会产生异常。\n解决方法也非常简单，利用`volatile`关键字即可：\n    ```\npublic class 完美的懒汉式 {\n    //全项目唯一的对象\n    //volatile关键字，禁止指令重排\n    private volatile  static 完美的懒汉式 ourInstance;\n\n    //构造方法私有化\n    private 完美的懒汉式() {\n\n    }\n\n    //通过静态方法来返回对象\n    public static 完美的懒汉式 getInstance() {\n        //在调用该方法时进行判空，在对象为null时创建对象\n        if (ourInstance == null) {\n            synchronized (new Object()) {\n                if (ourInstance == null) {\n                    ourInstance = new 完美的懒汉式();\n                }\n            }\n        }\n        return ourInstance;\n    }\n    ```\n 上述代码就是一个完美的懒汉式了，利用`volatile`关键字来禁止JVM的**指令重排**。\n \n3. 枚举（Enum）\n    ```\n public enum 枚举单例 {\n\n    INSTANCE;\n    \n    public String getUrl(){\n        return \"http://www.baidu.com\";\n    }\n}\n    ```\n 使用起来也非常简单：\n    ```\n    String url = 枚举单例.INSTANCE.getUrl();\n    ```\n 简直完美啊！简单易用，代码清晰！\n但是，很少有人选择用枚举单例。\n可能。。。。。？\n \n## 总结 ##\n简单回顾一下：\n单例模式是保证了一个类在一个项目中有且只有一个实例对象。\n这样做的目的是为了节省内存的开支。\n单例模式的写法主要有：\n- **项目初始化时就创建好的饿汉式**\n- **在第一次使用时才进行创建、但要注意线程安全的懒汉式**\n- **使用非常简单的枚举**\n##\n## 感谢 ##\n[Jark's Blog-如何正确地写出单例模式\n](http://wuchong.me/blog/2014/08/28/how-to-correctly-write-singleton-pattern/)\n《Android源码设计模式解析与实战》 何红辉、关爱民 著","source":"_posts/Design-Single.md","raw":"---\ntitle: 应用最广-单例模式\ndate: 2017-05-27 10:45:14\ntags:\n   - 编程思想\n---\n## 模式介绍 ##\n单例模式是应用最广泛的模式之一。\n单例模式是为了确保一个类在整个项目中只有一个实例对象。\n**单例模式最大的优势就是可以避免资源的浪费**。\n比如访问IO和数据库等资源时就应考虑使用单例模式。\n## 模式特点 ##\n1. 构造方法私有化，使用`private`来修饰；\n2. 确保对象有且只有一个，尤其是在多线程的环境下；\n3. 通过静态方法或枚举返回已经实例化好的对象。\n\n## 模式示例 ##\n实现单例模式的方式有很多，不过核心是不变的，都要严格遵循单例模式的特点。\n下面我们来介绍实现单例的方式：\n1. 饿汉式\n\n    ```\npublic class 饿汉式 {\n    //自行实例化对象\n    private static final 饿汉式 ourInstance = new 饿汉式();\n    //通过静态方法返回对象\n    public static 饿汉式 getInstance() {\n        return ourInstance;\n    }\n    //构造方法私有化，不能通过new来创建对象\n    private 饿汉式() {\n    }\n}\n    ```\n 值得一提的是，AndroidStudio在创建类时指定该类为单例的时候，默认就是使用饿汉式：\n![](http://7xvzby.com1.z0.glb.clouddn.com/design_single_01.png)\n 饿汉式写起来非常简单、快捷，但是缺点也显而易见：\n在类初始化的时候，对象就已经创建好了。\n如果说我们没有用到该类，就会造成资源的浪费。\n\n2. 懒汉式\n    ```\npublic class 最简单的懒汉式 {\n    //全项目唯一的对象\n    private static 最简单的懒汉式 ourInstance;\n\n    //构造方法私有化\n    private 最简单的懒汉式() {\n\n    }\n\n    //通过静态方法来返回对象\n    public static 最简单的懒汉式 getInstance() {\n        //在调用该方法时进行判空，在对象为null时创建对象\n        if (ourInstance == null) {\n            ourInstance = new 最简单的懒汉式();\n        }\n        return ourInstance;\n    }\n}\n    ```\n 这就是单例中懒汉式的最基本写法。\n 比起饿汉式，最大的优势就是不会造成资源的浪费。因为只有在用到时，才会进行对象的实例化。\n 但是就上面的写法而言，还存在一个很致命的问题：\n **在多线程同时调用时，会出现多个实例对象的情况**。\n[Demo](https://github.com/YuanTiger/Design-Pattern)里有对应的测试代码，出现的概率很小，但是确实会出现。\n解决这个问题的方式也很简单，为静态方法添加同步锁：\n    ```\n//通过静态方法来返回对象\npublic static synchronized 同步锁的懒汉式 getInstance() {\n     //在调用该方法时进行判空，在对象为null时创建对象\n        if (ourInstance == null) {\n            ourInstance = new 同步锁的懒汉式();\n        }\n         return ourInstance;\n}\n    ```\n `synchronized`就是同步锁的关键字，加上该关键字，代表着该方法同时只能在唯一的一个线程中运行。\n比如当10个线程去调用`同步锁的懒汉式.getInstance()`时，只有当第1个线程完成访问时，第2个线程才会开始执行该方法。当第1个线程访问完成后，单例对象就已经创建完成，所以第2个线程就会直接返回该对象，不会再去创建，这就保证了线程安全。\n这样确实解决了我们所说的线程安全的问题，但是这种做法明显是低效率的：\n我们的目的是保证项目中有且只有一个对象，上述代码确实实现了这个目的。但是当对象创建成功后，我们希望多线程访问的时候应该是异步高效、同时执行的的，而不是像上面那样队列式的，我要等你用完我才能用。所以就有了**双重校验锁**的懒汉式：\n    ```\npublic static 同步锁的懒汉式 getInstance() {\n    if (ourInstance == null) {\n        synchronized (new Object()) {\n            if (ourInstance == null) {\n                ourInstance = new 同步锁的懒汉式()\n            }\n        }\n    }\n    return ourInstance;\n}\n    ```\n 这种写法可以完美解决多线程效率低下的问题，那么到底是如何解决的？\n **双重校验锁**指的是会进行两次判空操作：\n\t```\nourInstance == null\n\t```\n 一次在同步锁外，一次在同步锁内。\n 有的看官就有疑问了：两次判空？\n 首先是`synchronized`关键字，我们删除了方法的同步锁，将其移动到了方法内部，对\n \t```\nourInstance = new 同步锁的懒汉式()\n\t```\n 单独加锁。这就代表着我们这个方法本身已经不是线程安全了，会有多个线程同时访问外层的**if**。如果同步锁内部没有判空，就会有多个线程等待对象创建，就会生成多个实例对象。\n所以**双重校验锁**的每一步都非常关键，必不可少。\n**双重校验锁**的写法主要是为了在多线程创建对象时，用同步锁来保证对象的唯一。当对象创建完成后，同步锁外层的判空操作就不成立了，那么会直接返回对象，整个方法就与同步锁无关，多线程访问时也就不需要等待了。\n**双重校验锁**懒汉式，看起来已经非常完美了！\n但是，很遗憾。\n因为JVM存在**指令重排**的优化，又会产生新的问题。\n ![](http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/heirenwenhao_2.jpg)\n **指令重排**是JVM为了提高程序运行效率。\nJVM规范规定，**指令重排序可以在不影响单线程程序执行结果的情况下改变代码执行顺序**。\n该处会产生**指令重排**的代码是\n\t```\nourInstance = new 同步锁的懒汉式();\n\t```\n 这句代码在JVM看来，主要是做了以下三件事情：\n  （1）给`ourInstance`分配内存；\n  （2）调用构造方法创建对象，对对象进行初始化；\n  （3）将`ourInstance`对象指向JVM分配的内存空间（此步完成之后，`ourInstance`就是非null了）。\n因为JVM存在**指令重排**，所以在不影响最终结果的情况下，JVM会选择性能最优的的顺序执行：\n也就是说，上面三件事情，执行的顺序可能是1-2-3，也有可能是1-3-2。\n1-2-3，1-3-2，有区别吗？\n在结果上来看，没有任何区别。\n但是在多线程的情况下，是有风险的：\n假设线程x的执行顺序是1-3-2，当3执行完成时，`ourInstance`就已经不为空了，但是2还没有执行完成时，线程y介入了。此时线程y会发现`ourInstance`已经不为null了，但是其实`ourInstance`的初始化工作并未完成，这样很明显就会产生异常。\n解决方法也非常简单，利用`volatile`关键字即可：\n    ```\npublic class 完美的懒汉式 {\n    //全项目唯一的对象\n    //volatile关键字，禁止指令重排\n    private volatile  static 完美的懒汉式 ourInstance;\n\n    //构造方法私有化\n    private 完美的懒汉式() {\n\n    }\n\n    //通过静态方法来返回对象\n    public static 完美的懒汉式 getInstance() {\n        //在调用该方法时进行判空，在对象为null时创建对象\n        if (ourInstance == null) {\n            synchronized (new Object()) {\n                if (ourInstance == null) {\n                    ourInstance = new 完美的懒汉式();\n                }\n            }\n        }\n        return ourInstance;\n    }\n    ```\n 上述代码就是一个完美的懒汉式了，利用`volatile`关键字来禁止JVM的**指令重排**。\n \n3. 枚举（Enum）\n    ```\n public enum 枚举单例 {\n\n    INSTANCE;\n    \n    public String getUrl(){\n        return \"http://www.baidu.com\";\n    }\n}\n    ```\n 使用起来也非常简单：\n    ```\n    String url = 枚举单例.INSTANCE.getUrl();\n    ```\n 简直完美啊！简单易用，代码清晰！\n但是，很少有人选择用枚举单例。\n可能。。。。。？\n \n## 总结 ##\n简单回顾一下：\n单例模式是保证了一个类在一个项目中有且只有一个实例对象。\n这样做的目的是为了节省内存的开支。\n单例模式的写法主要有：\n- **项目初始化时就创建好的饿汉式**\n- **在第一次使用时才进行创建、但要注意线程安全的懒汉式**\n- **使用非常简单的枚举**\n##\n## 感谢 ##\n[Jark's Blog-如何正确地写出单例模式\n](http://wuchong.me/blog/2014/08/28/how-to-correctly-write-singleton-pattern/)\n《Android源码设计模式解析与实战》 何红辉、关爱民 著","slug":"Design-Single","published":1,"updated":"2018-08-24T09:36:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7sxdwj000phnnfsooinq9b","content":"<h2 id=\"模式介绍\"><a href=\"#模式介绍\" class=\"headerlink\" title=\"模式介绍\"></a>模式介绍</h2><p>单例模式是应用最广泛的模式之一。<br>单例模式是为了确保一个类在整个项目中只有一个实例对象。<br><strong>单例模式最大的优势就是可以避免资源的浪费</strong>。<br>比如访问IO和数据库等资源时就应考虑使用单例模式。</p>\n<h2 id=\"模式特点\"><a href=\"#模式特点\" class=\"headerlink\" title=\"模式特点\"></a>模式特点</h2><ol>\n<li>构造方法私有化，使用<code>private</code>来修饰；</li>\n<li>确保对象有且只有一个，尤其是在多线程的环境下；</li>\n<li>通过静态方法或枚举返回已经实例化好的对象。</li>\n</ol>\n<h2 id=\"模式示例\"><a href=\"#模式示例\" class=\"headerlink\" title=\"模式示例\"></a>模式示例</h2><p>实现单例模式的方式有很多，不过核心是不变的，都要严格遵循单例模式的特点。<br>下面我们来介绍实现单例的方式：</p>\n<ol>\n<li><p>饿汉式</p>\n <figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> 饿汉式 </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//自行实例化对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> 饿汉式 ourInstance = <span class=\"keyword\">new</span> 饿汉式();</span><br><span class=\"line\">    <span class=\"comment\">//通过静态方法返回对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> 饿汉式 getInstance() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ourInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//构造方法私有化，不能通过new来创建对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> 饿汉式() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>值得一提的是，AndroidStudio在创建类时指定该类为单例的时候，默认就是使用饿汉式：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/design_single_01.png\" alt=\"\"><br>饿汉式写起来非常简单、快捷，但是缺点也显而易见：<br>在类初始化的时候，对象就已经创建好了。<br>如果说我们没有用到该类，就会造成资源的浪费。</p>\n</li>\n<li><p>懒汉式</p>\n <figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> 最简单的懒汉式 </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//全项目唯一的对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> 最简单的懒汉式 ourInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造方法私有化</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> 最简单的懒汉式() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过静态方法来返回对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> 最简单的懒汉式 getInstance() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//在调用该方法时进行判空，在对象为null时创建对象</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ourInstance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            ourInstance = <span class=\"keyword\">new</span> <span class=\"type\"></span>最简单的懒汉式();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ourInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这就是单例中懒汉式的最基本写法。<br>比起饿汉式，最大的优势就是不会造成资源的浪费。因为只有在用到时，才会进行对象的实例化。<br>但是就上面的写法而言，还存在一个很致命的问题：<br><strong>在多线程同时调用时，会出现多个实例对象的情况</strong>。<br><a href=\"https://github.com/YuanTiger/Design-Pattern\" target=\"_blank\" rel=\"noopener\">Demo</a>里有对应的测试代码，出现的概率很小，但是确实会出现。<br>解决这个问题的方式也很简单，为静态方法添加同步锁：</p>\n <figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过静态方法来返回对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> 同步锁的懒汉式 getInstance() &#123;</span><br><span class=\"line\">     <span class=\"comment\">//在调用该方法时进行判空，在对象为null时创建对象</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ourInstance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            ourInstance = <span class=\"keyword\">new</span> 同步锁的懒汉式();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> ourInstance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>synchronized</code>就是同步锁的关键字，加上该关键字，代表着该方法同时只能在唯一的一个线程中运行。<br>比如当10个线程去调用<code>同步锁的懒汉式.getInstance()</code>时，只有当第1个线程完成访问时，第2个线程才会开始执行该方法。当第1个线程访问完成后，单例对象就已经创建完成，所以第2个线程就会直接返回该对象，不会再去创建，这就保证了线程安全。<br>这样确实解决了我们所说的线程安全的问题，但是这种做法明显是低效率的：<br>我们的目的是保证项目中有且只有一个对象，上述代码确实实现了这个目的。但是当对象创建成功后，我们希望多线程访问的时候应该是异步高效、同时执行的的，而不是像上面那样队列式的，我要等你用完我才能用。所以就有了<strong>双重校验锁</strong>的懒汉式：</p>\n <figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> 同步锁的懒汉式 getInstance() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ourInstance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        synchronized (<span class=\"keyword\">new</span> <span class=\"type\">Object</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ourInstance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                ourInstance = <span class=\"keyword\">new</span> <span class=\"type\"></span>同步锁的懒汉式()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ourInstance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种写法可以完美解决多线程效率低下的问题，那么到底是如何解决的？<br><strong>双重校验锁</strong>指的是会进行两次判空操作：</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ourInstance</span> == null</span><br></pre></td></tr></table></figure>\n<p>一次在同步锁外，一次在同步锁内。<br>有的看官就有疑问了：两次判空？<br>首先是<code>synchronized</code>关键字，我们删除了方法的同步锁，将其移动到了方法内部，对</p>\n  <figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ourInstance = <span class=\"keyword\">new</span> <span class=\"type\"></span>同步锁的懒汉式()</span><br></pre></td></tr></table></figure>\n<p>单独加锁。这就代表着我们这个方法本身已经不是线程安全了，会有多个线程同时访问外层的<strong>if</strong>。如果同步锁内部没有判空，就会有多个线程等待对象创建，就会生成多个实例对象。<br>所以<strong>双重校验锁</strong>的每一步都非常关键，必不可少。<br><strong>双重校验锁</strong>的写法主要是为了在多线程创建对象时，用同步锁来保证对象的唯一。当对象创建完成后，同步锁外层的判空操作就不成立了，那么会直接返回对象，整个方法就与同步锁无关，多线程访问时也就不需要等待了。<br><strong>双重校验锁</strong>懒汉式，看起来已经非常完美了！<br>但是，很遗憾。<br>因为JVM存在<strong>指令重排</strong>的优化，又会产生新的问题。<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/heirenwenhao_2.jpg\" alt=\"\"><br><strong>指令重排</strong>是JVM为了提高程序运行效率。<br>JVM规范规定，<strong>指令重排序可以在不影响单线程程序执行结果的情况下改变代码执行顺序</strong>。<br>该处会产生<strong>指令重排</strong>的代码是</p>\n <figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">ourInstance</span> = new 同步锁的懒汉式()<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>这句代码在JVM看来，主要是做了以下三件事情：<br>（1）给<code>ourInstance</code>分配内存；<br>（2）调用构造方法创建对象，对对象进行初始化；<br>（3）将<code>ourInstance</code>对象指向JVM分配的内存空间（此步完成之后，<code>ourInstance</code>就是非null了）。<br>因为JVM存在<strong>指令重排</strong>，所以在不影响最终结果的情况下，JVM会选择性能最优的的顺序执行：<br>也就是说，上面三件事情，执行的顺序可能是1-2-3，也有可能是1-3-2。<br>1-2-3，1-3-2，有区别吗？<br>在结果上来看，没有任何区别。<br>但是在多线程的情况下，是有风险的：<br>假设线程x的执行顺序是1-3-2，当3执行完成时，<code>ourInstance</code>就已经不为空了，但是2还没有执行完成时，线程y介入了。此时线程y会发现<code>ourInstance</code>已经不为null了，但是其实<code>ourInstance</code>的初始化工作并未完成，这样很明显就会产生异常。<br>解决方法也非常简单，利用<code>volatile</code>关键字即可：</p>\n <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> 完美的懒汉式 &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//全项目唯一的对象</span></span><br><span class=\"line\">    <span class=\"comment\">//volatile关键字，禁止指令重排</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span>  <span class=\"keyword\">static</span> 完美的懒汉式 ourInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造方法私有化</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> 完美的懒汉式() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过静态方法来返回对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> 完美的懒汉式 getInstance() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//在调用该方法时进行判空，在对象为null时创建对象</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ourInstance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">new</span> Object()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ourInstance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    ourInstance = <span class=\"keyword\">new</span> 完美的懒汉式();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ourInstance;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码就是一个完美的懒汉式了，利用<code>volatile</code>关键字来禁止JVM的<strong>指令重排</strong>。</p>\n</li>\n<li><p>枚举（Enum）</p>\n <figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> public <span class=\"class\"><span class=\"keyword\">enum</span> 枚举单例 &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public String getUrl()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"http://www.baidu.com\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用起来也非常简单：</p>\n <figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">String url</span> = 枚举单例.INSTANCE.getUrl();</span><br></pre></td></tr></table></figure>\n<p>简直完美啊！简单易用，代码清晰！<br>但是，很少有人选择用枚举单例。<br>可能。。。。。？</p>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>简单回顾一下：<br>单例模式是保证了一个类在一个项目中有且只有一个实例对象。<br>这样做的目的是为了节省内存的开支。<br>单例模式的写法主要有：</p>\n<ul>\n<li><strong>项目初始化时就创建好的饿汉式</strong></li>\n<li><strong>在第一次使用时才进行创建、但要注意线程安全的懒汉式</strong></li>\n<li><strong>使用非常简单的枚举</strong><br>##<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><a href=\"http://wuchong.me/blog/2014/08/28/how-to-correctly-write-singleton-pattern/\" target=\"_blank\" rel=\"noopener\">Jark’s Blog-如何正确地写出单例模式\n</a><br>《Android源码设计模式解析与实战》 何红辉、关爱民 著</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"模式介绍\"><a href=\"#模式介绍\" class=\"headerlink\" title=\"模式介绍\"></a>模式介绍</h2><p>单例模式是应用最广泛的模式之一。<br>单例模式是为了确保一个类在整个项目中只有一个实例对象。<br><strong>单例模式最大的优势就是可以避免资源的浪费</strong>。<br>比如访问IO和数据库等资源时就应考虑使用单例模式。</p>\n<h2 id=\"模式特点\"><a href=\"#模式特点\" class=\"headerlink\" title=\"模式特点\"></a>模式特点</h2><ol>\n<li>构造方法私有化，使用<code>private</code>来修饰；</li>\n<li>确保对象有且只有一个，尤其是在多线程的环境下；</li>\n<li>通过静态方法或枚举返回已经实例化好的对象。</li>\n</ol>\n<h2 id=\"模式示例\"><a href=\"#模式示例\" class=\"headerlink\" title=\"模式示例\"></a>模式示例</h2><p>实现单例模式的方式有很多，不过核心是不变的，都要严格遵循单例模式的特点。<br>下面我们来介绍实现单例的方式：</p>\n<ol>\n<li><p>饿汉式</p>\n <figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> 饿汉式 </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//自行实例化对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> 饿汉式 ourInstance = <span class=\"keyword\">new</span> 饿汉式();</span><br><span class=\"line\">    <span class=\"comment\">//通过静态方法返回对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> 饿汉式 getInstance() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ourInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//构造方法私有化，不能通过new来创建对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> 饿汉式() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>值得一提的是，AndroidStudio在创建类时指定该类为单例的时候，默认就是使用饿汉式：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/design_single_01.png\" alt=\"\"><br>饿汉式写起来非常简单、快捷，但是缺点也显而易见：<br>在类初始化的时候，对象就已经创建好了。<br>如果说我们没有用到该类，就会造成资源的浪费。</p>\n</li>\n<li><p>懒汉式</p>\n <figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> 最简单的懒汉式 </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//全项目唯一的对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> 最简单的懒汉式 ourInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造方法私有化</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> 最简单的懒汉式() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过静态方法来返回对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> 最简单的懒汉式 getInstance() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//在调用该方法时进行判空，在对象为null时创建对象</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ourInstance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            ourInstance = <span class=\"keyword\">new</span> <span class=\"type\"></span>最简单的懒汉式();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ourInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这就是单例中懒汉式的最基本写法。<br>比起饿汉式，最大的优势就是不会造成资源的浪费。因为只有在用到时，才会进行对象的实例化。<br>但是就上面的写法而言，还存在一个很致命的问题：<br><strong>在多线程同时调用时，会出现多个实例对象的情况</strong>。<br><a href=\"https://github.com/YuanTiger/Design-Pattern\" target=\"_blank\" rel=\"noopener\">Demo</a>里有对应的测试代码，出现的概率很小，但是确实会出现。<br>解决这个问题的方式也很简单，为静态方法添加同步锁：</p>\n <figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过静态方法来返回对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> 同步锁的懒汉式 getInstance() &#123;</span><br><span class=\"line\">     <span class=\"comment\">//在调用该方法时进行判空，在对象为null时创建对象</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ourInstance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            ourInstance = <span class=\"keyword\">new</span> 同步锁的懒汉式();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> ourInstance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>synchronized</code>就是同步锁的关键字，加上该关键字，代表着该方法同时只能在唯一的一个线程中运行。<br>比如当10个线程去调用<code>同步锁的懒汉式.getInstance()</code>时，只有当第1个线程完成访问时，第2个线程才会开始执行该方法。当第1个线程访问完成后，单例对象就已经创建完成，所以第2个线程就会直接返回该对象，不会再去创建，这就保证了线程安全。<br>这样确实解决了我们所说的线程安全的问题，但是这种做法明显是低效率的：<br>我们的目的是保证项目中有且只有一个对象，上述代码确实实现了这个目的。但是当对象创建成功后，我们希望多线程访问的时候应该是异步高效、同时执行的的，而不是像上面那样队列式的，我要等你用完我才能用。所以就有了<strong>双重校验锁</strong>的懒汉式：</p>\n <figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> 同步锁的懒汉式 getInstance() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ourInstance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        synchronized (<span class=\"keyword\">new</span> <span class=\"type\">Object</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ourInstance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                ourInstance = <span class=\"keyword\">new</span> <span class=\"type\"></span>同步锁的懒汉式()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ourInstance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种写法可以完美解决多线程效率低下的问题，那么到底是如何解决的？<br><strong>双重校验锁</strong>指的是会进行两次判空操作：</p>\n <figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">ourInstance</span> == null</span><br></pre></td></tr></table></figure>\n<p>一次在同步锁外，一次在同步锁内。<br>有的看官就有疑问了：两次判空？<br>首先是<code>synchronized</code>关键字，我们删除了方法的同步锁，将其移动到了方法内部，对</p>\n  <figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ourInstance = <span class=\"keyword\">new</span> <span class=\"type\"></span>同步锁的懒汉式()</span><br></pre></td></tr></table></figure>\n<p>单独加锁。这就代表着我们这个方法本身已经不是线程安全了，会有多个线程同时访问外层的<strong>if</strong>。如果同步锁内部没有判空，就会有多个线程等待对象创建，就会生成多个实例对象。<br>所以<strong>双重校验锁</strong>的每一步都非常关键，必不可少。<br><strong>双重校验锁</strong>的写法主要是为了在多线程创建对象时，用同步锁来保证对象的唯一。当对象创建完成后，同步锁外层的判空操作就不成立了，那么会直接返回对象，整个方法就与同步锁无关，多线程访问时也就不需要等待了。<br><strong>双重校验锁</strong>懒汉式，看起来已经非常完美了！<br>但是，很遗憾。<br>因为JVM存在<strong>指令重排</strong>的优化，又会产生新的问题。<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/heirenwenhao_2.jpg\" alt=\"\"><br><strong>指令重排</strong>是JVM为了提高程序运行效率。<br>JVM规范规定，<strong>指令重排序可以在不影响单线程程序执行结果的情况下改变代码执行顺序</strong>。<br>该处会产生<strong>指令重排</strong>的代码是</p>\n <figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">ourInstance</span> = new 同步锁的懒汉式()<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>这句代码在JVM看来，主要是做了以下三件事情：<br>（1）给<code>ourInstance</code>分配内存；<br>（2）调用构造方法创建对象，对对象进行初始化；<br>（3）将<code>ourInstance</code>对象指向JVM分配的内存空间（此步完成之后，<code>ourInstance</code>就是非null了）。<br>因为JVM存在<strong>指令重排</strong>，所以在不影响最终结果的情况下，JVM会选择性能最优的的顺序执行：<br>也就是说，上面三件事情，执行的顺序可能是1-2-3，也有可能是1-3-2。<br>1-2-3，1-3-2，有区别吗？<br>在结果上来看，没有任何区别。<br>但是在多线程的情况下，是有风险的：<br>假设线程x的执行顺序是1-3-2，当3执行完成时，<code>ourInstance</code>就已经不为空了，但是2还没有执行完成时，线程y介入了。此时线程y会发现<code>ourInstance</code>已经不为null了，但是其实<code>ourInstance</code>的初始化工作并未完成，这样很明显就会产生异常。<br>解决方法也非常简单，利用<code>volatile</code>关键字即可：</p>\n <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> 完美的懒汉式 &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//全项目唯一的对象</span></span><br><span class=\"line\">    <span class=\"comment\">//volatile关键字，禁止指令重排</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span>  <span class=\"keyword\">static</span> 完美的懒汉式 ourInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造方法私有化</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> 完美的懒汉式() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过静态方法来返回对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> 完美的懒汉式 getInstance() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//在调用该方法时进行判空，在对象为null时创建对象</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ourInstance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">new</span> Object()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ourInstance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    ourInstance = <span class=\"keyword\">new</span> 完美的懒汉式();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ourInstance;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码就是一个完美的懒汉式了，利用<code>volatile</code>关键字来禁止JVM的<strong>指令重排</strong>。</p>\n</li>\n<li><p>枚举（Enum）</p>\n <figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> public <span class=\"class\"><span class=\"keyword\">enum</span> 枚举单例 &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public String getUrl()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"http://www.baidu.com\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用起来也非常简单：</p>\n <figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">String url</span> = 枚举单例.INSTANCE.getUrl();</span><br></pre></td></tr></table></figure>\n<p>简直完美啊！简单易用，代码清晰！<br>但是，很少有人选择用枚举单例。<br>可能。。。。。？</p>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>简单回顾一下：<br>单例模式是保证了一个类在一个项目中有且只有一个实例对象。<br>这样做的目的是为了节省内存的开支。<br>单例模式的写法主要有：</p>\n<ul>\n<li><strong>项目初始化时就创建好的饿汉式</strong></li>\n<li><strong>在第一次使用时才进行创建、但要注意线程安全的懒汉式</strong></li>\n<li><strong>使用非常简单的枚举</strong><br>##<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><a href=\"http://wuchong.me/blog/2014/08/28/how-to-correctly-write-singleton-pattern/\" target=\"_blank\" rel=\"noopener\">Jark’s Blog-如何正确地写出单例模式\n</a><br>《Android源码设计模式解析与实战》 何红辉、关爱民 著</li>\n</ul>\n"},{"title":"随时灵活变化-状态模式","date":"2017-11-14T08:39:52.000Z","_content":"## 模式介绍 ##\n**状态模式**的结构和[策略模式](http://www.jianshu.com/p/5c1f67bc2d66)几乎一模一样。\n\n但是它们两者的目的、本质却完全不同。\n\n[策略模式](http://www.jianshu.com/p/5c1f67bc2d66)的行为是彼此独立，相互替换的。回想之前举的价格计算器，我们出行时想使用地铁，则使用地铁的价格计算器，如果使用出租车，则使用出租车的价格计算器......\n\n而**状态模式**的行为则是平行的，不可替换的。**状态模式**更像是被封装在对象内部的一个东西，当对象的状态发生变化时，其行为也要发生变化。\n\n## 使用场景 ##\n- 一个对象的行为需要根据状态发生变化，尤其是在运行时状态发生变化，行为需要跟着一起变化时；\n- 代码中有大量判断语句(if、switch)，且这些语句依赖该对象的状态。\n\n## 模式角色 ##\n- State：状态接口，定义所有行为的抽象。\n- ConcreteStateA、ConcreteStateB：某个状态的具体行为实现，一个状态对应一个具体行为实现。\n\n## 模式示例 ##\n相信大家在开发中，只要是动态App(和服务器有交互)，都会有登录的需求。\n\n针对这个需求，我们可以得出两个状态：登录状态、未登录状态。\n\n接着我们可以想象一些行为：\n- 登录\n- 退出登录\n- 查看账户金币\n- 赚取金币\n- 金币兑换道具\n\n针对上述行为，在登录状态和未登录状态下，所做的事情是完全不同的：\n1. 登录状态：\n   - 登录：提示用户已经登录过了，请勿重复登录\n   - 退出登录：清除用户缓存并提示用户退出登录成功\n   - 查看账户金币：从服务器查询用户余额\n   - 赚取金币：跳转到赚金币页面\n   - 金币兑换道具：跳转到兑换道具页\n2. 未登录状态：\n   - 登录：判断用户输入的账号密码，正确提示用户登录成功。\n   - 退出登录：提示用户已经退出过了。\n   - 查看账户金币：提示用户请先登录\n   - 赚取金币：跳转到赚金币页(这里也可以提示用户登录，具体看产品定的登录时机)\n   - 金币兑换道具：提示用户请先登录\n\n想必看完这个示例，大家已经对**状态模式**有了一些自己的见解。\n\n这种情况下，非常适合使用**状态模式**。\n\n如果项目中，还是通过判断语句来进行状态的区分，就说明这个项目没有很好地应用**状态模式**。\n\n下面我们就来将上述案例转化成代码。\n\n首先是状态行为的抽象，该抽象包含了所有的行为：\n```\npublic interface UserState {\n\n    //登录\n    void login();\n\n    //登出\n    void logout();\n\n    //查询余额\n    void seeMoney();\n\n    //赚金币\n    void earnMoney();\n\n    //兑换道具\n    void exchange();\n}\n\n```\n针对我们上面描述的示例，有以上5种行为，我们将其进行了抽象。\n\n接着来思考行为的具体实现：登录状态的具体实现、未登录状态的具体实现。\n\n具体做起来也很简单，就是创建两个类去实现我们的行为抽象，在各自的实现下，去实现该状态下，应该做的事情。\n\n首先来看登录状态：\n```\npublic class LoginStateImpl implements UserState {\n    @Override\n    public void login() {\n        Toast.makeText(App.context, \"您已经登录了，无需登录！\", Toast.LENGTH_SHORT).show();\n    }\n\n    @Override\n    public void logout() {\n\n        Toast.makeText(App.context, \"退出登录成功！\", Toast.LENGTH_SHORT).show();\n    }\n\n    @Override\n    public void seeMoney() {\n        Toast.makeText(App.context, \"您目前有100金币\", Toast.LENGTH_SHORT).show();\n    }\n\n    @Override\n    public void earnMoney() {\n        Toast.makeText(App.context, \"跳转到-赚金币\", Toast.LENGTH_SHORT).show();\n    }\n\n    @Override\n    public void exchange() {\n        Toast.makeText(App.context, \"跳转到-兑换道具\", Toast.LENGTH_SHORT).show();\n    }\n}\n```\n根据示例需求，我实现了登录状态下，这5种行为的具体实现。\n\n未登录状态也是同理，这里就不列举代码了，可以直接查看[GitHub](https://github.com/YuanTiger/Design-Pattern)。\n\n接下来我们来看一下测试代码：\n```\n//默认是未登录状态\nprivate UserState userState = new LogutStateImpl();\n\n@Override\npublic void onClick(View view) {\n    switch (view.getId()) {\n        case R.id.bt_login://登录行为\n            userState.login();\n            //核心：更换用户状态\n            userState = new LoginStateImpl();\n            break;\n        case R.id.bt_logout://退出登录行为\n            userState.logout();\n            userState = new LogutStateImpl();\n            break;\n        case R.id.bt_see_money://查看余额行为\n            userState.seeMoney();\n            break;\n        case R.id.bt_earn_money://赚取金币行为\n            userState.earnMoney();\n            break;\n        case R.id.bt_exchange://兑换行为\n            userState.exchange();\n            break;\n    }\n}\n```\n这里也是利用多态的特性，根据状态的变化，注入不同的实现。\n\n至此，我们已经使用**状态模式**成功实现了上述需求，并且去除了重复、杂乱的判断语句，体现出了**状态模式**的精髓。\n\n## 总结 ##\n代码已经上传至[GitHub](https://github.com/YuanTiger/Design-Pattern)，可以下载查阅。\n\n其实看到这里，各位看官想必已经了解了状态模式。\n\n**状态模式**的关键点在于：不同状态下、同一行为的不同响应。\n\n**状态模式**是为了优化代码结构而产生的。我们通过if-else其实可以完美判断用户的登录状态，但是这种实现使得逻辑与具体行为耦合在一起，后期难以维护。\n\n**状态模式**就是为了消除这种丑态，实现逻辑与行为的解耦。\n\n当然并不是所有的if-else都适合使用**状态模式**，具体是否使用，还是由你来决定。\n","source":"_posts/Design-State.md","raw":"---\ntitle: 随时灵活变化-状态模式\ndate: 2017-11-14 16:39:52\ntags:\n   - 编程思想\n---\n## 模式介绍 ##\n**状态模式**的结构和[策略模式](http://www.jianshu.com/p/5c1f67bc2d66)几乎一模一样。\n\n但是它们两者的目的、本质却完全不同。\n\n[策略模式](http://www.jianshu.com/p/5c1f67bc2d66)的行为是彼此独立，相互替换的。回想之前举的价格计算器，我们出行时想使用地铁，则使用地铁的价格计算器，如果使用出租车，则使用出租车的价格计算器......\n\n而**状态模式**的行为则是平行的，不可替换的。**状态模式**更像是被封装在对象内部的一个东西，当对象的状态发生变化时，其行为也要发生变化。\n\n## 使用场景 ##\n- 一个对象的行为需要根据状态发生变化，尤其是在运行时状态发生变化，行为需要跟着一起变化时；\n- 代码中有大量判断语句(if、switch)，且这些语句依赖该对象的状态。\n\n## 模式角色 ##\n- State：状态接口，定义所有行为的抽象。\n- ConcreteStateA、ConcreteStateB：某个状态的具体行为实现，一个状态对应一个具体行为实现。\n\n## 模式示例 ##\n相信大家在开发中，只要是动态App(和服务器有交互)，都会有登录的需求。\n\n针对这个需求，我们可以得出两个状态：登录状态、未登录状态。\n\n接着我们可以想象一些行为：\n- 登录\n- 退出登录\n- 查看账户金币\n- 赚取金币\n- 金币兑换道具\n\n针对上述行为，在登录状态和未登录状态下，所做的事情是完全不同的：\n1. 登录状态：\n   - 登录：提示用户已经登录过了，请勿重复登录\n   - 退出登录：清除用户缓存并提示用户退出登录成功\n   - 查看账户金币：从服务器查询用户余额\n   - 赚取金币：跳转到赚金币页面\n   - 金币兑换道具：跳转到兑换道具页\n2. 未登录状态：\n   - 登录：判断用户输入的账号密码，正确提示用户登录成功。\n   - 退出登录：提示用户已经退出过了。\n   - 查看账户金币：提示用户请先登录\n   - 赚取金币：跳转到赚金币页(这里也可以提示用户登录，具体看产品定的登录时机)\n   - 金币兑换道具：提示用户请先登录\n\n想必看完这个示例，大家已经对**状态模式**有了一些自己的见解。\n\n这种情况下，非常适合使用**状态模式**。\n\n如果项目中，还是通过判断语句来进行状态的区分，就说明这个项目没有很好地应用**状态模式**。\n\n下面我们就来将上述案例转化成代码。\n\n首先是状态行为的抽象，该抽象包含了所有的行为：\n```\npublic interface UserState {\n\n    //登录\n    void login();\n\n    //登出\n    void logout();\n\n    //查询余额\n    void seeMoney();\n\n    //赚金币\n    void earnMoney();\n\n    //兑换道具\n    void exchange();\n}\n\n```\n针对我们上面描述的示例，有以上5种行为，我们将其进行了抽象。\n\n接着来思考行为的具体实现：登录状态的具体实现、未登录状态的具体实现。\n\n具体做起来也很简单，就是创建两个类去实现我们的行为抽象，在各自的实现下，去实现该状态下，应该做的事情。\n\n首先来看登录状态：\n```\npublic class LoginStateImpl implements UserState {\n    @Override\n    public void login() {\n        Toast.makeText(App.context, \"您已经登录了，无需登录！\", Toast.LENGTH_SHORT).show();\n    }\n\n    @Override\n    public void logout() {\n\n        Toast.makeText(App.context, \"退出登录成功！\", Toast.LENGTH_SHORT).show();\n    }\n\n    @Override\n    public void seeMoney() {\n        Toast.makeText(App.context, \"您目前有100金币\", Toast.LENGTH_SHORT).show();\n    }\n\n    @Override\n    public void earnMoney() {\n        Toast.makeText(App.context, \"跳转到-赚金币\", Toast.LENGTH_SHORT).show();\n    }\n\n    @Override\n    public void exchange() {\n        Toast.makeText(App.context, \"跳转到-兑换道具\", Toast.LENGTH_SHORT).show();\n    }\n}\n```\n根据示例需求，我实现了登录状态下，这5种行为的具体实现。\n\n未登录状态也是同理，这里就不列举代码了，可以直接查看[GitHub](https://github.com/YuanTiger/Design-Pattern)。\n\n接下来我们来看一下测试代码：\n```\n//默认是未登录状态\nprivate UserState userState = new LogutStateImpl();\n\n@Override\npublic void onClick(View view) {\n    switch (view.getId()) {\n        case R.id.bt_login://登录行为\n            userState.login();\n            //核心：更换用户状态\n            userState = new LoginStateImpl();\n            break;\n        case R.id.bt_logout://退出登录行为\n            userState.logout();\n            userState = new LogutStateImpl();\n            break;\n        case R.id.bt_see_money://查看余额行为\n            userState.seeMoney();\n            break;\n        case R.id.bt_earn_money://赚取金币行为\n            userState.earnMoney();\n            break;\n        case R.id.bt_exchange://兑换行为\n            userState.exchange();\n            break;\n    }\n}\n```\n这里也是利用多态的特性，根据状态的变化，注入不同的实现。\n\n至此，我们已经使用**状态模式**成功实现了上述需求，并且去除了重复、杂乱的判断语句，体现出了**状态模式**的精髓。\n\n## 总结 ##\n代码已经上传至[GitHub](https://github.com/YuanTiger/Design-Pattern)，可以下载查阅。\n\n其实看到这里，各位看官想必已经了解了状态模式。\n\n**状态模式**的关键点在于：不同状态下、同一行为的不同响应。\n\n**状态模式**是为了优化代码结构而产生的。我们通过if-else其实可以完美判断用户的登录状态，但是这种实现使得逻辑与具体行为耦合在一起，后期难以维护。\n\n**状态模式**就是为了消除这种丑态，实现逻辑与行为的解耦。\n\n当然并不是所有的if-else都适合使用**状态模式**，具体是否使用，还是由你来决定。\n","slug":"Design-State","published":1,"updated":"2018-08-24T09:36:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7sxdwl000rhnnfar9r8yga","content":"<h2 id=\"模式介绍\"><a href=\"#模式介绍\" class=\"headerlink\" title=\"模式介绍\"></a>模式介绍</h2><p><strong>状态模式</strong>的结构和<a href=\"http://www.jianshu.com/p/5c1f67bc2d66\" target=\"_blank\" rel=\"noopener\">策略模式</a>几乎一模一样。</p>\n<p>但是它们两者的目的、本质却完全不同。</p>\n<p><a href=\"http://www.jianshu.com/p/5c1f67bc2d66\" target=\"_blank\" rel=\"noopener\">策略模式</a>的行为是彼此独立，相互替换的。回想之前举的价格计算器，我们出行时想使用地铁，则使用地铁的价格计算器，如果使用出租车，则使用出租车的价格计算器……</p>\n<p>而<strong>状态模式</strong>的行为则是平行的，不可替换的。<strong>状态模式</strong>更像是被封装在对象内部的一个东西，当对象的状态发生变化时，其行为也要发生变化。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ul>\n<li>一个对象的行为需要根据状态发生变化，尤其是在运行时状态发生变化，行为需要跟着一起变化时；</li>\n<li>代码中有大量判断语句(if、switch)，且这些语句依赖该对象的状态。</li>\n</ul>\n<h2 id=\"模式角色\"><a href=\"#模式角色\" class=\"headerlink\" title=\"模式角色\"></a>模式角色</h2><ul>\n<li>State：状态接口，定义所有行为的抽象。</li>\n<li>ConcreteStateA、ConcreteStateB：某个状态的具体行为实现，一个状态对应一个具体行为实现。</li>\n</ul>\n<h2 id=\"模式示例\"><a href=\"#模式示例\" class=\"headerlink\" title=\"模式示例\"></a>模式示例</h2><p>相信大家在开发中，只要是动态App(和服务器有交互)，都会有登录的需求。</p>\n<p>针对这个需求，我们可以得出两个状态：登录状态、未登录状态。</p>\n<p>接着我们可以想象一些行为：</p>\n<ul>\n<li>登录</li>\n<li>退出登录</li>\n<li>查看账户金币</li>\n<li>赚取金币</li>\n<li>金币兑换道具</li>\n</ul>\n<p>针对上述行为，在登录状态和未登录状态下，所做的事情是完全不同的：</p>\n<ol>\n<li>登录状态：<ul>\n<li>登录：提示用户已经登录过了，请勿重复登录</li>\n<li>退出登录：清除用户缓存并提示用户退出登录成功</li>\n<li>查看账户金币：从服务器查询用户余额</li>\n<li>赚取金币：跳转到赚金币页面</li>\n<li>金币兑换道具：跳转到兑换道具页</li>\n</ul>\n</li>\n<li>未登录状态：<ul>\n<li>登录：判断用户输入的账号密码，正确提示用户登录成功。</li>\n<li>退出登录：提示用户已经退出过了。</li>\n<li>查看账户金币：提示用户请先登录</li>\n<li>赚取金币：跳转到赚金币页(这里也可以提示用户登录，具体看产品定的登录时机)</li>\n<li>金币兑换道具：提示用户请先登录</li>\n</ul>\n</li>\n</ol>\n<p>想必看完这个示例，大家已经对<strong>状态模式</strong>有了一些自己的见解。</p>\n<p>这种情况下，非常适合使用<strong>状态模式</strong>。</p>\n<p>如果项目中，还是通过判断语句来进行状态的区分，就说明这个项目没有很好地应用<strong>状态模式</strong>。</p>\n<p>下面我们就来将上述案例转化成代码。</p>\n<p>首先是状态行为的抽象，该抽象包含了所有的行为：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">UserState</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//登录</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">login</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//登出</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">logout</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查询余额</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">seeMoney</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//赚金币</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">earnMoney</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//兑换道具</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">exchange</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>针对我们上面描述的示例，有以上5种行为，我们将其进行了抽象。</p>\n<p>接着来思考行为的具体实现：登录状态的具体实现、未登录状态的具体实现。</p>\n<p>具体做起来也很简单，就是创建两个类去实现我们的行为抽象，在各自的实现下，去实现该状态下，应该做的事情。</p>\n<p>首先来看登录状态：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginStateImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(App.context, <span class=\"string\">\"您已经登录了，无需登录！\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Toast.makeText(App.context, <span class=\"string\">\"退出登录成功！\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">seeMoney</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(App.context, <span class=\"string\">\"您目前有100金币\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">earnMoney</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(App.context, <span class=\"string\">\"跳转到-赚金币\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(App.context, <span class=\"string\">\"跳转到-兑换道具\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据示例需求，我实现了登录状态下，这5种行为的具体实现。</p>\n<p>未登录状态也是同理，这里就不列举代码了，可以直接查看<a href=\"https://github.com/YuanTiger/Design-Pattern\" target=\"_blank\" rel=\"noopener\">GitHub</a>。</p>\n<p>接下来我们来看一下测试代码：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//默认是未登录状态</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> UserState userState = <span class=\"keyword\">new</span> LogutStateImpl();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> onClick(View view) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (view.getId()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> R.id.<span class=\"string\">bt_login:</span><span class=\"comment\">//登录行为</span></span><br><span class=\"line\">            userState.login();</span><br><span class=\"line\">            <span class=\"comment\">//核心：更换用户状态</span></span><br><span class=\"line\">            userState = <span class=\"keyword\">new</span> LoginStateImpl();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> R.id.<span class=\"string\">bt_logout:</span><span class=\"comment\">//退出登录行为</span></span><br><span class=\"line\">            userState.logout();</span><br><span class=\"line\">            userState = <span class=\"keyword\">new</span> LogutStateImpl();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> R.id.<span class=\"string\">bt_see_money:</span><span class=\"comment\">//查看余额行为</span></span><br><span class=\"line\">            userState.seeMoney();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> R.id.<span class=\"string\">bt_earn_money:</span><span class=\"comment\">//赚取金币行为</span></span><br><span class=\"line\">            userState.earnMoney();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> R.id.<span class=\"string\">bt_exchange:</span><span class=\"comment\">//兑换行为</span></span><br><span class=\"line\">            userState.exchange();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里也是利用多态的特性，根据状态的变化，注入不同的实现。</p>\n<p>至此，我们已经使用<strong>状态模式</strong>成功实现了上述需求，并且去除了重复、杂乱的判断语句，体现出了<strong>状态模式</strong>的精髓。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>代码已经上传至<a href=\"https://github.com/YuanTiger/Design-Pattern\" target=\"_blank\" rel=\"noopener\">GitHub</a>，可以下载查阅。</p>\n<p>其实看到这里，各位看官想必已经了解了状态模式。</p>\n<p><strong>状态模式</strong>的关键点在于：不同状态下、同一行为的不同响应。</p>\n<p><strong>状态模式</strong>是为了优化代码结构而产生的。我们通过if-else其实可以完美判断用户的登录状态，但是这种实现使得逻辑与具体行为耦合在一起，后期难以维护。</p>\n<p><strong>状态模式</strong>就是为了消除这种丑态，实现逻辑与行为的解耦。</p>\n<p>当然并不是所有的if-else都适合使用<strong>状态模式</strong>，具体是否使用，还是由你来决定。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"模式介绍\"><a href=\"#模式介绍\" class=\"headerlink\" title=\"模式介绍\"></a>模式介绍</h2><p><strong>状态模式</strong>的结构和<a href=\"http://www.jianshu.com/p/5c1f67bc2d66\" target=\"_blank\" rel=\"noopener\">策略模式</a>几乎一模一样。</p>\n<p>但是它们两者的目的、本质却完全不同。</p>\n<p><a href=\"http://www.jianshu.com/p/5c1f67bc2d66\" target=\"_blank\" rel=\"noopener\">策略模式</a>的行为是彼此独立，相互替换的。回想之前举的价格计算器，我们出行时想使用地铁，则使用地铁的价格计算器，如果使用出租车，则使用出租车的价格计算器……</p>\n<p>而<strong>状态模式</strong>的行为则是平行的，不可替换的。<strong>状态模式</strong>更像是被封装在对象内部的一个东西，当对象的状态发生变化时，其行为也要发生变化。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ul>\n<li>一个对象的行为需要根据状态发生变化，尤其是在运行时状态发生变化，行为需要跟着一起变化时；</li>\n<li>代码中有大量判断语句(if、switch)，且这些语句依赖该对象的状态。</li>\n</ul>\n<h2 id=\"模式角色\"><a href=\"#模式角色\" class=\"headerlink\" title=\"模式角色\"></a>模式角色</h2><ul>\n<li>State：状态接口，定义所有行为的抽象。</li>\n<li>ConcreteStateA、ConcreteStateB：某个状态的具体行为实现，一个状态对应一个具体行为实现。</li>\n</ul>\n<h2 id=\"模式示例\"><a href=\"#模式示例\" class=\"headerlink\" title=\"模式示例\"></a>模式示例</h2><p>相信大家在开发中，只要是动态App(和服务器有交互)，都会有登录的需求。</p>\n<p>针对这个需求，我们可以得出两个状态：登录状态、未登录状态。</p>\n<p>接着我们可以想象一些行为：</p>\n<ul>\n<li>登录</li>\n<li>退出登录</li>\n<li>查看账户金币</li>\n<li>赚取金币</li>\n<li>金币兑换道具</li>\n</ul>\n<p>针对上述行为，在登录状态和未登录状态下，所做的事情是完全不同的：</p>\n<ol>\n<li>登录状态：<ul>\n<li>登录：提示用户已经登录过了，请勿重复登录</li>\n<li>退出登录：清除用户缓存并提示用户退出登录成功</li>\n<li>查看账户金币：从服务器查询用户余额</li>\n<li>赚取金币：跳转到赚金币页面</li>\n<li>金币兑换道具：跳转到兑换道具页</li>\n</ul>\n</li>\n<li>未登录状态：<ul>\n<li>登录：判断用户输入的账号密码，正确提示用户登录成功。</li>\n<li>退出登录：提示用户已经退出过了。</li>\n<li>查看账户金币：提示用户请先登录</li>\n<li>赚取金币：跳转到赚金币页(这里也可以提示用户登录，具体看产品定的登录时机)</li>\n<li>金币兑换道具：提示用户请先登录</li>\n</ul>\n</li>\n</ol>\n<p>想必看完这个示例，大家已经对<strong>状态模式</strong>有了一些自己的见解。</p>\n<p>这种情况下，非常适合使用<strong>状态模式</strong>。</p>\n<p>如果项目中，还是通过判断语句来进行状态的区分，就说明这个项目没有很好地应用<strong>状态模式</strong>。</p>\n<p>下面我们就来将上述案例转化成代码。</p>\n<p>首先是状态行为的抽象，该抽象包含了所有的行为：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">UserState</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//登录</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">login</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//登出</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">logout</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查询余额</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">seeMoney</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//赚金币</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">earnMoney</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//兑换道具</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">exchange</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>针对我们上面描述的示例，有以上5种行为，我们将其进行了抽象。</p>\n<p>接着来思考行为的具体实现：登录状态的具体实现、未登录状态的具体实现。</p>\n<p>具体做起来也很简单，就是创建两个类去实现我们的行为抽象，在各自的实现下，去实现该状态下，应该做的事情。</p>\n<p>首先来看登录状态：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginStateImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(App.context, <span class=\"string\">\"您已经登录了，无需登录！\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">logout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Toast.makeText(App.context, <span class=\"string\">\"退出登录成功！\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">seeMoney</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(App.context, <span class=\"string\">\"您目前有100金币\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">earnMoney</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(App.context, <span class=\"string\">\"跳转到-赚金币\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exchange</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(App.context, <span class=\"string\">\"跳转到-兑换道具\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>根据示例需求，我实现了登录状态下，这5种行为的具体实现。</p>\n<p>未登录状态也是同理，这里就不列举代码了，可以直接查看<a href=\"https://github.com/YuanTiger/Design-Pattern\" target=\"_blank\" rel=\"noopener\">GitHub</a>。</p>\n<p>接下来我们来看一下测试代码：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//默认是未登录状态</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> UserState userState = <span class=\"keyword\">new</span> LogutStateImpl();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> onClick(View view) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (view.getId()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> R.id.<span class=\"string\">bt_login:</span><span class=\"comment\">//登录行为</span></span><br><span class=\"line\">            userState.login();</span><br><span class=\"line\">            <span class=\"comment\">//核心：更换用户状态</span></span><br><span class=\"line\">            userState = <span class=\"keyword\">new</span> LoginStateImpl();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> R.id.<span class=\"string\">bt_logout:</span><span class=\"comment\">//退出登录行为</span></span><br><span class=\"line\">            userState.logout();</span><br><span class=\"line\">            userState = <span class=\"keyword\">new</span> LogutStateImpl();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> R.id.<span class=\"string\">bt_see_money:</span><span class=\"comment\">//查看余额行为</span></span><br><span class=\"line\">            userState.seeMoney();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> R.id.<span class=\"string\">bt_earn_money:</span><span class=\"comment\">//赚取金币行为</span></span><br><span class=\"line\">            userState.earnMoney();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> R.id.<span class=\"string\">bt_exchange:</span><span class=\"comment\">//兑换行为</span></span><br><span class=\"line\">            userState.exchange();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里也是利用多态的特性，根据状态的变化，注入不同的实现。</p>\n<p>至此，我们已经使用<strong>状态模式</strong>成功实现了上述需求，并且去除了重复、杂乱的判断语句，体现出了<strong>状态模式</strong>的精髓。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>代码已经上传至<a href=\"https://github.com/YuanTiger/Design-Pattern\" target=\"_blank\" rel=\"noopener\">GitHub</a>，可以下载查阅。</p>\n<p>其实看到这里，各位看官想必已经了解了状态模式。</p>\n<p><strong>状态模式</strong>的关键点在于：不同状态下、同一行为的不同响应。</p>\n<p><strong>状态模式</strong>是为了优化代码结构而产生的。我们通过if-else其实可以完美判断用户的登录状态，但是这种实现使得逻辑与具体行为耦合在一起，后期难以维护。</p>\n<p><strong>状态模式</strong>就是为了消除这种丑态，实现逻辑与行为的解耦。</p>\n<p>当然并不是所有的if-else都适合使用<strong>状态模式</strong>，具体是否使用，还是由你来决定。</p>\n"},{"title":"实现动态替换-策略模式","date":"2017-08-02T09:15:00.000Z","_content":"## 模式介绍 ##\n通常，我们实现一个功能，可以有多种策略。\n\n我们可以根据实际需求来选择最合适的策略。\n\n针对这种情况，一种常规的方法就是将多种策略封装在一个类中，每个策略对应一个方法，在使用时通过if-else进行情况判断，不同情况调用不同方法来实现不同的策略。\n\n这种实现方法我们可以称之为硬编码。\n\n然而，当策略越来越多的时候，这个类就会变得臃肿，并且由于if-else等复杂逻辑的存在，在维护时会更容易产生错误，维护成本就会变高。\n\n并且这种写法明显违反了[面向对象](http://www.jianshu.com/p/2c5826aa996c)中的开闭原则。\n\n如果我们将这些策略的共同点抽象出来，提供一个统一的接口，不同的策略有着不同的实现，这样在客户端就可以通过注入不同的实现对象来实现动态替换。\n\n这种模式的可扩展性、可维护性都是极高的。这，就是我们要说的**策略模式**。\n\n\n## 模式定义 ##\n针对一个功能，将每一种解决方案封装起来，而且使它们可以相互替换。\n\n## 使用场景 ##\n- 针对同一类型问题的多种处理方式，仅仅是具体行为存在差异；\n- 需要安全地封装多种同一类型的操作时；\n- 同一抽象类有多个子类，同时又需要使用if-else或swithc-case来选择具体子类时。\n\n## 模式角色 ##\n- Strategy：策略抽象。\n- ConcreteStrategy：具体策略，针对一个问题，有多少种策略，就应有多少个具体策略。\n\n## 模式示例 ##\n2014年12月28日北京提高了公交、地铁的价格，不再是单一票价，而是分距离计价。\n\n我们就根据上述需求，来做一个出行价格计算器。\n\n话不多说，我们来实现这个功能：\n![测试UI](http://7xvzby.com1.z0.glb.clouddn.com/DesignModel/design_strategy_ui.png)\n简单做了计算器的UI，它应该提供具体出行方式的选择，很明显，我们提供了三种。\n\n并且有一个出行距离的输入框。\n\n在获取到出行方式和出行距离后，我们就可以来计算具体价格。\n\n需求很明确，接下来我们要做的就是先实现各种出行方式下的价格计算：\n```\npublic class PriceCaculateController {\n\n    /**\n     * 根据出行方式，选择距离的计算方法\n     */\n    public static float cacluatePrice(int km, int typeMode) {\n        switch (typeMode) {\n            case Constant.TYPE_BUS:\n                return caculateBusPrice(km);\n            case Constant.TYPE_SUBWAY:\n                return caculateSubwayPrice(km);\n            case Constant.TYPE_TAX:\n                return caculateTaxPrice(km);\n        }\n        return 0;\n    }\n\n    /**\n     * 计算出租车价格\n     * 小于3Km，定价9元，大于3km，每1km + 1元\n     *\n     */\n    private static float caculateTaxPrice(int km) {\n        if (km <= 0) {\n            return 0;\n        }\n        if (km <= 3) {\n            return 9;\n        }\n        return 9 + (km - 3);\n    }\n\n    /**\n     * 计算公交车价格\n     * 小于5Km，定价2元，小于10km，定价3元，其余4元\n     */\n    private static float caculateBusPrice(int km) {\n        if (km <= 0) {\n            return 0;\n        }\n        if (km <= 5) {\n            return 2;\n        }\n        if (km <= 10) {\n            return 3;\n        }\n        return 4;\n    }\n    /**\n     * 计算地铁价格\n     * 小于5Km，定价3元，小于10km，定价4元，小于15Km，定价5元，其余6元\n     */\n    private static float caculateSubwayPrice(int km) {\n        if (km <= 0) {\n            return 0;\n        }\n        if (km <= 5) {\n            return 3;\n        }\n        if (km <= 10) {\n            return 4;\n        }\n        if (km <= 15) {\n            return 5;\n        }\n        return 6;\n    }\n}\n```\n`PriceCaculateController`中包含了所有出行方式的计算细节。\n\n细心的同学可以发现，我将`PriceCaculateController`中的所有计算方法私有化，向外暴露了一个`cacluatePrice(int km, int typeMode)`方法。\n\n用户在使用时，仅需告诉我们出行距离与出行方式，我们就可以完全自动计算出价格，下面是使用的代码：\n```\nfloat price = PriceCaculateController.cacluatePrice(20,1);\n```\n这样我们就实现了页面与计算功能的完美解耦，页面完全不关心计算的细节。\n\n接下来我们在页面上添加基础判断之后，调用`PriceCaculateController.cacluatePrice `即可。\n\n我们可以来看看具体效果：\n![具体效果](http://7xvzby.com1.z0.glb.clouddn.com/DesignModel/design_strategy_gif_ui.gif)\n\n至此，我们的价格计算器已经开发完成了。\n\n很明显，我们的核心代码全在`PriceCaculateController`中。\n\n随着出行方式的增加、价格计算的优化，`PriceCaculateController`必定会变得臃肿不堪。\n\n为了将`PriceCaculateController`功能进行拆分，我们就要使用今天讲到的**策略模式**。\n\n让我们来回顾**策略模式**中的角色：\n\n**一个策略抽象以及多个具体策略**。\n\n接下来我们就将价格计算功能进行抽象：\n```\npublic interface StrategyCaculate {\n\n    /**\n     * 根据距离计算价格\n     */\n    float caculatePrice(int km);\n}\n```\n策略抽象非常简单。\n\n接下里我们来实现具体策略，有多少种出行方式，就应该有多少种具体策略：\n公共汽车(Bus):\n```\npublic class BusStrategyCaculate implements StrategyCaculate {\n    @Override\n    public float caculatePrice(int km) {\n        if (km <= 0) {\n            return 0;\n        }\n        if (km <= 5) {\n            return 2;\n        }\n        if (km <= 10) {\n            return 3;\n        }\n        return 4;\n    }\n}\n```\n出租车(Tax):\n```\npublic class TaxStrategyCaculate implements StrategyCaculate {\n    @Override\n    public float caculatePrice(int km) {\n        if (km <= 0) {\n            return 0;\n        }\n        if (km <= 3) {\n            return 9;\n        }\n        return 9 + (km - 3);\n    }\n}\n```\n地铁(Subway):\n```\npublic class SubwayStrategyCaculate implements StrategyCaculate {\n    @Override\n    public float caculatePrice(int km) {\n        if (km <= 0) {\n            return 0;\n        }\n        if (km <= 5) {\n            return 3;\n        }\n        if (km <= 10) {\n            return 4;\n        }\n        if (km <= 15) {\n            return 5;\n        }\n        return 6;\n    }\n}\n```\n三种出行方式对应三个具体策略。\n\n当有新的出行方式时，我们只需创建新的类去实现策略抽象即可。\n\n简单写一些测试代码：\n```\nStrategyCaculate caculate = null;\nswitch (typeMode) {\n    case Constant.TYPE_BUS:\n        caculate = new BusStrategyCaculate();\n        break;\n    case Constant.TYPE_SUBWAY:\n        caculate = new SubwayStrategyCaculate();\n        break;\n    case Constant.TYPE_TAX:\n        caculate = new TaxStrategyCaculate();\n        break;\n}\nassert caculate != null;\nreturn caculate.caculatePrice(km);\n```\n可以发现，这里我们又运用多态的特性，根据不同的出行方式，创建不同的子类，接着调用子类中的价格计算。\n\n最后的效果和之前的效果是一致的。\n\n[相关代码已经提交至GitHub](https://github.com/YuanTiger/Design-Pattern)。\n## 总结 ##\n有些人会有疑惑了，我们最开始的`PriceCaculateController`并不复杂，并且一个方法对应一种出行方式，清晰明了，为什么非要改成这个样子?\n\n对于这个问题，我们现在的出行方式仅仅有三种、并且价格计算的逻辑非常简单。\n\n如果现在继续添加出行方式：飞机、自驾、高铁、大巴等。\n\n如果优化出租车的价格计算逻辑：出租车3Km以内9元，之后每1Km加1元，燃气费2元，堵车服务费每分钟0.1元，夜晚11点之后价格提升，每个城市的价格不同等等。\n\n如果将上述逻辑全部写出，那么就出租车价格计算的逻辑，就要有上百行的代码。\n\n如果你们公司是一家专业的出行价格计算公司，这些计算细节、出行方式都必定要涵盖到。\n\n那么将来，`PriceCaculateController`的代码量，会有多大？\n\n如果我们运用了**策略模式**，项目的目录结构就变成了：\n![策略模式目录结构](http://7xvzby.com1.z0.glb.clouddn.com/DesignModel/design_strategy_rule.png)\n当某种交通工具的价格计算发生问题，我们仅仅去找对应的具体策略即可。并且避免产生了`PriceCaculateController`这种代码量庞大的类。\n\n**策略模式**很好地遵循了开闭原则，注入不同的具体策略，会有不同的效果，从而达到很好的扩展性。\n\n使用**策略模式**的优点有很多：\n- 结构清晰明了，使用简单；\n- 降低耦合度，扩展方便；\n- 封装彻底，数据更为安全。\n\n所以，在你能预见到某个功能会有扩展的需求时，并且使用场景符合**策略模式**的使用场景，还是强烈建议你使用**策略模式**的。\n\n## 感谢 ##\n\n《Android源码设计模式解析与实战》 何红辉、关爱民 著","source":"_posts/Design-Strategy.md","raw":"---\ntitle: 实现动态替换-策略模式\ndate: 2017-08-02 17:15:00\ntags:\n   - 编程思想\n---\n## 模式介绍 ##\n通常，我们实现一个功能，可以有多种策略。\n\n我们可以根据实际需求来选择最合适的策略。\n\n针对这种情况，一种常规的方法就是将多种策略封装在一个类中，每个策略对应一个方法，在使用时通过if-else进行情况判断，不同情况调用不同方法来实现不同的策略。\n\n这种实现方法我们可以称之为硬编码。\n\n然而，当策略越来越多的时候，这个类就会变得臃肿，并且由于if-else等复杂逻辑的存在，在维护时会更容易产生错误，维护成本就会变高。\n\n并且这种写法明显违反了[面向对象](http://www.jianshu.com/p/2c5826aa996c)中的开闭原则。\n\n如果我们将这些策略的共同点抽象出来，提供一个统一的接口，不同的策略有着不同的实现，这样在客户端就可以通过注入不同的实现对象来实现动态替换。\n\n这种模式的可扩展性、可维护性都是极高的。这，就是我们要说的**策略模式**。\n\n\n## 模式定义 ##\n针对一个功能，将每一种解决方案封装起来，而且使它们可以相互替换。\n\n## 使用场景 ##\n- 针对同一类型问题的多种处理方式，仅仅是具体行为存在差异；\n- 需要安全地封装多种同一类型的操作时；\n- 同一抽象类有多个子类，同时又需要使用if-else或swithc-case来选择具体子类时。\n\n## 模式角色 ##\n- Strategy：策略抽象。\n- ConcreteStrategy：具体策略，针对一个问题，有多少种策略，就应有多少个具体策略。\n\n## 模式示例 ##\n2014年12月28日北京提高了公交、地铁的价格，不再是单一票价，而是分距离计价。\n\n我们就根据上述需求，来做一个出行价格计算器。\n\n话不多说，我们来实现这个功能：\n![测试UI](http://7xvzby.com1.z0.glb.clouddn.com/DesignModel/design_strategy_ui.png)\n简单做了计算器的UI，它应该提供具体出行方式的选择，很明显，我们提供了三种。\n\n并且有一个出行距离的输入框。\n\n在获取到出行方式和出行距离后，我们就可以来计算具体价格。\n\n需求很明确，接下来我们要做的就是先实现各种出行方式下的价格计算：\n```\npublic class PriceCaculateController {\n\n    /**\n     * 根据出行方式，选择距离的计算方法\n     */\n    public static float cacluatePrice(int km, int typeMode) {\n        switch (typeMode) {\n            case Constant.TYPE_BUS:\n                return caculateBusPrice(km);\n            case Constant.TYPE_SUBWAY:\n                return caculateSubwayPrice(km);\n            case Constant.TYPE_TAX:\n                return caculateTaxPrice(km);\n        }\n        return 0;\n    }\n\n    /**\n     * 计算出租车价格\n     * 小于3Km，定价9元，大于3km，每1km + 1元\n     *\n     */\n    private static float caculateTaxPrice(int km) {\n        if (km <= 0) {\n            return 0;\n        }\n        if (km <= 3) {\n            return 9;\n        }\n        return 9 + (km - 3);\n    }\n\n    /**\n     * 计算公交车价格\n     * 小于5Km，定价2元，小于10km，定价3元，其余4元\n     */\n    private static float caculateBusPrice(int km) {\n        if (km <= 0) {\n            return 0;\n        }\n        if (km <= 5) {\n            return 2;\n        }\n        if (km <= 10) {\n            return 3;\n        }\n        return 4;\n    }\n    /**\n     * 计算地铁价格\n     * 小于5Km，定价3元，小于10km，定价4元，小于15Km，定价5元，其余6元\n     */\n    private static float caculateSubwayPrice(int km) {\n        if (km <= 0) {\n            return 0;\n        }\n        if (km <= 5) {\n            return 3;\n        }\n        if (km <= 10) {\n            return 4;\n        }\n        if (km <= 15) {\n            return 5;\n        }\n        return 6;\n    }\n}\n```\n`PriceCaculateController`中包含了所有出行方式的计算细节。\n\n细心的同学可以发现，我将`PriceCaculateController`中的所有计算方法私有化，向外暴露了一个`cacluatePrice(int km, int typeMode)`方法。\n\n用户在使用时，仅需告诉我们出行距离与出行方式，我们就可以完全自动计算出价格，下面是使用的代码：\n```\nfloat price = PriceCaculateController.cacluatePrice(20,1);\n```\n这样我们就实现了页面与计算功能的完美解耦，页面完全不关心计算的细节。\n\n接下来我们在页面上添加基础判断之后，调用`PriceCaculateController.cacluatePrice `即可。\n\n我们可以来看看具体效果：\n![具体效果](http://7xvzby.com1.z0.glb.clouddn.com/DesignModel/design_strategy_gif_ui.gif)\n\n至此，我们的价格计算器已经开发完成了。\n\n很明显，我们的核心代码全在`PriceCaculateController`中。\n\n随着出行方式的增加、价格计算的优化，`PriceCaculateController`必定会变得臃肿不堪。\n\n为了将`PriceCaculateController`功能进行拆分，我们就要使用今天讲到的**策略模式**。\n\n让我们来回顾**策略模式**中的角色：\n\n**一个策略抽象以及多个具体策略**。\n\n接下来我们就将价格计算功能进行抽象：\n```\npublic interface StrategyCaculate {\n\n    /**\n     * 根据距离计算价格\n     */\n    float caculatePrice(int km);\n}\n```\n策略抽象非常简单。\n\n接下里我们来实现具体策略，有多少种出行方式，就应该有多少种具体策略：\n公共汽车(Bus):\n```\npublic class BusStrategyCaculate implements StrategyCaculate {\n    @Override\n    public float caculatePrice(int km) {\n        if (km <= 0) {\n            return 0;\n        }\n        if (km <= 5) {\n            return 2;\n        }\n        if (km <= 10) {\n            return 3;\n        }\n        return 4;\n    }\n}\n```\n出租车(Tax):\n```\npublic class TaxStrategyCaculate implements StrategyCaculate {\n    @Override\n    public float caculatePrice(int km) {\n        if (km <= 0) {\n            return 0;\n        }\n        if (km <= 3) {\n            return 9;\n        }\n        return 9 + (km - 3);\n    }\n}\n```\n地铁(Subway):\n```\npublic class SubwayStrategyCaculate implements StrategyCaculate {\n    @Override\n    public float caculatePrice(int km) {\n        if (km <= 0) {\n            return 0;\n        }\n        if (km <= 5) {\n            return 3;\n        }\n        if (km <= 10) {\n            return 4;\n        }\n        if (km <= 15) {\n            return 5;\n        }\n        return 6;\n    }\n}\n```\n三种出行方式对应三个具体策略。\n\n当有新的出行方式时，我们只需创建新的类去实现策略抽象即可。\n\n简单写一些测试代码：\n```\nStrategyCaculate caculate = null;\nswitch (typeMode) {\n    case Constant.TYPE_BUS:\n        caculate = new BusStrategyCaculate();\n        break;\n    case Constant.TYPE_SUBWAY:\n        caculate = new SubwayStrategyCaculate();\n        break;\n    case Constant.TYPE_TAX:\n        caculate = new TaxStrategyCaculate();\n        break;\n}\nassert caculate != null;\nreturn caculate.caculatePrice(km);\n```\n可以发现，这里我们又运用多态的特性，根据不同的出行方式，创建不同的子类，接着调用子类中的价格计算。\n\n最后的效果和之前的效果是一致的。\n\n[相关代码已经提交至GitHub](https://github.com/YuanTiger/Design-Pattern)。\n## 总结 ##\n有些人会有疑惑了，我们最开始的`PriceCaculateController`并不复杂，并且一个方法对应一种出行方式，清晰明了，为什么非要改成这个样子?\n\n对于这个问题，我们现在的出行方式仅仅有三种、并且价格计算的逻辑非常简单。\n\n如果现在继续添加出行方式：飞机、自驾、高铁、大巴等。\n\n如果优化出租车的价格计算逻辑：出租车3Km以内9元，之后每1Km加1元，燃气费2元，堵车服务费每分钟0.1元，夜晚11点之后价格提升，每个城市的价格不同等等。\n\n如果将上述逻辑全部写出，那么就出租车价格计算的逻辑，就要有上百行的代码。\n\n如果你们公司是一家专业的出行价格计算公司，这些计算细节、出行方式都必定要涵盖到。\n\n那么将来，`PriceCaculateController`的代码量，会有多大？\n\n如果我们运用了**策略模式**，项目的目录结构就变成了：\n![策略模式目录结构](http://7xvzby.com1.z0.glb.clouddn.com/DesignModel/design_strategy_rule.png)\n当某种交通工具的价格计算发生问题，我们仅仅去找对应的具体策略即可。并且避免产生了`PriceCaculateController`这种代码量庞大的类。\n\n**策略模式**很好地遵循了开闭原则，注入不同的具体策略，会有不同的效果，从而达到很好的扩展性。\n\n使用**策略模式**的优点有很多：\n- 结构清晰明了，使用简单；\n- 降低耦合度，扩展方便；\n- 封装彻底，数据更为安全。\n\n所以，在你能预见到某个功能会有扩展的需求时，并且使用场景符合**策略模式**的使用场景，还是强烈建议你使用**策略模式**的。\n\n## 感谢 ##\n\n《Android源码设计模式解析与实战》 何红辉、关爱民 著","slug":"Design-Strategy","published":1,"updated":"2018-08-24T09:36:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7sxdwn000uhnnfjobck834","content":"<h2 id=\"模式介绍\"><a href=\"#模式介绍\" class=\"headerlink\" title=\"模式介绍\"></a>模式介绍</h2><p>通常，我们实现一个功能，可以有多种策略。</p>\n<p>我们可以根据实际需求来选择最合适的策略。</p>\n<p>针对这种情况，一种常规的方法就是将多种策略封装在一个类中，每个策略对应一个方法，在使用时通过if-else进行情况判断，不同情况调用不同方法来实现不同的策略。</p>\n<p>这种实现方法我们可以称之为硬编码。</p>\n<p>然而，当策略越来越多的时候，这个类就会变得臃肿，并且由于if-else等复杂逻辑的存在，在维护时会更容易产生错误，维护成本就会变高。</p>\n<p>并且这种写法明显违反了<a href=\"http://www.jianshu.com/p/2c5826aa996c\" target=\"_blank\" rel=\"noopener\">面向对象</a>中的开闭原则。</p>\n<p>如果我们将这些策略的共同点抽象出来，提供一个统一的接口，不同的策略有着不同的实现，这样在客户端就可以通过注入不同的实现对象来实现动态替换。</p>\n<p>这种模式的可扩展性、可维护性都是极高的。这，就是我们要说的<strong>策略模式</strong>。</p>\n<h2 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h2><p>针对一个功能，将每一种解决方案封装起来，而且使它们可以相互替换。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ul>\n<li>针对同一类型问题的多种处理方式，仅仅是具体行为存在差异；</li>\n<li>需要安全地封装多种同一类型的操作时；</li>\n<li>同一抽象类有多个子类，同时又需要使用if-else或swithc-case来选择具体子类时。</li>\n</ul>\n<h2 id=\"模式角色\"><a href=\"#模式角色\" class=\"headerlink\" title=\"模式角色\"></a>模式角色</h2><ul>\n<li>Strategy：策略抽象。</li>\n<li>ConcreteStrategy：具体策略，针对一个问题，有多少种策略，就应有多少个具体策略。</li>\n</ul>\n<h2 id=\"模式示例\"><a href=\"#模式示例\" class=\"headerlink\" title=\"模式示例\"></a>模式示例</h2><p>2014年12月28日北京提高了公交、地铁的价格，不再是单一票价，而是分距离计价。</p>\n<p>我们就根据上述需求，来做一个出行价格计算器。</p>\n<p>话不多说，我们来实现这个功能：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/DesignModel/design_strategy_ui.png\" alt=\"测试UI\"><br>简单做了计算器的UI，它应该提供具体出行方式的选择，很明显，我们提供了三种。</p>\n<p>并且有一个出行距离的输入框。</p>\n<p>在获取到出行方式和出行距离后，我们就可以来计算具体价格。</p>\n<p>需求很明确，接下来我们要做的就是先实现各种出行方式下的价格计算：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PriceCaculateController</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据出行方式，选择距离的计算方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> <span class=\"title\">cacluatePrice</span><span class=\"params\">(<span class=\"keyword\">int</span> km, <span class=\"keyword\">int</span> typeMode)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (typeMode) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> Constant.TYPE_BUS:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> caculateBusPrice(km);</span><br><span class=\"line\">            <span class=\"keyword\">case</span> Constant.TYPE_SUBWAY:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> caculateSubwayPrice(km);</span><br><span class=\"line\">            <span class=\"keyword\">case</span> Constant.TYPE_TAX:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> caculateTaxPrice(km);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算出租车价格</span></span><br><span class=\"line\"><span class=\"comment\">     * 小于3Km，定价9元，大于3km，每1km + 1元</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> <span class=\"title\">caculateTaxPrice</span><span class=\"params\">(<span class=\"keyword\">int</span> km)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">9</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">9</span> + (km - <span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算公交车价格</span></span><br><span class=\"line\"><span class=\"comment\">     * 小于5Km，定价2元，小于10km，定价3元，其余4元</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> <span class=\"title\">caculateBusPrice</span><span class=\"params\">(<span class=\"keyword\">int</span> km)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算地铁价格</span></span><br><span class=\"line\"><span class=\"comment\">     * 小于5Km，定价3元，小于10km，定价4元，小于15Km，定价5元，其余6元</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> <span class=\"title\">caculateSubwayPrice</span><span class=\"params\">(<span class=\"keyword\">int</span> km)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">15</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">6</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>PriceCaculateController</code>中包含了所有出行方式的计算细节。</p>\n<p>细心的同学可以发现，我将<code>PriceCaculateController</code>中的所有计算方法私有化，向外暴露了一个<code>cacluatePrice(int km, int typeMode)</code>方法。</p>\n<p>用户在使用时，仅需告诉我们出行距离与出行方式，我们就可以完全自动计算出价格，下面是使用的代码：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> price = PriceCaculateController.cacluatePrice(<span class=\"number\">20</span>,<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这样我们就实现了页面与计算功能的完美解耦，页面完全不关心计算的细节。</p>\n<p>接下来我们在页面上添加基础判断之后，调用<code>PriceCaculateController.cacluatePrice</code>即可。</p>\n<p>我们可以来看看具体效果：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/DesignModel/design_strategy_gif_ui.gif\" alt=\"具体效果\"></p>\n<p>至此，我们的价格计算器已经开发完成了。</p>\n<p>很明显，我们的核心代码全在<code>PriceCaculateController</code>中。</p>\n<p>随着出行方式的增加、价格计算的优化，<code>PriceCaculateController</code>必定会变得臃肿不堪。</p>\n<p>为了将<code>PriceCaculateController</code>功能进行拆分，我们就要使用今天讲到的<strong>策略模式</strong>。</p>\n<p>让我们来回顾<strong>策略模式</strong>中的角色：</p>\n<p><strong>一个策略抽象以及多个具体策略</strong>。</p>\n<p>接下来我们就将价格计算功能进行抽象：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">StrategyCaculate</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据距离计算价格</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">caculatePrice</span>(<span class=\"params\"><span class=\"keyword\">int</span> km</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>策略抽象非常简单。</p>\n<p>接下里我们来实现具体策略，有多少种出行方式，就应该有多少种具体策略：<br>公共汽车(Bus):<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BusStrategyCaculate</span> <span class=\"keyword\">implements</span> <span class=\"title\">StrategyCaculate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">caculatePrice</span><span class=\"params\">(<span class=\"keyword\">int</span> km)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>出租车(Tax):<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TaxStrategyCaculate</span> <span class=\"keyword\">implements</span> <span class=\"title\">StrategyCaculate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">caculatePrice</span><span class=\"params\">(<span class=\"keyword\">int</span> km)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">9</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">9</span> + (km - <span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>地铁(Subway):<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubwayStrategyCaculate</span> <span class=\"keyword\">implements</span> <span class=\"title\">StrategyCaculate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">caculatePrice</span><span class=\"params\">(<span class=\"keyword\">int</span> km)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">15</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">6</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>三种出行方式对应三个具体策略。</p>\n<p>当有新的出行方式时，我们只需创建新的类去实现策略抽象即可。</p>\n<p>简单写一些测试代码：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StrategyCaculate caculate = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (typeMode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> Constant.<span class=\"string\">TYPE_BUS:</span></span><br><span class=\"line\">        caculate = <span class=\"keyword\">new</span> BusStrategyCaculate();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> Constant.<span class=\"string\">TYPE_SUBWAY:</span></span><br><span class=\"line\">        caculate = <span class=\"keyword\">new</span> SubwayStrategyCaculate();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> Constant.<span class=\"string\">TYPE_TAX:</span></span><br><span class=\"line\">        caculate = <span class=\"keyword\">new</span> TaxStrategyCaculate();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">assert</span> caculate != <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> caculate.caculatePrice(km);</span><br></pre></td></tr></table></figure></p>\n<p>可以发现，这里我们又运用多态的特性，根据不同的出行方式，创建不同的子类，接着调用子类中的价格计算。</p>\n<p>最后的效果和之前的效果是一致的。</p>\n<p><a href=\"https://github.com/YuanTiger/Design-Pattern\" target=\"_blank\" rel=\"noopener\">相关代码已经提交至GitHub</a>。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>有些人会有疑惑了，我们最开始的<code>PriceCaculateController</code>并不复杂，并且一个方法对应一种出行方式，清晰明了，为什么非要改成这个样子?</p>\n<p>对于这个问题，我们现在的出行方式仅仅有三种、并且价格计算的逻辑非常简单。</p>\n<p>如果现在继续添加出行方式：飞机、自驾、高铁、大巴等。</p>\n<p>如果优化出租车的价格计算逻辑：出租车3Km以内9元，之后每1Km加1元，燃气费2元，堵车服务费每分钟0.1元，夜晚11点之后价格提升，每个城市的价格不同等等。</p>\n<p>如果将上述逻辑全部写出，那么就出租车价格计算的逻辑，就要有上百行的代码。</p>\n<p>如果你们公司是一家专业的出行价格计算公司，这些计算细节、出行方式都必定要涵盖到。</p>\n<p>那么将来，<code>PriceCaculateController</code>的代码量，会有多大？</p>\n<p>如果我们运用了<strong>策略模式</strong>，项目的目录结构就变成了：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/DesignModel/design_strategy_rule.png\" alt=\"策略模式目录结构\"><br>当某种交通工具的价格计算发生问题，我们仅仅去找对应的具体策略即可。并且避免产生了<code>PriceCaculateController</code>这种代码量庞大的类。</p>\n<p><strong>策略模式</strong>很好地遵循了开闭原则，注入不同的具体策略，会有不同的效果，从而达到很好的扩展性。</p>\n<p>使用<strong>策略模式</strong>的优点有很多：</p>\n<ul>\n<li>结构清晰明了，使用简单；</li>\n<li>降低耦合度，扩展方便；</li>\n<li>封装彻底，数据更为安全。</li>\n</ul>\n<p>所以，在你能预见到某个功能会有扩展的需求时，并且使用场景符合<strong>策略模式</strong>的使用场景，还是强烈建议你使用<strong>策略模式</strong>的。</p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p>《Android源码设计模式解析与实战》 何红辉、关爱民 著</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"模式介绍\"><a href=\"#模式介绍\" class=\"headerlink\" title=\"模式介绍\"></a>模式介绍</h2><p>通常，我们实现一个功能，可以有多种策略。</p>\n<p>我们可以根据实际需求来选择最合适的策略。</p>\n<p>针对这种情况，一种常规的方法就是将多种策略封装在一个类中，每个策略对应一个方法，在使用时通过if-else进行情况判断，不同情况调用不同方法来实现不同的策略。</p>\n<p>这种实现方法我们可以称之为硬编码。</p>\n<p>然而，当策略越来越多的时候，这个类就会变得臃肿，并且由于if-else等复杂逻辑的存在，在维护时会更容易产生错误，维护成本就会变高。</p>\n<p>并且这种写法明显违反了<a href=\"http://www.jianshu.com/p/2c5826aa996c\" target=\"_blank\" rel=\"noopener\">面向对象</a>中的开闭原则。</p>\n<p>如果我们将这些策略的共同点抽象出来，提供一个统一的接口，不同的策略有着不同的实现，这样在客户端就可以通过注入不同的实现对象来实现动态替换。</p>\n<p>这种模式的可扩展性、可维护性都是极高的。这，就是我们要说的<strong>策略模式</strong>。</p>\n<h2 id=\"模式定义\"><a href=\"#模式定义\" class=\"headerlink\" title=\"模式定义\"></a>模式定义</h2><p>针对一个功能，将每一种解决方案封装起来，而且使它们可以相互替换。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ul>\n<li>针对同一类型问题的多种处理方式，仅仅是具体行为存在差异；</li>\n<li>需要安全地封装多种同一类型的操作时；</li>\n<li>同一抽象类有多个子类，同时又需要使用if-else或swithc-case来选择具体子类时。</li>\n</ul>\n<h2 id=\"模式角色\"><a href=\"#模式角色\" class=\"headerlink\" title=\"模式角色\"></a>模式角色</h2><ul>\n<li>Strategy：策略抽象。</li>\n<li>ConcreteStrategy：具体策略，针对一个问题，有多少种策略，就应有多少个具体策略。</li>\n</ul>\n<h2 id=\"模式示例\"><a href=\"#模式示例\" class=\"headerlink\" title=\"模式示例\"></a>模式示例</h2><p>2014年12月28日北京提高了公交、地铁的价格，不再是单一票价，而是分距离计价。</p>\n<p>我们就根据上述需求，来做一个出行价格计算器。</p>\n<p>话不多说，我们来实现这个功能：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/DesignModel/design_strategy_ui.png\" alt=\"测试UI\"><br>简单做了计算器的UI，它应该提供具体出行方式的选择，很明显，我们提供了三种。</p>\n<p>并且有一个出行距离的输入框。</p>\n<p>在获取到出行方式和出行距离后，我们就可以来计算具体价格。</p>\n<p>需求很明确，接下来我们要做的就是先实现各种出行方式下的价格计算：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PriceCaculateController</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据出行方式，选择距离的计算方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> <span class=\"title\">cacluatePrice</span><span class=\"params\">(<span class=\"keyword\">int</span> km, <span class=\"keyword\">int</span> typeMode)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (typeMode) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> Constant.TYPE_BUS:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> caculateBusPrice(km);</span><br><span class=\"line\">            <span class=\"keyword\">case</span> Constant.TYPE_SUBWAY:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> caculateSubwayPrice(km);</span><br><span class=\"line\">            <span class=\"keyword\">case</span> Constant.TYPE_TAX:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> caculateTaxPrice(km);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算出租车价格</span></span><br><span class=\"line\"><span class=\"comment\">     * 小于3Km，定价9元，大于3km，每1km + 1元</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> <span class=\"title\">caculateTaxPrice</span><span class=\"params\">(<span class=\"keyword\">int</span> km)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">9</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">9</span> + (km - <span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算公交车价格</span></span><br><span class=\"line\"><span class=\"comment\">     * 小于5Km，定价2元，小于10km，定价3元，其余4元</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> <span class=\"title\">caculateBusPrice</span><span class=\"params\">(<span class=\"keyword\">int</span> km)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算地铁价格</span></span><br><span class=\"line\"><span class=\"comment\">     * 小于5Km，定价3元，小于10km，定价4元，小于15Km，定价5元，其余6元</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> <span class=\"title\">caculateSubwayPrice</span><span class=\"params\">(<span class=\"keyword\">int</span> km)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">15</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">6</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>PriceCaculateController</code>中包含了所有出行方式的计算细节。</p>\n<p>细心的同学可以发现，我将<code>PriceCaculateController</code>中的所有计算方法私有化，向外暴露了一个<code>cacluatePrice(int km, int typeMode)</code>方法。</p>\n<p>用户在使用时，仅需告诉我们出行距离与出行方式，我们就可以完全自动计算出价格，下面是使用的代码：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> price = PriceCaculateController.cacluatePrice(<span class=\"number\">20</span>,<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这样我们就实现了页面与计算功能的完美解耦，页面完全不关心计算的细节。</p>\n<p>接下来我们在页面上添加基础判断之后，调用<code>PriceCaculateController.cacluatePrice</code>即可。</p>\n<p>我们可以来看看具体效果：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/DesignModel/design_strategy_gif_ui.gif\" alt=\"具体效果\"></p>\n<p>至此，我们的价格计算器已经开发完成了。</p>\n<p>很明显，我们的核心代码全在<code>PriceCaculateController</code>中。</p>\n<p>随着出行方式的增加、价格计算的优化，<code>PriceCaculateController</code>必定会变得臃肿不堪。</p>\n<p>为了将<code>PriceCaculateController</code>功能进行拆分，我们就要使用今天讲到的<strong>策略模式</strong>。</p>\n<p>让我们来回顾<strong>策略模式</strong>中的角色：</p>\n<p><strong>一个策略抽象以及多个具体策略</strong>。</p>\n<p>接下来我们就将价格计算功能进行抽象：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">StrategyCaculate</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据距离计算价格</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">caculatePrice</span>(<span class=\"params\"><span class=\"keyword\">int</span> km</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>策略抽象非常简单。</p>\n<p>接下里我们来实现具体策略，有多少种出行方式，就应该有多少种具体策略：<br>公共汽车(Bus):<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BusStrategyCaculate</span> <span class=\"keyword\">implements</span> <span class=\"title\">StrategyCaculate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">caculatePrice</span><span class=\"params\">(<span class=\"keyword\">int</span> km)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>出租车(Tax):<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TaxStrategyCaculate</span> <span class=\"keyword\">implements</span> <span class=\"title\">StrategyCaculate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">caculatePrice</span><span class=\"params\">(<span class=\"keyword\">int</span> km)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">9</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">9</span> + (km - <span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>地铁(Subway):<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubwayStrategyCaculate</span> <span class=\"keyword\">implements</span> <span class=\"title\">StrategyCaculate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">caculatePrice</span><span class=\"params\">(<span class=\"keyword\">int</span> km)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (km &lt;= <span class=\"number\">15</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">6</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>三种出行方式对应三个具体策略。</p>\n<p>当有新的出行方式时，我们只需创建新的类去实现策略抽象即可。</p>\n<p>简单写一些测试代码：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StrategyCaculate caculate = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (typeMode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> Constant.<span class=\"string\">TYPE_BUS:</span></span><br><span class=\"line\">        caculate = <span class=\"keyword\">new</span> BusStrategyCaculate();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> Constant.<span class=\"string\">TYPE_SUBWAY:</span></span><br><span class=\"line\">        caculate = <span class=\"keyword\">new</span> SubwayStrategyCaculate();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> Constant.<span class=\"string\">TYPE_TAX:</span></span><br><span class=\"line\">        caculate = <span class=\"keyword\">new</span> TaxStrategyCaculate();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">assert</span> caculate != <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> caculate.caculatePrice(km);</span><br></pre></td></tr></table></figure></p>\n<p>可以发现，这里我们又运用多态的特性，根据不同的出行方式，创建不同的子类，接着调用子类中的价格计算。</p>\n<p>最后的效果和之前的效果是一致的。</p>\n<p><a href=\"https://github.com/YuanTiger/Design-Pattern\" target=\"_blank\" rel=\"noopener\">相关代码已经提交至GitHub</a>。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>有些人会有疑惑了，我们最开始的<code>PriceCaculateController</code>并不复杂，并且一个方法对应一种出行方式，清晰明了，为什么非要改成这个样子?</p>\n<p>对于这个问题，我们现在的出行方式仅仅有三种、并且价格计算的逻辑非常简单。</p>\n<p>如果现在继续添加出行方式：飞机、自驾、高铁、大巴等。</p>\n<p>如果优化出租车的价格计算逻辑：出租车3Km以内9元，之后每1Km加1元，燃气费2元，堵车服务费每分钟0.1元，夜晚11点之后价格提升，每个城市的价格不同等等。</p>\n<p>如果将上述逻辑全部写出，那么就出租车价格计算的逻辑，就要有上百行的代码。</p>\n<p>如果你们公司是一家专业的出行价格计算公司，这些计算细节、出行方式都必定要涵盖到。</p>\n<p>那么将来，<code>PriceCaculateController</code>的代码量，会有多大？</p>\n<p>如果我们运用了<strong>策略模式</strong>，项目的目录结构就变成了：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/DesignModel/design_strategy_rule.png\" alt=\"策略模式目录结构\"><br>当某种交通工具的价格计算发生问题，我们仅仅去找对应的具体策略即可。并且避免产生了<code>PriceCaculateController</code>这种代码量庞大的类。</p>\n<p><strong>策略模式</strong>很好地遵循了开闭原则，注入不同的具体策略，会有不同的效果，从而达到很好的扩展性。</p>\n<p>使用<strong>策略模式</strong>的优点有很多：</p>\n<ul>\n<li>结构清晰明了，使用简单；</li>\n<li>降低耦合度，扩展方便；</li>\n<li>封装彻底，数据更为安全。</li>\n</ul>\n<p>所以，在你能预见到某个功能会有扩展的需求时，并且使用场景符合<strong>策略模式</strong>的使用场景，还是强烈建议你使用<strong>策略模式</strong>的。</p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p>《Android源码设计模式解析与实战》 何红辉、关爱民 著</p>\n"},{"title":"Google I/O 2017 Android","date":"2017-05-23T10:50:21.000Z","_content":"Google I/O 2017已经结束了一周了，这篇小文将简单总结一下Android的变化。\n不得不说，本次I/O大会，Android从主角完美蜕变成了配角。人工智能成为重心。\n参考：[Google中文博客](http://developers.googleblog.cn/)\n\n## Android O预览版 ##\n以流畅度优化为重心的Android最新版本Android O预览版正式发布:\n[Android O预览版地址](https://www.google.com/android/beta?pli=1)\n[Android O新特性](http://developers.googleblog.cn/2017/03/android-o-developer-preview.html)\n## Project Treble ## \n全新的Android框架，帮助缩短设备制造商升级Android版本所需时间和减少工作量，此项目将从Andorid O开始实施。\n## Android Go ## \n针对低配置（1GB运行内存以下）的Android系统，为了增加Android系统的市场占有率，最低可支持512M的手机配置。\n## Kotlin ## \n一门设计精美并得到Google认可的语言，Android将其作为了一级语言。Google认为它可以使Android开发更快、更有趣。[附上翻译教程](https://www.kotlincn.net/docs/reference/)。\n## AndroidStudio3.0 Canary ##\nAndroidStudio开发工具的又一次革新。本次预览版包含三大主要功能：\n - 全新的应用性能分析工具\n - 完全支持Kotlin语言\n - 加快大规模项目的Gradle构建速度\n[具体详情可以看这里。](http://developers.googleblog.cn/2017/05/android-studio-30-canary-1.html)\n\n## 其他 ##\n其他技能的话各位看官可以移步官方博客去了解，中文版的已经出了，而且网络上也已经到处都是译文和总结了。\n包括人工智能、VR、Goole Assistant、Google Home产品等等。\n作为一名Android小将,本次大会要学习、要适应的东西还是很多的。\n共勉。","source":"_posts/Google-IO-2017.md","raw":"---\ntitle: Google I/O 2017 Android\ndate: 2017-05-23 18:50:21\ntags:\n   - Google\n---\nGoogle I/O 2017已经结束了一周了，这篇小文将简单总结一下Android的变化。\n不得不说，本次I/O大会，Android从主角完美蜕变成了配角。人工智能成为重心。\n参考：[Google中文博客](http://developers.googleblog.cn/)\n\n## Android O预览版 ##\n以流畅度优化为重心的Android最新版本Android O预览版正式发布:\n[Android O预览版地址](https://www.google.com/android/beta?pli=1)\n[Android O新特性](http://developers.googleblog.cn/2017/03/android-o-developer-preview.html)\n## Project Treble ## \n全新的Android框架，帮助缩短设备制造商升级Android版本所需时间和减少工作量，此项目将从Andorid O开始实施。\n## Android Go ## \n针对低配置（1GB运行内存以下）的Android系统，为了增加Android系统的市场占有率，最低可支持512M的手机配置。\n## Kotlin ## \n一门设计精美并得到Google认可的语言，Android将其作为了一级语言。Google认为它可以使Android开发更快、更有趣。[附上翻译教程](https://www.kotlincn.net/docs/reference/)。\n## AndroidStudio3.0 Canary ##\nAndroidStudio开发工具的又一次革新。本次预览版包含三大主要功能：\n - 全新的应用性能分析工具\n - 完全支持Kotlin语言\n - 加快大规模项目的Gradle构建速度\n[具体详情可以看这里。](http://developers.googleblog.cn/2017/05/android-studio-30-canary-1.html)\n\n## 其他 ##\n其他技能的话各位看官可以移步官方博客去了解，中文版的已经出了，而且网络上也已经到处都是译文和总结了。\n包括人工智能、VR、Goole Assistant、Google Home产品等等。\n作为一名Android小将,本次大会要学习、要适应的东西还是很多的。\n共勉。","slug":"Google-IO-2017","published":1,"updated":"2018-08-24T09:36:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7sxdwr000whnnflmjfr1l9","content":"<p>Google I/O 2017已经结束了一周了，这篇小文将简单总结一下Android的变化。<br>不得不说，本次I/O大会，Android从主角完美蜕变成了配角。人工智能成为重心。<br>参考：<a href=\"http://developers.googleblog.cn/\" target=\"_blank\" rel=\"noopener\">Google中文博客</a></p>\n<h2 id=\"Android-O预览版\"><a href=\"#Android-O预览版\" class=\"headerlink\" title=\"Android O预览版\"></a>Android O预览版</h2><p>以流畅度优化为重心的Android最新版本Android O预览版正式发布:<br><a href=\"https://www.google.com/android/beta?pli=1\" target=\"_blank\" rel=\"noopener\">Android O预览版地址</a><br><a href=\"http://developers.googleblog.cn/2017/03/android-o-developer-preview.html\" target=\"_blank\" rel=\"noopener\">Android O新特性</a></p>\n<h2 id=\"Project-Treble\"><a href=\"#Project-Treble\" class=\"headerlink\" title=\"Project Treble\"></a>Project Treble</h2><p>全新的Android框架，帮助缩短设备制造商升级Android版本所需时间和减少工作量，此项目将从Andorid O开始实施。</p>\n<h2 id=\"Android-Go\"><a href=\"#Android-Go\" class=\"headerlink\" title=\"Android Go\"></a>Android Go</h2><p>针对低配置（1GB运行内存以下）的Android系统，为了增加Android系统的市场占有率，最低可支持512M的手机配置。</p>\n<h2 id=\"Kotlin\"><a href=\"#Kotlin\" class=\"headerlink\" title=\"Kotlin\"></a>Kotlin</h2><p>一门设计精美并得到Google认可的语言，Android将其作为了一级语言。Google认为它可以使Android开发更快、更有趣。<a href=\"https://www.kotlincn.net/docs/reference/\" target=\"_blank\" rel=\"noopener\">附上翻译教程</a>。</p>\n<h2 id=\"AndroidStudio3-0-Canary\"><a href=\"#AndroidStudio3-0-Canary\" class=\"headerlink\" title=\"AndroidStudio3.0 Canary\"></a>AndroidStudio3.0 Canary</h2><p>AndroidStudio开发工具的又一次革新。本次预览版包含三大主要功能：</p>\n<ul>\n<li>全新的应用性能分析工具</li>\n<li>完全支持Kotlin语言</li>\n<li>加快大规模项目的Gradle构建速度<br><a href=\"http://developers.googleblog.cn/2017/05/android-studio-30-canary-1.html\" target=\"_blank\" rel=\"noopener\">具体详情可以看这里。</a></li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>其他技能的话各位看官可以移步官方博客去了解，中文版的已经出了，而且网络上也已经到处都是译文和总结了。<br>包括人工智能、VR、Goole Assistant、Google Home产品等等。<br>作为一名Android小将,本次大会要学习、要适应的东西还是很多的。<br>共勉。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Google I/O 2017已经结束了一周了，这篇小文将简单总结一下Android的变化。<br>不得不说，本次I/O大会，Android从主角完美蜕变成了配角。人工智能成为重心。<br>参考：<a href=\"http://developers.googleblog.cn/\" target=\"_blank\" rel=\"noopener\">Google中文博客</a></p>\n<h2 id=\"Android-O预览版\"><a href=\"#Android-O预览版\" class=\"headerlink\" title=\"Android O预览版\"></a>Android O预览版</h2><p>以流畅度优化为重心的Android最新版本Android O预览版正式发布:<br><a href=\"https://www.google.com/android/beta?pli=1\" target=\"_blank\" rel=\"noopener\">Android O预览版地址</a><br><a href=\"http://developers.googleblog.cn/2017/03/android-o-developer-preview.html\" target=\"_blank\" rel=\"noopener\">Android O新特性</a></p>\n<h2 id=\"Project-Treble\"><a href=\"#Project-Treble\" class=\"headerlink\" title=\"Project Treble\"></a>Project Treble</h2><p>全新的Android框架，帮助缩短设备制造商升级Android版本所需时间和减少工作量，此项目将从Andorid O开始实施。</p>\n<h2 id=\"Android-Go\"><a href=\"#Android-Go\" class=\"headerlink\" title=\"Android Go\"></a>Android Go</h2><p>针对低配置（1GB运行内存以下）的Android系统，为了增加Android系统的市场占有率，最低可支持512M的手机配置。</p>\n<h2 id=\"Kotlin\"><a href=\"#Kotlin\" class=\"headerlink\" title=\"Kotlin\"></a>Kotlin</h2><p>一门设计精美并得到Google认可的语言，Android将其作为了一级语言。Google认为它可以使Android开发更快、更有趣。<a href=\"https://www.kotlincn.net/docs/reference/\" target=\"_blank\" rel=\"noopener\">附上翻译教程</a>。</p>\n<h2 id=\"AndroidStudio3-0-Canary\"><a href=\"#AndroidStudio3-0-Canary\" class=\"headerlink\" title=\"AndroidStudio3.0 Canary\"></a>AndroidStudio3.0 Canary</h2><p>AndroidStudio开发工具的又一次革新。本次预览版包含三大主要功能：</p>\n<ul>\n<li>全新的应用性能分析工具</li>\n<li>完全支持Kotlin语言</li>\n<li>加快大规模项目的Gradle构建速度<br><a href=\"http://developers.googleblog.cn/2017/05/android-studio-30-canary-1.html\" target=\"_blank\" rel=\"noopener\">具体详情可以看这里。</a></li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>其他技能的话各位看官可以移步官方博客去了解，中文版的已经出了，而且网络上也已经到处都是译文和总结了。<br>包括人工智能、VR、Goole Assistant、Google Home产品等等。<br>作为一名Android小将,本次大会要学习、要适应的东西还是很多的。<br>共勉。</p>\n"},{"title":"京东云主机使用(0)-搭建简单网页（macOS）","date":"2017-08-23T03:37:13.000Z","_content":"## 前言 ##\n在郭霖大神的带领下，我花了一元钱入手了2个月的京东云主机，也就是个人服务器。\n\n这是我人生第一台服务器，多么值得纪念。。。。。。\n\n[入手地址在这里](https://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&mid=2650240867&idx=1&sn=d56fceac5b343ccc4a90cd422c490df0&chksm=8863860cbf140f1add1f86fab6267b28e0173350e571ac7192f9a794e2526cadf6dab765d8e2&scene=38#wechat_redirect)\n\n一直不买的原因也是因为自己的Android水平没有达标，不想去学其他方面的知识而分心。\n\n其实很容易发现这他喵的就是一个不想学习的借口罢了！\n\n更容易发现这明显是没钱买吧！\n\n![](http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/drop_table.jpeg)\n\n所以趁此机会，入手了2个月服务器来尝鲜。名额有限，说不定已经没有了。。。\n\n购买流程就不说了，服务器系统选择的是Ubuntu 16.04 64位。\n\n接下来的使用状况都是围绕着Ubuntu 16.04 64位展开的。\n\n## 登录云主机 ##\n郭霖大神推荐了两款软件用于控制服务器 和 上传下载服务器文件:Xshell和Xftp。\n\n但是两款软件都是Windows系统的，没有macOS系统。\n\n如果你是Windows系统的，可移步郭霖大神的[搭建教程](https://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&mid=2650240867&idx=1&sn=d56fceac5b343ccc4a90cd422c490df0&chksm=8863860cbf140f1add1f86fab6267b28e0173350e571ac7192f9a794e2526cadf6dab765d8e2&scene=38#wechat_redirect)，相对比较简单。\n\n那么如何在macOS系统下操作服务器呢？\n\n在[京东云的帮助中心](http://www.jcloud.com/help/detail/360/isCateLog/1)中，macOS系统的登录方式有两种：一种是VNC登录，一种是SSH密钥登录。\n#### VNC登录 ####\nVNC登录是京东云为用户提供的一种通过Web浏览器连接服务器的方式。\n\n很简单，就是在京东云的控制台点击远程连接即可。\n\n接着打开了Ubuntu 16.04 64的控制台，需要先进行登录，用户名为root，密码发送到了你的邮箱和手机当中。\n![登录面板](http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_0.png)\n\n如果想要修改密码，可在控制台-操作 进行修改。修改完成后记得重启生效。\n\n输入完成并正确就登录上了服务器，非常简单。\n![登录成功](http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_1.png)\n\n不过使用VNC登录的场景很少：\n\n- 查看云服务的启动进度\n\n- 无法通过其他登录方式登录时，才使用VNC来登录服务器\n\n所以这种登录方式，体验体验即可，并不实用。\n\n并且它不支持复制粘贴、不支持文件上传，而且是单点登录，使用起来简直是折磨。\n\n#### SSH密钥登录 ####\n京东云帮助中心提供了[SSH创建和登录教程](http://www.jcloud.com/help/detail/346/isCateLog/1)。\n\n成功设置SSH密钥后，我们就可以不使用VNC登录，直接在Mac的命令行就可以进行服务器的登录。\n\n下面我们来一步一步设置SSH密钥：\n\n什么是SSH密钥？\n\n就我的理解而言，它是一种网络通讯协议，主要用于计算机之间的加密登录。\n\n使用SSH登录的具体流程如下：\n\n![SSH密钥登录](http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_2.png)\n\n可以看出一个SSH串要提供给服务器和本机，当SSH串匹配成功后，就可以实现免密登录。\n\n这样的优点就是当登录请求被恶意拦截时，密码也不会泄露。\n\n接下来，我们就要生成SSH密钥，并保存到本机和服务器。\n\n要说一句的是，SSH密钥登录很多地方都有用到，比如GitHub。\n\n如果你的电脑已经有SSH密钥，那么直接使用这个即可。在我的理解下，一台电脑只能有一个SSH密钥。\n\n具体的SSH成功流程可参考[GitHub官方教程](https://help.github.com/articles/connecting-to-github-with-ssh/)。\n\n 在这里我也简单罗列一下SSH密钥的生成步骤：\n\n1.校验本机是否已经生成SSH密钥：\n```\nls -al ~/.ssh\n```\n如果输出了\n```\nid_dsa.pub\nid_ecdsa.pub\nid_ed25519.pub\nid_rsa.pub\n```\n则代表已经生成过，直接跳过第二步，执行第三步。\n\n2.生成SSH密钥。如果已经生成跳过。\n```\n//注意修改最后的E-mail地址\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n```\n执行完成后，会让输入保存路径，直接按下回车，使用默认路径进行SSH密钥的保存就可以。\n\n接着会提示你输入该SSH的密钥密码，可以为空，直接回车，想设置的同学也可以进行设置。\n\n该SSH密钥密码用于第一次使用SSH时的校验，并可以在SSH密钥的配置文件中关闭SSH密钥密码校验。\n\n我是设置的，更多细节大家可以自己去查阅一些资料。\n\n3.复制SSH密钥。\n```\npbcopy < ~/.ssh/id_rsa.pub\n```\n使用该命令后，你的粘贴板内容就会变成SSH密钥。\n\n这次我们要将SSH密钥上传到我们自己的服务器里。\n\n打开京东云的控制板，添加SSH密钥：\n\n![京东云添加SSH密钥](http://7xvzby.com1.z0.glb.clouddn.com/jd_server_use_3.png)\n\n接着点击完成，Over。\n\n4.测试SSH密钥。\n使用SSH密钥登录也非常简单。\n打开我们Mac的命令行输入：\n```\nssh user@xxx.xxx.xxx.xxx\n```\nuser为用户名，我们的用户名为root。@之后为IP地址，比如：\n```\nssh root@116.196.93.148\n```\n接着会提示输入用户输入服务器的登录密码，正确后就可以登录成功。\n\n如果失败，建议按照[京东云帮助中心教程](http://www.jcloud.com/help/detail/346/isCateLog/1)，走一遍。\n\n## 简单网页搭建 ##\n我们先为我们的服务器下载一个服务器，这里使用郭神用的apache2。\n\napache2是专门用来显示静态网页的服务器程序。\n\n在登录服务器成功后输入下面命令：\n```\nsudo apt-get install apache2\n```\n接着输入Y完成安装。\n\n之后打开浏览器，输入我们服务器的IP，可以看到下面效果：\n![](http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_4.png)\n\n接着我们来替换这个html文件样式。\n\n它在我们服务器的地址是：/var/www/html/index.html\n\n我们只要自己写一个简单的静态Html文件，然后上传服务器覆盖掉它即可。\n\n这里我们直接拿着郭神的简单html来做示范：\n```\n<!Doctype html>\n<html>\n  <head>\n    <title>京东云测试</title>\n    <style>\n      body{text-align:center}\n    </style>\n  </head>\n  <body>\n    <h1>欢迎来到郭霖的京东云主页</h1>\n    <p>\n      点击\n      <a href=\"http://guolin.tech\">这里</a>\n      跳转到我的博客\n    </p>\n  </body>\n</html>\n```\n将该文件保存为index.html。\n\n接着我们将该文件上传至服务器,这里有一篇[mac向服务器上传文件的教程](http://www.jianshu.com/p/1afd25e7459d)。非常好用。\n上传命令：\n```\n//注意将yourUsername修改为你的mac用户名\n//并且我的文件保存在桌面Desktop。\nput /Users/yourUsername/Desktop/index.html /var/www/html\n```\n按照上述步骤后，我们成功将index.html上传至服务器并覆盖。\n刷新我们的网页，可以看到下面效果：\n![效果](http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_5.png)\n\n。。。。。。。\n\n![](http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/drop_table.jpeg)\n\n为什么显示源码！？\n\n因为Mac的记事本以.html结尾时，会将内容格式化成文本，不做代码显示。\n\n解决也很简单，[这篇文章](https://www.zhihu.com/question/21887357)。\n\n解决后重新执行上传代码，重新刷新页面，效果如下：\n![效果](http://7xvzby.com1.z0.glb.clouddn.com/jd_server_6.png)\n\n简单查阅后，在head中添加如下代码即可：\n```\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n```\n接着再次执行文件上传，再次刷新页面，效果如下：\n![效果](http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_7.png)\n\n\n## 总结 ##\n至此，一个非常简单的静态网页的个人博客便搭建完成了！\n\n写出这么个静态网页，带上这篇博客的出炉，一共耗时2天，走的弯路没有描述。\n\n其中包括Linux命令行控制、SSH密钥理解等，都是新知识，于我而言还是有很大提升的。\n\n以后如果用这个服务器，搭建一个动态的个人博客。\n\n想想还有些小激动呢！","source":"_posts/JD-Server-Use-Explain-0.md","raw":"---\ntitle: 京东云主机使用(0)-搭建简单网页（macOS）\ndate: 2017-08-23 11:37:13\ntags:\n   - 服务器\n   - SSH\n---\n## 前言 ##\n在郭霖大神的带领下，我花了一元钱入手了2个月的京东云主机，也就是个人服务器。\n\n这是我人生第一台服务器，多么值得纪念。。。。。。\n\n[入手地址在这里](https://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&mid=2650240867&idx=1&sn=d56fceac5b343ccc4a90cd422c490df0&chksm=8863860cbf140f1add1f86fab6267b28e0173350e571ac7192f9a794e2526cadf6dab765d8e2&scene=38#wechat_redirect)\n\n一直不买的原因也是因为自己的Android水平没有达标，不想去学其他方面的知识而分心。\n\n其实很容易发现这他喵的就是一个不想学习的借口罢了！\n\n更容易发现这明显是没钱买吧！\n\n![](http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/drop_table.jpeg)\n\n所以趁此机会，入手了2个月服务器来尝鲜。名额有限，说不定已经没有了。。。\n\n购买流程就不说了，服务器系统选择的是Ubuntu 16.04 64位。\n\n接下来的使用状况都是围绕着Ubuntu 16.04 64位展开的。\n\n## 登录云主机 ##\n郭霖大神推荐了两款软件用于控制服务器 和 上传下载服务器文件:Xshell和Xftp。\n\n但是两款软件都是Windows系统的，没有macOS系统。\n\n如果你是Windows系统的，可移步郭霖大神的[搭建教程](https://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&mid=2650240867&idx=1&sn=d56fceac5b343ccc4a90cd422c490df0&chksm=8863860cbf140f1add1f86fab6267b28e0173350e571ac7192f9a794e2526cadf6dab765d8e2&scene=38#wechat_redirect)，相对比较简单。\n\n那么如何在macOS系统下操作服务器呢？\n\n在[京东云的帮助中心](http://www.jcloud.com/help/detail/360/isCateLog/1)中，macOS系统的登录方式有两种：一种是VNC登录，一种是SSH密钥登录。\n#### VNC登录 ####\nVNC登录是京东云为用户提供的一种通过Web浏览器连接服务器的方式。\n\n很简单，就是在京东云的控制台点击远程连接即可。\n\n接着打开了Ubuntu 16.04 64的控制台，需要先进行登录，用户名为root，密码发送到了你的邮箱和手机当中。\n![登录面板](http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_0.png)\n\n如果想要修改密码，可在控制台-操作 进行修改。修改完成后记得重启生效。\n\n输入完成并正确就登录上了服务器，非常简单。\n![登录成功](http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_1.png)\n\n不过使用VNC登录的场景很少：\n\n- 查看云服务的启动进度\n\n- 无法通过其他登录方式登录时，才使用VNC来登录服务器\n\n所以这种登录方式，体验体验即可，并不实用。\n\n并且它不支持复制粘贴、不支持文件上传，而且是单点登录，使用起来简直是折磨。\n\n#### SSH密钥登录 ####\n京东云帮助中心提供了[SSH创建和登录教程](http://www.jcloud.com/help/detail/346/isCateLog/1)。\n\n成功设置SSH密钥后，我们就可以不使用VNC登录，直接在Mac的命令行就可以进行服务器的登录。\n\n下面我们来一步一步设置SSH密钥：\n\n什么是SSH密钥？\n\n就我的理解而言，它是一种网络通讯协议，主要用于计算机之间的加密登录。\n\n使用SSH登录的具体流程如下：\n\n![SSH密钥登录](http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_2.png)\n\n可以看出一个SSH串要提供给服务器和本机，当SSH串匹配成功后，就可以实现免密登录。\n\n这样的优点就是当登录请求被恶意拦截时，密码也不会泄露。\n\n接下来，我们就要生成SSH密钥，并保存到本机和服务器。\n\n要说一句的是，SSH密钥登录很多地方都有用到，比如GitHub。\n\n如果你的电脑已经有SSH密钥，那么直接使用这个即可。在我的理解下，一台电脑只能有一个SSH密钥。\n\n具体的SSH成功流程可参考[GitHub官方教程](https://help.github.com/articles/connecting-to-github-with-ssh/)。\n\n 在这里我也简单罗列一下SSH密钥的生成步骤：\n\n1.校验本机是否已经生成SSH密钥：\n```\nls -al ~/.ssh\n```\n如果输出了\n```\nid_dsa.pub\nid_ecdsa.pub\nid_ed25519.pub\nid_rsa.pub\n```\n则代表已经生成过，直接跳过第二步，执行第三步。\n\n2.生成SSH密钥。如果已经生成跳过。\n```\n//注意修改最后的E-mail地址\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n```\n执行完成后，会让输入保存路径，直接按下回车，使用默认路径进行SSH密钥的保存就可以。\n\n接着会提示你输入该SSH的密钥密码，可以为空，直接回车，想设置的同学也可以进行设置。\n\n该SSH密钥密码用于第一次使用SSH时的校验，并可以在SSH密钥的配置文件中关闭SSH密钥密码校验。\n\n我是设置的，更多细节大家可以自己去查阅一些资料。\n\n3.复制SSH密钥。\n```\npbcopy < ~/.ssh/id_rsa.pub\n```\n使用该命令后，你的粘贴板内容就会变成SSH密钥。\n\n这次我们要将SSH密钥上传到我们自己的服务器里。\n\n打开京东云的控制板，添加SSH密钥：\n\n![京东云添加SSH密钥](http://7xvzby.com1.z0.glb.clouddn.com/jd_server_use_3.png)\n\n接着点击完成，Over。\n\n4.测试SSH密钥。\n使用SSH密钥登录也非常简单。\n打开我们Mac的命令行输入：\n```\nssh user@xxx.xxx.xxx.xxx\n```\nuser为用户名，我们的用户名为root。@之后为IP地址，比如：\n```\nssh root@116.196.93.148\n```\n接着会提示输入用户输入服务器的登录密码，正确后就可以登录成功。\n\n如果失败，建议按照[京东云帮助中心教程](http://www.jcloud.com/help/detail/346/isCateLog/1)，走一遍。\n\n## 简单网页搭建 ##\n我们先为我们的服务器下载一个服务器，这里使用郭神用的apache2。\n\napache2是专门用来显示静态网页的服务器程序。\n\n在登录服务器成功后输入下面命令：\n```\nsudo apt-get install apache2\n```\n接着输入Y完成安装。\n\n之后打开浏览器，输入我们服务器的IP，可以看到下面效果：\n![](http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_4.png)\n\n接着我们来替换这个html文件样式。\n\n它在我们服务器的地址是：/var/www/html/index.html\n\n我们只要自己写一个简单的静态Html文件，然后上传服务器覆盖掉它即可。\n\n这里我们直接拿着郭神的简单html来做示范：\n```\n<!Doctype html>\n<html>\n  <head>\n    <title>京东云测试</title>\n    <style>\n      body{text-align:center}\n    </style>\n  </head>\n  <body>\n    <h1>欢迎来到郭霖的京东云主页</h1>\n    <p>\n      点击\n      <a href=\"http://guolin.tech\">这里</a>\n      跳转到我的博客\n    </p>\n  </body>\n</html>\n```\n将该文件保存为index.html。\n\n接着我们将该文件上传至服务器,这里有一篇[mac向服务器上传文件的教程](http://www.jianshu.com/p/1afd25e7459d)。非常好用。\n上传命令：\n```\n//注意将yourUsername修改为你的mac用户名\n//并且我的文件保存在桌面Desktop。\nput /Users/yourUsername/Desktop/index.html /var/www/html\n```\n按照上述步骤后，我们成功将index.html上传至服务器并覆盖。\n刷新我们的网页，可以看到下面效果：\n![效果](http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_5.png)\n\n。。。。。。。\n\n![](http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/drop_table.jpeg)\n\n为什么显示源码！？\n\n因为Mac的记事本以.html结尾时，会将内容格式化成文本，不做代码显示。\n\n解决也很简单，[这篇文章](https://www.zhihu.com/question/21887357)。\n\n解决后重新执行上传代码，重新刷新页面，效果如下：\n![效果](http://7xvzby.com1.z0.glb.clouddn.com/jd_server_6.png)\n\n简单查阅后，在head中添加如下代码即可：\n```\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n```\n接着再次执行文件上传，再次刷新页面，效果如下：\n![效果](http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_7.png)\n\n\n## 总结 ##\n至此，一个非常简单的静态网页的个人博客便搭建完成了！\n\n写出这么个静态网页，带上这篇博客的出炉，一共耗时2天，走的弯路没有描述。\n\n其中包括Linux命令行控制、SSH密钥理解等，都是新知识，于我而言还是有很大提升的。\n\n以后如果用这个服务器，搭建一个动态的个人博客。\n\n想想还有些小激动呢！","slug":"JD-Server-Use-Explain-0","published":1,"updated":"2018-08-24T09:36:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7sxdwu000yhnnfhftnadh1","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在郭霖大神的带领下，我花了一元钱入手了2个月的京东云主机，也就是个人服务器。</p>\n<p>这是我人生第一台服务器，多么值得纪念。。。。。。</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&amp;mid=2650240867&amp;idx=1&amp;sn=d56fceac5b343ccc4a90cd422c490df0&amp;chksm=8863860cbf140f1add1f86fab6267b28e0173350e571ac7192f9a794e2526cadf6dab765d8e2&amp;scene=38#wechat_redirect\" target=\"_blank\" rel=\"noopener\">入手地址在这里</a></p>\n<p>一直不买的原因也是因为自己的Android水平没有达标，不想去学其他方面的知识而分心。</p>\n<p>其实很容易发现这他喵的就是一个不想学习的借口罢了！</p>\n<p>更容易发现这明显是没钱买吧！</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/drop_table.jpeg\" alt=\"\"></p>\n<p>所以趁此机会，入手了2个月服务器来尝鲜。名额有限，说不定已经没有了。。。</p>\n<p>购买流程就不说了，服务器系统选择的是Ubuntu 16.04 64位。</p>\n<p>接下来的使用状况都是围绕着Ubuntu 16.04 64位展开的。</p>\n<h2 id=\"登录云主机\"><a href=\"#登录云主机\" class=\"headerlink\" title=\"登录云主机\"></a>登录云主机</h2><p>郭霖大神推荐了两款软件用于控制服务器 和 上传下载服务器文件:Xshell和Xftp。</p>\n<p>但是两款软件都是Windows系统的，没有macOS系统。</p>\n<p>如果你是Windows系统的，可移步郭霖大神的<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&amp;mid=2650240867&amp;idx=1&amp;sn=d56fceac5b343ccc4a90cd422c490df0&amp;chksm=8863860cbf140f1add1f86fab6267b28e0173350e571ac7192f9a794e2526cadf6dab765d8e2&amp;scene=38#wechat_redirect\" target=\"_blank\" rel=\"noopener\">搭建教程</a>，相对比较简单。</p>\n<p>那么如何在macOS系统下操作服务器呢？</p>\n<p>在<a href=\"http://www.jcloud.com/help/detail/360/isCateLog/1\" target=\"_blank\" rel=\"noopener\">京东云的帮助中心</a>中，macOS系统的登录方式有两种：一种是VNC登录，一种是SSH密钥登录。</p>\n<h4 id=\"VNC登录\"><a href=\"#VNC登录\" class=\"headerlink\" title=\"VNC登录\"></a>VNC登录</h4><p>VNC登录是京东云为用户提供的一种通过Web浏览器连接服务器的方式。</p>\n<p>很简单，就是在京东云的控制台点击远程连接即可。</p>\n<p>接着打开了Ubuntu 16.04 64的控制台，需要先进行登录，用户名为root，密码发送到了你的邮箱和手机当中。<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_0.png\" alt=\"登录面板\"></p>\n<p>如果想要修改密码，可在控制台-操作 进行修改。修改完成后记得重启生效。</p>\n<p>输入完成并正确就登录上了服务器，非常简单。<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_1.png\" alt=\"登录成功\"></p>\n<p>不过使用VNC登录的场景很少：</p>\n<ul>\n<li><p>查看云服务的启动进度</p>\n</li>\n<li><p>无法通过其他登录方式登录时，才使用VNC来登录服务器</p>\n</li>\n</ul>\n<p>所以这种登录方式，体验体验即可，并不实用。</p>\n<p>并且它不支持复制粘贴、不支持文件上传，而且是单点登录，使用起来简直是折磨。</p>\n<h4 id=\"SSH密钥登录\"><a href=\"#SSH密钥登录\" class=\"headerlink\" title=\"SSH密钥登录\"></a>SSH密钥登录</h4><p>京东云帮助中心提供了<a href=\"http://www.jcloud.com/help/detail/346/isCateLog/1\" target=\"_blank\" rel=\"noopener\">SSH创建和登录教程</a>。</p>\n<p>成功设置SSH密钥后，我们就可以不使用VNC登录，直接在Mac的命令行就可以进行服务器的登录。</p>\n<p>下面我们来一步一步设置SSH密钥：</p>\n<p>什么是SSH密钥？</p>\n<p>就我的理解而言，它是一种网络通讯协议，主要用于计算机之间的加密登录。</p>\n<p>使用SSH登录的具体流程如下：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_2.png\" alt=\"SSH密钥登录\"></p>\n<p>可以看出一个SSH串要提供给服务器和本机，当SSH串匹配成功后，就可以实现免密登录。</p>\n<p>这样的优点就是当登录请求被恶意拦截时，密码也不会泄露。</p>\n<p>接下来，我们就要生成SSH密钥，并保存到本机和服务器。</p>\n<p>要说一句的是，SSH密钥登录很多地方都有用到，比如GitHub。</p>\n<p>如果你的电脑已经有SSH密钥，那么直接使用这个即可。在我的理解下，一台电脑只能有一个SSH密钥。</p>\n<p>具体的SSH成功流程可参考<a href=\"https://help.github.com/articles/connecting-to-github-with-ssh/\" target=\"_blank\" rel=\"noopener\">GitHub官方教程</a>。</p>\n<p> 在这里我也简单罗列一下SSH密钥的生成步骤：</p>\n<p>1.校验本机是否已经生成SSH密钥：<br><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ls</span> -al ~<span class=\"string\">/.ssh</span></span><br></pre></td></tr></table></figure></p>\n<p>如果输出了<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id_dsa.pub</span><br><span class=\"line\">id_ecdsa.pub</span><br><span class=\"line\">id_ed25519.pub</span><br><span class=\"line\">id_rsa.pub</span><br></pre></td></tr></table></figure></p>\n<p>则代表已经生成过，直接跳过第二步，执行第三步。</p>\n<p>2.生成SSH密钥。如果已经生成跳过。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注意修改最后的E-mail地址</span></span><br><span class=\"line\">ssh-keygen -t rsa -<span class=\"selector-tag\">b</span> <span class=\"number\">4096</span> -C <span class=\"string\">\"your_email@example.com\"</span></span><br></pre></td></tr></table></figure></p>\n<p>执行完成后，会让输入保存路径，直接按下回车，使用默认路径进行SSH密钥的保存就可以。</p>\n<p>接着会提示你输入该SSH的密钥密码，可以为空，直接回车，想设置的同学也可以进行设置。</p>\n<p>该SSH密钥密码用于第一次使用SSH时的校验，并可以在SSH密钥的配置文件中关闭SSH密钥密码校验。</p>\n<p>我是设置的，更多细节大家可以自己去查阅一些资料。</p>\n<p>3.复制SSH密钥。<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pbcopy &lt; ~<span class=\"regexp\">/.ssh/i</span>d_rsa.pub</span><br></pre></td></tr></table></figure></p>\n<p>使用该命令后，你的粘贴板内容就会变成SSH密钥。</p>\n<p>这次我们要将SSH密钥上传到我们自己的服务器里。</p>\n<p>打开京东云的控制板，添加SSH密钥：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/jd_server_use_3.png\" alt=\"京东云添加SSH密钥\"></p>\n<p>接着点击完成，Over。</p>\n<p>4.测试SSH密钥。<br>使用SSH密钥登录也非常简单。<br>打开我们Mac的命令行输入：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ssh</span> <span class=\"selector-tag\">user</span>@<span class=\"keyword\">xxx</span>.<span class=\"keyword\">xxx</span>.<span class=\"keyword\">xxx</span>.<span class=\"keyword\">xxx</span></span><br></pre></td></tr></table></figure></p>\n<p>user为用户名，我们的用户名为root。@之后为IP地址，比如：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ssh</span> <span class=\"selector-tag\">root</span>@<span class=\"keyword\">116</span>.<span class=\"keyword\">196</span>.<span class=\"keyword\">93</span>.<span class=\"keyword\">148</span></span><br></pre></td></tr></table></figure></p>\n<p>接着会提示输入用户输入服务器的登录密码，正确后就可以登录成功。</p>\n<p>如果失败，建议按照<a href=\"http://www.jcloud.com/help/detail/346/isCateLog/1\" target=\"_blank\" rel=\"noopener\">京东云帮助中心教程</a>，走一遍。</p>\n<h2 id=\"简单网页搭建\"><a href=\"#简单网页搭建\" class=\"headerlink\" title=\"简单网页搭建\"></a>简单网页搭建</h2><p>我们先为我们的服务器下载一个服务器，这里使用郭神用的apache2。</p>\n<p>apache2是专门用来显示静态网页的服务器程序。</p>\n<p>在登录服务器成功后输入下面命令：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> install apache2</span><br></pre></td></tr></table></figure></p>\n<p>接着输入Y完成安装。</p>\n<p>之后打开浏览器，输入我们服务器的IP，可以看到下面效果：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_4.png\" alt=\"\"></p>\n<p>接着我们来替换这个html文件样式。</p>\n<p>它在我们服务器的地址是：/var/www/html/index.html</p>\n<p>我们只要自己写一个简单的静态Html文件，然后上传服务器覆盖掉它即可。</p>\n<p>这里我们直接拿着郭神的简单html来做示范：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!Doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>京东云测试<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">body</span>&#123;<span class=\"attribute\">text-align</span>:center&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>欢迎来到郭霖的京东云主页<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      点击</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://guolin.tech\"</span>&gt;</span>这里<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      跳转到我的博客</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>将该文件保存为index.html。</p>\n<p>接着我们将该文件上传至服务器,这里有一篇<a href=\"http://www.jianshu.com/p/1afd25e7459d\" target=\"_blank\" rel=\"noopener\">mac向服务器上传文件的教程</a>。非常好用。<br>上传命令：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>注意将yourUsername修改为你的mac用户名</span><br><span class=\"line\"><span class=\"regexp\">//</span>并且我的文件保存在桌面Desktop。</span><br><span class=\"line\">put <span class=\"regexp\">/Users/y</span>ourUsername<span class=\"regexp\">/Desktop/i</span>ndex.html <span class=\"regexp\">/var/</span>www<span class=\"regexp\">/html</span></span><br></pre></td></tr></table></figure></p>\n<p>按照上述步骤后，我们成功将index.html上传至服务器并覆盖。<br>刷新我们的网页，可以看到下面效果：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_5.png\" alt=\"效果\"></p>\n<p>。。。。。。。</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/drop_table.jpeg\" alt=\"\"></p>\n<p>为什么显示源码！？</p>\n<p>因为Mac的记事本以.html结尾时，会将内容格式化成文本，不做代码显示。</p>\n<p>解决也很简单，<a href=\"https://www.zhihu.com/question/21887357\" target=\"_blank\" rel=\"noopener\">这篇文章</a>。</p>\n<p>解决后重新执行上传代码，重新刷新页面，效果如下：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/jd_server_6.png\" alt=\"效果\"></p>\n<p>简单查阅后，在head中添加如下代码即可：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta <span class=\"attribute\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attribute\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span> /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>接着再次执行文件上传，再次刷新页面，效果如下：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_7.png\" alt=\"效果\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>至此，一个非常简单的静态网页的个人博客便搭建完成了！</p>\n<p>写出这么个静态网页，带上这篇博客的出炉，一共耗时2天，走的弯路没有描述。</p>\n<p>其中包括Linux命令行控制、SSH密钥理解等，都是新知识，于我而言还是有很大提升的。</p>\n<p>以后如果用这个服务器，搭建一个动态的个人博客。</p>\n<p>想想还有些小激动呢！</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在郭霖大神的带领下，我花了一元钱入手了2个月的京东云主机，也就是个人服务器。</p>\n<p>这是我人生第一台服务器，多么值得纪念。。。。。。</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&amp;mid=2650240867&amp;idx=1&amp;sn=d56fceac5b343ccc4a90cd422c490df0&amp;chksm=8863860cbf140f1add1f86fab6267b28e0173350e571ac7192f9a794e2526cadf6dab765d8e2&amp;scene=38#wechat_redirect\" target=\"_blank\" rel=\"noopener\">入手地址在这里</a></p>\n<p>一直不买的原因也是因为自己的Android水平没有达标，不想去学其他方面的知识而分心。</p>\n<p>其实很容易发现这他喵的就是一个不想学习的借口罢了！</p>\n<p>更容易发现这明显是没钱买吧！</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/drop_table.jpeg\" alt=\"\"></p>\n<p>所以趁此机会，入手了2个月服务器来尝鲜。名额有限，说不定已经没有了。。。</p>\n<p>购买流程就不说了，服务器系统选择的是Ubuntu 16.04 64位。</p>\n<p>接下来的使用状况都是围绕着Ubuntu 16.04 64位展开的。</p>\n<h2 id=\"登录云主机\"><a href=\"#登录云主机\" class=\"headerlink\" title=\"登录云主机\"></a>登录云主机</h2><p>郭霖大神推荐了两款软件用于控制服务器 和 上传下载服务器文件:Xshell和Xftp。</p>\n<p>但是两款软件都是Windows系统的，没有macOS系统。</p>\n<p>如果你是Windows系统的，可移步郭霖大神的<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&amp;mid=2650240867&amp;idx=1&amp;sn=d56fceac5b343ccc4a90cd422c490df0&amp;chksm=8863860cbf140f1add1f86fab6267b28e0173350e571ac7192f9a794e2526cadf6dab765d8e2&amp;scene=38#wechat_redirect\" target=\"_blank\" rel=\"noopener\">搭建教程</a>，相对比较简单。</p>\n<p>那么如何在macOS系统下操作服务器呢？</p>\n<p>在<a href=\"http://www.jcloud.com/help/detail/360/isCateLog/1\" target=\"_blank\" rel=\"noopener\">京东云的帮助中心</a>中，macOS系统的登录方式有两种：一种是VNC登录，一种是SSH密钥登录。</p>\n<h4 id=\"VNC登录\"><a href=\"#VNC登录\" class=\"headerlink\" title=\"VNC登录\"></a>VNC登录</h4><p>VNC登录是京东云为用户提供的一种通过Web浏览器连接服务器的方式。</p>\n<p>很简单，就是在京东云的控制台点击远程连接即可。</p>\n<p>接着打开了Ubuntu 16.04 64的控制台，需要先进行登录，用户名为root，密码发送到了你的邮箱和手机当中。<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_0.png\" alt=\"登录面板\"></p>\n<p>如果想要修改密码，可在控制台-操作 进行修改。修改完成后记得重启生效。</p>\n<p>输入完成并正确就登录上了服务器，非常简单。<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_1.png\" alt=\"登录成功\"></p>\n<p>不过使用VNC登录的场景很少：</p>\n<ul>\n<li><p>查看云服务的启动进度</p>\n</li>\n<li><p>无法通过其他登录方式登录时，才使用VNC来登录服务器</p>\n</li>\n</ul>\n<p>所以这种登录方式，体验体验即可，并不实用。</p>\n<p>并且它不支持复制粘贴、不支持文件上传，而且是单点登录，使用起来简直是折磨。</p>\n<h4 id=\"SSH密钥登录\"><a href=\"#SSH密钥登录\" class=\"headerlink\" title=\"SSH密钥登录\"></a>SSH密钥登录</h4><p>京东云帮助中心提供了<a href=\"http://www.jcloud.com/help/detail/346/isCateLog/1\" target=\"_blank\" rel=\"noopener\">SSH创建和登录教程</a>。</p>\n<p>成功设置SSH密钥后，我们就可以不使用VNC登录，直接在Mac的命令行就可以进行服务器的登录。</p>\n<p>下面我们来一步一步设置SSH密钥：</p>\n<p>什么是SSH密钥？</p>\n<p>就我的理解而言，它是一种网络通讯协议，主要用于计算机之间的加密登录。</p>\n<p>使用SSH登录的具体流程如下：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_2.png\" alt=\"SSH密钥登录\"></p>\n<p>可以看出一个SSH串要提供给服务器和本机，当SSH串匹配成功后，就可以实现免密登录。</p>\n<p>这样的优点就是当登录请求被恶意拦截时，密码也不会泄露。</p>\n<p>接下来，我们就要生成SSH密钥，并保存到本机和服务器。</p>\n<p>要说一句的是，SSH密钥登录很多地方都有用到，比如GitHub。</p>\n<p>如果你的电脑已经有SSH密钥，那么直接使用这个即可。在我的理解下，一台电脑只能有一个SSH密钥。</p>\n<p>具体的SSH成功流程可参考<a href=\"https://help.github.com/articles/connecting-to-github-with-ssh/\" target=\"_blank\" rel=\"noopener\">GitHub官方教程</a>。</p>\n<p> 在这里我也简单罗列一下SSH密钥的生成步骤：</p>\n<p>1.校验本机是否已经生成SSH密钥：<br><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ls</span> -al ~<span class=\"string\">/.ssh</span></span><br></pre></td></tr></table></figure></p>\n<p>如果输出了<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id_dsa.pub</span><br><span class=\"line\">id_ecdsa.pub</span><br><span class=\"line\">id_ed25519.pub</span><br><span class=\"line\">id_rsa.pub</span><br></pre></td></tr></table></figure></p>\n<p>则代表已经生成过，直接跳过第二步，执行第三步。</p>\n<p>2.生成SSH密钥。如果已经生成跳过。<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注意修改最后的E-mail地址</span></span><br><span class=\"line\">ssh-keygen -t rsa -<span class=\"selector-tag\">b</span> <span class=\"number\">4096</span> -C <span class=\"string\">\"your_email@example.com\"</span></span><br></pre></td></tr></table></figure></p>\n<p>执行完成后，会让输入保存路径，直接按下回车，使用默认路径进行SSH密钥的保存就可以。</p>\n<p>接着会提示你输入该SSH的密钥密码，可以为空，直接回车，想设置的同学也可以进行设置。</p>\n<p>该SSH密钥密码用于第一次使用SSH时的校验，并可以在SSH密钥的配置文件中关闭SSH密钥密码校验。</p>\n<p>我是设置的，更多细节大家可以自己去查阅一些资料。</p>\n<p>3.复制SSH密钥。<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pbcopy &lt; ~<span class=\"regexp\">/.ssh/i</span>d_rsa.pub</span><br></pre></td></tr></table></figure></p>\n<p>使用该命令后，你的粘贴板内容就会变成SSH密钥。</p>\n<p>这次我们要将SSH密钥上传到我们自己的服务器里。</p>\n<p>打开京东云的控制板，添加SSH密钥：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/jd_server_use_3.png\" alt=\"京东云添加SSH密钥\"></p>\n<p>接着点击完成，Over。</p>\n<p>4.测试SSH密钥。<br>使用SSH密钥登录也非常简单。<br>打开我们Mac的命令行输入：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ssh</span> <span class=\"selector-tag\">user</span>@<span class=\"keyword\">xxx</span>.<span class=\"keyword\">xxx</span>.<span class=\"keyword\">xxx</span>.<span class=\"keyword\">xxx</span></span><br></pre></td></tr></table></figure></p>\n<p>user为用户名，我们的用户名为root。@之后为IP地址，比如：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ssh</span> <span class=\"selector-tag\">root</span>@<span class=\"keyword\">116</span>.<span class=\"keyword\">196</span>.<span class=\"keyword\">93</span>.<span class=\"keyword\">148</span></span><br></pre></td></tr></table></figure></p>\n<p>接着会提示输入用户输入服务器的登录密码，正确后就可以登录成功。</p>\n<p>如果失败，建议按照<a href=\"http://www.jcloud.com/help/detail/346/isCateLog/1\" target=\"_blank\" rel=\"noopener\">京东云帮助中心教程</a>，走一遍。</p>\n<h2 id=\"简单网页搭建\"><a href=\"#简单网页搭建\" class=\"headerlink\" title=\"简单网页搭建\"></a>简单网页搭建</h2><p>我们先为我们的服务器下载一个服务器，这里使用郭神用的apache2。</p>\n<p>apache2是专门用来显示静态网页的服务器程序。</p>\n<p>在登录服务器成功后输入下面命令：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> install apache2</span><br></pre></td></tr></table></figure></p>\n<p>接着输入Y完成安装。</p>\n<p>之后打开浏览器，输入我们服务器的IP，可以看到下面效果：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_4.png\" alt=\"\"></p>\n<p>接着我们来替换这个html文件样式。</p>\n<p>它在我们服务器的地址是：/var/www/html/index.html</p>\n<p>我们只要自己写一个简单的静态Html文件，然后上传服务器覆盖掉它即可。</p>\n<p>这里我们直接拿着郭神的简单html来做示范：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!Doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>京东云测试<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">body</span>&#123;<span class=\"attribute\">text-align</span>:center&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>欢迎来到郭霖的京东云主页<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      点击</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://guolin.tech\"</span>&gt;</span>这里<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      跳转到我的博客</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>将该文件保存为index.html。</p>\n<p>接着我们将该文件上传至服务器,这里有一篇<a href=\"http://www.jianshu.com/p/1afd25e7459d\" target=\"_blank\" rel=\"noopener\">mac向服务器上传文件的教程</a>。非常好用。<br>上传命令：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>注意将yourUsername修改为你的mac用户名</span><br><span class=\"line\"><span class=\"regexp\">//</span>并且我的文件保存在桌面Desktop。</span><br><span class=\"line\">put <span class=\"regexp\">/Users/y</span>ourUsername<span class=\"regexp\">/Desktop/i</span>ndex.html <span class=\"regexp\">/var/</span>www<span class=\"regexp\">/html</span></span><br></pre></td></tr></table></figure></p>\n<p>按照上述步骤后，我们成功将index.html上传至服务器并覆盖。<br>刷新我们的网页，可以看到下面效果：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_5.png\" alt=\"效果\"></p>\n<p>。。。。。。。</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/drop_table.jpeg\" alt=\"\"></p>\n<p>为什么显示源码！？</p>\n<p>因为Mac的记事本以.html结尾时，会将内容格式化成文本，不做代码显示。</p>\n<p>解决也很简单，<a href=\"https://www.zhihu.com/question/21887357\" target=\"_blank\" rel=\"noopener\">这篇文章</a>。</p>\n<p>解决后重新执行上传代码，重新刷新页面，效果如下：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/jd_server_6.png\" alt=\"效果\"></p>\n<p>简单查阅后，在head中添加如下代码即可：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta <span class=\"attribute\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attribute\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span> /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>接着再次执行文件上传，再次刷新页面，效果如下：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_7.png\" alt=\"效果\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>至此，一个非常简单的静态网页的个人博客便搭建完成了！</p>\n<p>写出这么个静态网页，带上这篇博客的出炉，一共耗时2天，走的弯路没有描述。</p>\n<p>其中包括Linux命令行控制、SSH密钥理解等，都是新知识，于我而言还是有很大提升的。</p>\n<p>以后如果用这个服务器，搭建一个动态的个人博客。</p>\n<p>想想还有些小激动呢！</p>\n"},{"title":"Hello GitHub+Hexo","date":"2017-05-03T07:43:57.000Z","_content":"今天使用GitHub Page + Hexo搭建了自己的博客，非常感谢[赵吉彤](http://jeasonstudio.github.io/)的[搭建教程](http://jeasonstudio.github.io/2016/05/26/Mac%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EGitHub-Page%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2/)。\n比想象中要简单，感兴趣的可以也试着搭建自己的博客。","source":"_posts/Hello_GitHub+Hexo.md","raw":"---\ntitle: Hello GitHub+Hexo\ndate: 2017-05-03 15:43:57\n---\n今天使用GitHub Page + Hexo搭建了自己的博客，非常感谢[赵吉彤](http://jeasonstudio.github.io/)的[搭建教程](http://jeasonstudio.github.io/2016/05/26/Mac%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EGitHub-Page%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2/)。\n比想象中要简单，感兴趣的可以也试着搭建自己的博客。","slug":"Hello_GitHub+Hexo","published":1,"updated":"2018-08-24T09:36:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7sxdwx0011hnnffeij37it","content":"<p>今天使用GitHub Page + Hexo搭建了自己的博客，非常感谢<a href=\"http://jeasonstudio.github.io/\" target=\"_blank\" rel=\"noopener\">赵吉彤</a>的<a href=\"http://jeasonstudio.github.io/2016/05/26/Mac%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EGitHub-Page%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2/\" target=\"_blank\" rel=\"noopener\">搭建教程</a>。<br>比想象中要简单，感兴趣的可以也试着搭建自己的博客。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天使用GitHub Page + Hexo搭建了自己的博客，非常感谢<a href=\"http://jeasonstudio.github.io/\" target=\"_blank\" rel=\"noopener\">赵吉彤</a>的<a href=\"http://jeasonstudio.github.io/2016/05/26/Mac%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EGitHub-Page%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2/\" target=\"_blank\" rel=\"noopener\">搭建教程</a>。<br>比想象中要简单，感兴趣的可以也试着搭建自己的博客。</p>\n"},{"title":"京东云主机使用(1)-使用Java+Tomcat开始开发","date":"2017-08-24T08:40:03.000Z","_content":"## 前言 ##\n[上一篇](http://www.jianshu.com/p/7493b1b98c1c)介绍了京东云主机的登录和简单的静态网页配置。\n\n这一篇主要讲述服务器开发环境的配置和部署。\n\n首先，实现服务器开发的语言特别多：Java、PHP、Node.JS、Python等。\n\n这里我选择的是Java+Tomcat+IDEA。\n\n所以本篇文章是围绕着这三者展开的。\n\n并且我们的服务器系统是：Ubuntu 16.04 64。 没看[上一篇](http://www.jianshu.com/p/7493b1b98c1c)的看官需要了解。\n## 环境配置 ##\n\n#### Java环境配置 ####\n首先我们先输入用户名密码登录我们的服务器：\n\n![登录成功](http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_1.png)\n\n接下来，我们先删除之前下载的apache2，这里我们已经用不到了：\n```\nsudo apt-get remove apache2\n```\n现在我们开始下载JDK，先切换目录：\n```\ncd /usr/local/\n```\n下载JDK：\n```\nsudo wget http://download.oracle.com/otn-pub/java/jdk/8u144-b01/090f390dda5b47b9b721c7dfaa008135/jdk-8u144-linux-x64.tar.gz\n```\n这个http链接对应的是写本篇文章时，最新版本的JDK地址。\n\n下载完成后，将其解压：\n```\ntar -xvzf jdk-8u144-linux-x64.tar.gz\n```\n解压完成后，删除压缩包：\n```\nrm jdk-8u144-linux-x64.tar.gz\n```\n到这里，下载步骤就算完成了，接着开始环境变量的配置：\n```\nvim /etc/profile\n```\nVim是Linux文件编辑模式，该命令会打开文件并可进行编辑。\n\n该命令的功能非常强大，如果之前你没有见过该命令，这次可以先稍微了解一下。\n\n[如果非要现在学习vim，可以参考此文。](http://pizn.github.io/2012/03/03/vim-commonly-used-command.html)\n\n这里我简单介绍一下该命令。\n\nVim命令有三种模式：普通模式、编辑模式、命令模式。\n\n顾名思义，想要编辑必须进入编辑模式，想要进行保存或是退出就要进入命令模式，平时浏览时处于普通模式即可。\n\n这里我们以刚才执行的命令开始进行讲解。\n\n在执行完`vim /etc/profile`后，会打开/etc/profile文件，此时默认处于普通模式。\n\n我们只需一直往下滑动，或是使用Ctrl+F/D，滑动到文件底部。\n\n接着将光标移动至内容的最下方，点击i/c/o进入编辑模式，复制以下内容：\n```\nJAVA_HOME=/usr/local/jdk1.8.0_144\nJAVA_BIN=/usr/local/jdk1.8.0_144/bin\nJRE_HOME=/usr/local/jdk1.8.0_144/jre\nPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin\nCLASSPATH=:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib\nexport JAVA_HOME JAVA_BIN JRE_HOME PATH CLASSPATH\n```\n如果各位看官修改了安装路径，这里注意要匹配。\n\n复制完成后，点击Esc，即可退出编辑模式。\n\n接着输入冒号（Shift+；），进入命令模式。\n\n输入wq，然后回车，进行文件的保存并退出Vim模式。\n\n至此，Java的环境变量应该已经配置成功，使用命令来刷新环境：\n```\nsource /etc/profile\n```\n接着输入：\n```\njava -version\n```\n如果效果如下：\n\n![Java环境测试](http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_0.png)\n\n代表环境变量已经配置成功。\n\n如果失败，请检查环境变量的路径是否正确，或是JDK是否安装成功。\n\n#### Tomcat环境配置 ####\n```\ncd /usr/local/\n```\n下载Tomcat压缩包:\n```\nsudo wget http://archive.apache.org/dist/tomcat/tomcat-8/v8.5.20/bin/apache-tomcat-8.5.20.tar.gz\n```\n该包的版本是Tomcat8.5.20，如果不适合你，可以去[Tomcat下载页](http://archive.apache.org/dist/tomcat)自行选择。\n\n接着进行解压：\n```\ntar zxvf apache-tomcat-8.5.20.tar.gz\n```\n解压完成后，这个文件的名字也太长了，我们重命名一下：\n```\nmv apache-tomcat-8.5.20 /usr/local/tomcat\n```\n接着拷贝catalina.sh\n```\ncp -p /usr/local/tomcat/bin/catalina.sh /etc/init.d/tomcat\n```\n开始配置环境：\n```\nvim /etc/init.d/tomcat\n```\n操作方式和之前描述的一样，在开头直接添加以下内容：\n```\nJAVA_HOME=/usr/local/jdk1.8.0_144\nCATALINA_HOME=/usr/local/tomcat\n\nchmod 755 /etc/init.d/tomcat\nchkconfig --add tomcat\nchkconfig tomcat on\n```\n至此，Tomcat的环境变量配置工作，已经完成。\n\n下面我们来启动Tomcat：\n```\nservice tomcat start\n```\n验证启动是否成功：\n```\nps -ef|grep tomcat\n```\n如果输出内容如下,则代表启动成功：\n![Tomcat启动成功](http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_2.png)\n\n如果输出内容如下，则代表失败：\n![Tomcat启动失败](http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_1.png)\n\n启动失败的原因基本上都是因为环境配置的问题，请仔细检查路径配置。\n\n启动成功后，在浏览器输入IP://8080,比如：\n```\n116.196.93.148:8080\n```\n即可看到如下效果：\n![Tomcat运行效果](http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_3.png)\n\n有些人说，我不想输入端口号，怎么办？\n```\nvim /usr/local/tomcat/conf/server.xml\n```\n执行上述命令打开Tomcat的配置文件，找到如下内容：\n\n![server修改端口号](http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use_4.png)\n\n进入编辑模式将port 改为 80 即可。\n\n如果你还买了域名，想要监听域名，找到如下内容：\n\n![server修改默认地址](http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use_5.png)\n\n进入编辑模式将name改为自己的域名即可。\n\n修改完成后进入命令模式输入wq保存并退出。\n\n接着重启Tomcat：\n```\nservice tomcat stop\nservice tomcat start\n```\n之后再访问的话，就不用带端口号了。\n\n如果你修改了Host-name，记得使用你修改的域名。\n\n至此，我们服务器的环境搭建工作就告一段落了。\n## HelloWeb ##\n接下来我们就要开始开发我们的Web项目了！\n\n这里我下载了[IntelliJ IDEA](https://www.jetbrains.com/idea/download/#section=mac)作为我的开发软件。\n\n这里注意要下载商业版，也就是Ultimate版。\n\nCommunity版是不支持Web开发的。\n\n下载完成后，我们需要为本机也装上Java和Tomcat。\n\n接着我们就可以开始开发HelloWorld了！\n\n具体的下载和开发流程，我这里就不介绍了，[参考此文](http://www.cnblogs.com/carsonzhu/p/5468223.html)。\n\n我就是按照一步一步来进行开发的。\n\n按照上述步骤开发完成后，我们的HelloWorld就已经在本机完成了。\n\n效果如下：\n\n![localhost:8080](http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_6.png)\n\n接着我们要将该项目部署到我们自己的服务器上，让所有人都可以访问！\n\n最基本的方法就是将项目达成War包，将War包上传至Linux服务器的Tomcat/webapps文件夹中。\n\n之后在访问时，Tomcat会自动将War包进行解压。\n\n传输的方法，可以参考上次说到的[Mac向服务器上传文件](http://www.jianshu.com/p/1afd25e7459d)。\n\nWindows的话可以使用Xshell。\n\n这里我们就不做过多介绍了，因为这种方式明显过于繁琐，每次修改项目都要重新生成War包并上传服务器。\n\n我希望我们可以像是在本机调试一样，修改完成后点击运行就可以看到效果。\n\n这就是我们接下来要做的事情。\n\n## Hello 热部署 ##\n我们首先登录自己的Linux服务器，切换到自己的Tomcat的bin目录下：\n```\n cd /usr/local/tomcat/bin/\n```\n接下来打开VIM模式，开始编辑**catalina.sh**文件：\n```\nvim catalina.sh\n```\n在文件的100行，也就是`# OS specific support.  $var _must_ be set to either true or false.`之上，添加如下代码：\n```\nexport CATALINA_OPTS=\"-Dcom.sun.management.jmxremote \n-Dcom.sun.management.jmxremote.port=9999 \n-Dcom.sun.management.jmxremote.ssl=false \n-Dcom.sun.management.jmxremote.authenticate=false \n-Djava.rmi.server.hostname=116.196.93.148\"\n\nexport JAVA_OPTS=\"-Dcom.sun.management.jmxremote\n-Dcom.sun.management.jmxremote.port=9999\n-Dcom.sun.management.jmxremote.ssl=false\n-Dcom.sun.management.jmxremote.authenticate=false\"\n```\n其中要注意的是，hostname为自己的IP地址，两个port设置为和本机不冲突的端口号即可，注意此端口号不是Tomcat的访问端口，要进行区分，比如我设置的就是9999，你也可以选择使用它。\n\n添加修改完成后保存退出，接下来要对自己的IP地址进行映射。先查看自己的用户名：\n```\nuname -n\n```\n将显示出来的用户名进行复制。\n\n接下来打开hosts文件：\n```\n vim /etc/hosts\n```\n添加如下代码：\n```\n127.0.1.1      复制的用户名\n::1     复制的用户名\n```\n注意不用删除和注释其他映射，只需添加即可。\n\n映射完成后，我们需要重启Tomcat：\n```\nservice tomcat stop\n```\n执行完后请确认是否关闭成功：\n```\nps -ef|grep tomcat\n```\n如果输出\n\n![Tomcat关闭失败](http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_2.png)\n\n则代表关闭失败，执行下句命令强制关闭：\n```\n//port为端口号，像上述图片中，端口为2392\nkill -9 port\n```\n接下来启动Tomcat，因为我们修改了**catalina.sh**，所以我们不能使用**startup.sh**来启动Tomcat，需使用：\n\n```\n//注意此时的目录还是在Tomcat/bin目录下\n// > /dev/null 2>&1 &  的含义是不显示启动日志\nsh catalina.sh run > /dev/null 2>&1 &\n```\n确认启动成功：\n```\nps -ef|grep tomcat\n```\n启动成功后，我们Linux服务器的配置就结束了！\n\n我们回到IDEA中，进行IDEA的配置。\n\n首先打开Configurations：\n\n![Configurations](http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_7.png)\n\n接着创建远端Tomcat：\n\n![创建远端Tomcat](http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use8.png)\n\n接着开始进行远端Tomcat的配置：\n\n![远端Tomcat配置](http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use_9.png)\n\nSFTP协议配置：\n\n![SFTP协议配置](http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use_10.png)\n\n接着添加部署项目：\n\n![添加项目](http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use_11.png)\n\n点击OK进行保存，接着我们选择使用远端Tomcat来部署并运行项目：\n\n![运行项目](http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use_12.png)\n\n如果出现以下效果：\n\n![运行失败](http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_13.png)\n\n代表连接远端失败，请仔细检查你的配置，此过程比较耗时。\n\n运行成功Log如下：\n\n![成功Log](http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_14.png)\n\n效果如下：\n\n![成功效果](http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_15.png)\n\n注意上图访问的IP，是我们Linux服务器的地址，也就代表我们成功将项目部署到了我们的服务器上。\n\n接着我们修改index.jsp，再次运行项目：\n\n![热部署效果](http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_16.png)\n\n可以看到我们修改的效果已经成功部署到服务器中。\n\n上文中的IP就是我的服务器IP，大家也可以访问的。\n\n\n## 总结 ##\n至此，我们已经成功使用IDEA+Tomcat+Java实现了项目的开发以及热部署。\n\n接下来就比较自由了，自己的项目就由自己去写了。\n\n可以搭建个人博客，可以搭建资源共享网页等等。\n\n各有各的风格，大家可以自行学习后台开发，搭建过程就不准备再写博客了。\n\n碰巧今天是七夕节，今天看文章的人都是敬业的程序员！\n\n噗哈哈哈，祝大家七夕节开心快乐！\n\n## 感谢 ##\n[搭建JDK+Tomcat](http://wiki.jikexueyuan.com/project/linux/tomcat.html)\n\n[Mac向服务器上传文件](http://www.jianshu.com/p/1afd25e7459d)\n\n[idea部署项目到远程tomcat](http://blog.csdn.net/tianjun2012/article/details/52795202)\n\n[Linux VIM命令使用](http://pizn.github.io/2012/03/03/vim-commonly-used-command.html)\n","source":"_posts/JD-Server-Use-Explain-1.md","raw":"---\ntitle: 京东云主机使用(1)-使用Java+Tomcat开始开发\ndate: 2017-08-24 16:40:03\ntags:\n   - 服务器\n   - SSH\n---\n## 前言 ##\n[上一篇](http://www.jianshu.com/p/7493b1b98c1c)介绍了京东云主机的登录和简单的静态网页配置。\n\n这一篇主要讲述服务器开发环境的配置和部署。\n\n首先，实现服务器开发的语言特别多：Java、PHP、Node.JS、Python等。\n\n这里我选择的是Java+Tomcat+IDEA。\n\n所以本篇文章是围绕着这三者展开的。\n\n并且我们的服务器系统是：Ubuntu 16.04 64。 没看[上一篇](http://www.jianshu.com/p/7493b1b98c1c)的看官需要了解。\n## 环境配置 ##\n\n#### Java环境配置 ####\n首先我们先输入用户名密码登录我们的服务器：\n\n![登录成功](http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_1.png)\n\n接下来，我们先删除之前下载的apache2，这里我们已经用不到了：\n```\nsudo apt-get remove apache2\n```\n现在我们开始下载JDK，先切换目录：\n```\ncd /usr/local/\n```\n下载JDK：\n```\nsudo wget http://download.oracle.com/otn-pub/java/jdk/8u144-b01/090f390dda5b47b9b721c7dfaa008135/jdk-8u144-linux-x64.tar.gz\n```\n这个http链接对应的是写本篇文章时，最新版本的JDK地址。\n\n下载完成后，将其解压：\n```\ntar -xvzf jdk-8u144-linux-x64.tar.gz\n```\n解压完成后，删除压缩包：\n```\nrm jdk-8u144-linux-x64.tar.gz\n```\n到这里，下载步骤就算完成了，接着开始环境变量的配置：\n```\nvim /etc/profile\n```\nVim是Linux文件编辑模式，该命令会打开文件并可进行编辑。\n\n该命令的功能非常强大，如果之前你没有见过该命令，这次可以先稍微了解一下。\n\n[如果非要现在学习vim，可以参考此文。](http://pizn.github.io/2012/03/03/vim-commonly-used-command.html)\n\n这里我简单介绍一下该命令。\n\nVim命令有三种模式：普通模式、编辑模式、命令模式。\n\n顾名思义，想要编辑必须进入编辑模式，想要进行保存或是退出就要进入命令模式，平时浏览时处于普通模式即可。\n\n这里我们以刚才执行的命令开始进行讲解。\n\n在执行完`vim /etc/profile`后，会打开/etc/profile文件，此时默认处于普通模式。\n\n我们只需一直往下滑动，或是使用Ctrl+F/D，滑动到文件底部。\n\n接着将光标移动至内容的最下方，点击i/c/o进入编辑模式，复制以下内容：\n```\nJAVA_HOME=/usr/local/jdk1.8.0_144\nJAVA_BIN=/usr/local/jdk1.8.0_144/bin\nJRE_HOME=/usr/local/jdk1.8.0_144/jre\nPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin\nCLASSPATH=:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib\nexport JAVA_HOME JAVA_BIN JRE_HOME PATH CLASSPATH\n```\n如果各位看官修改了安装路径，这里注意要匹配。\n\n复制完成后，点击Esc，即可退出编辑模式。\n\n接着输入冒号（Shift+；），进入命令模式。\n\n输入wq，然后回车，进行文件的保存并退出Vim模式。\n\n至此，Java的环境变量应该已经配置成功，使用命令来刷新环境：\n```\nsource /etc/profile\n```\n接着输入：\n```\njava -version\n```\n如果效果如下：\n\n![Java环境测试](http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_0.png)\n\n代表环境变量已经配置成功。\n\n如果失败，请检查环境变量的路径是否正确，或是JDK是否安装成功。\n\n#### Tomcat环境配置 ####\n```\ncd /usr/local/\n```\n下载Tomcat压缩包:\n```\nsudo wget http://archive.apache.org/dist/tomcat/tomcat-8/v8.5.20/bin/apache-tomcat-8.5.20.tar.gz\n```\n该包的版本是Tomcat8.5.20，如果不适合你，可以去[Tomcat下载页](http://archive.apache.org/dist/tomcat)自行选择。\n\n接着进行解压：\n```\ntar zxvf apache-tomcat-8.5.20.tar.gz\n```\n解压完成后，这个文件的名字也太长了，我们重命名一下：\n```\nmv apache-tomcat-8.5.20 /usr/local/tomcat\n```\n接着拷贝catalina.sh\n```\ncp -p /usr/local/tomcat/bin/catalina.sh /etc/init.d/tomcat\n```\n开始配置环境：\n```\nvim /etc/init.d/tomcat\n```\n操作方式和之前描述的一样，在开头直接添加以下内容：\n```\nJAVA_HOME=/usr/local/jdk1.8.0_144\nCATALINA_HOME=/usr/local/tomcat\n\nchmod 755 /etc/init.d/tomcat\nchkconfig --add tomcat\nchkconfig tomcat on\n```\n至此，Tomcat的环境变量配置工作，已经完成。\n\n下面我们来启动Tomcat：\n```\nservice tomcat start\n```\n验证启动是否成功：\n```\nps -ef|grep tomcat\n```\n如果输出内容如下,则代表启动成功：\n![Tomcat启动成功](http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_2.png)\n\n如果输出内容如下，则代表失败：\n![Tomcat启动失败](http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_1.png)\n\n启动失败的原因基本上都是因为环境配置的问题，请仔细检查路径配置。\n\n启动成功后，在浏览器输入IP://8080,比如：\n```\n116.196.93.148:8080\n```\n即可看到如下效果：\n![Tomcat运行效果](http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_3.png)\n\n有些人说，我不想输入端口号，怎么办？\n```\nvim /usr/local/tomcat/conf/server.xml\n```\n执行上述命令打开Tomcat的配置文件，找到如下内容：\n\n![server修改端口号](http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use_4.png)\n\n进入编辑模式将port 改为 80 即可。\n\n如果你还买了域名，想要监听域名，找到如下内容：\n\n![server修改默认地址](http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use_5.png)\n\n进入编辑模式将name改为自己的域名即可。\n\n修改完成后进入命令模式输入wq保存并退出。\n\n接着重启Tomcat：\n```\nservice tomcat stop\nservice tomcat start\n```\n之后再访问的话，就不用带端口号了。\n\n如果你修改了Host-name，记得使用你修改的域名。\n\n至此，我们服务器的环境搭建工作就告一段落了。\n## HelloWeb ##\n接下来我们就要开始开发我们的Web项目了！\n\n这里我下载了[IntelliJ IDEA](https://www.jetbrains.com/idea/download/#section=mac)作为我的开发软件。\n\n这里注意要下载商业版，也就是Ultimate版。\n\nCommunity版是不支持Web开发的。\n\n下载完成后，我们需要为本机也装上Java和Tomcat。\n\n接着我们就可以开始开发HelloWorld了！\n\n具体的下载和开发流程，我这里就不介绍了，[参考此文](http://www.cnblogs.com/carsonzhu/p/5468223.html)。\n\n我就是按照一步一步来进行开发的。\n\n按照上述步骤开发完成后，我们的HelloWorld就已经在本机完成了。\n\n效果如下：\n\n![localhost:8080](http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_6.png)\n\n接着我们要将该项目部署到我们自己的服务器上，让所有人都可以访问！\n\n最基本的方法就是将项目达成War包，将War包上传至Linux服务器的Tomcat/webapps文件夹中。\n\n之后在访问时，Tomcat会自动将War包进行解压。\n\n传输的方法，可以参考上次说到的[Mac向服务器上传文件](http://www.jianshu.com/p/1afd25e7459d)。\n\nWindows的话可以使用Xshell。\n\n这里我们就不做过多介绍了，因为这种方式明显过于繁琐，每次修改项目都要重新生成War包并上传服务器。\n\n我希望我们可以像是在本机调试一样，修改完成后点击运行就可以看到效果。\n\n这就是我们接下来要做的事情。\n\n## Hello 热部署 ##\n我们首先登录自己的Linux服务器，切换到自己的Tomcat的bin目录下：\n```\n cd /usr/local/tomcat/bin/\n```\n接下来打开VIM模式，开始编辑**catalina.sh**文件：\n```\nvim catalina.sh\n```\n在文件的100行，也就是`# OS specific support.  $var _must_ be set to either true or false.`之上，添加如下代码：\n```\nexport CATALINA_OPTS=\"-Dcom.sun.management.jmxremote \n-Dcom.sun.management.jmxremote.port=9999 \n-Dcom.sun.management.jmxremote.ssl=false \n-Dcom.sun.management.jmxremote.authenticate=false \n-Djava.rmi.server.hostname=116.196.93.148\"\n\nexport JAVA_OPTS=\"-Dcom.sun.management.jmxremote\n-Dcom.sun.management.jmxremote.port=9999\n-Dcom.sun.management.jmxremote.ssl=false\n-Dcom.sun.management.jmxremote.authenticate=false\"\n```\n其中要注意的是，hostname为自己的IP地址，两个port设置为和本机不冲突的端口号即可，注意此端口号不是Tomcat的访问端口，要进行区分，比如我设置的就是9999，你也可以选择使用它。\n\n添加修改完成后保存退出，接下来要对自己的IP地址进行映射。先查看自己的用户名：\n```\nuname -n\n```\n将显示出来的用户名进行复制。\n\n接下来打开hosts文件：\n```\n vim /etc/hosts\n```\n添加如下代码：\n```\n127.0.1.1      复制的用户名\n::1     复制的用户名\n```\n注意不用删除和注释其他映射，只需添加即可。\n\n映射完成后，我们需要重启Tomcat：\n```\nservice tomcat stop\n```\n执行完后请确认是否关闭成功：\n```\nps -ef|grep tomcat\n```\n如果输出\n\n![Tomcat关闭失败](http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_2.png)\n\n则代表关闭失败，执行下句命令强制关闭：\n```\n//port为端口号，像上述图片中，端口为2392\nkill -9 port\n```\n接下来启动Tomcat，因为我们修改了**catalina.sh**，所以我们不能使用**startup.sh**来启动Tomcat，需使用：\n\n```\n//注意此时的目录还是在Tomcat/bin目录下\n// > /dev/null 2>&1 &  的含义是不显示启动日志\nsh catalina.sh run > /dev/null 2>&1 &\n```\n确认启动成功：\n```\nps -ef|grep tomcat\n```\n启动成功后，我们Linux服务器的配置就结束了！\n\n我们回到IDEA中，进行IDEA的配置。\n\n首先打开Configurations：\n\n![Configurations](http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_7.png)\n\n接着创建远端Tomcat：\n\n![创建远端Tomcat](http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use8.png)\n\n接着开始进行远端Tomcat的配置：\n\n![远端Tomcat配置](http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use_9.png)\n\nSFTP协议配置：\n\n![SFTP协议配置](http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use_10.png)\n\n接着添加部署项目：\n\n![添加项目](http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use_11.png)\n\n点击OK进行保存，接着我们选择使用远端Tomcat来部署并运行项目：\n\n![运行项目](http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use_12.png)\n\n如果出现以下效果：\n\n![运行失败](http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_13.png)\n\n代表连接远端失败，请仔细检查你的配置，此过程比较耗时。\n\n运行成功Log如下：\n\n![成功Log](http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_14.png)\n\n效果如下：\n\n![成功效果](http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_15.png)\n\n注意上图访问的IP，是我们Linux服务器的地址，也就代表我们成功将项目部署到了我们的服务器上。\n\n接着我们修改index.jsp，再次运行项目：\n\n![热部署效果](http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_16.png)\n\n可以看到我们修改的效果已经成功部署到服务器中。\n\n上文中的IP就是我的服务器IP，大家也可以访问的。\n\n\n## 总结 ##\n至此，我们已经成功使用IDEA+Tomcat+Java实现了项目的开发以及热部署。\n\n接下来就比较自由了，自己的项目就由自己去写了。\n\n可以搭建个人博客，可以搭建资源共享网页等等。\n\n各有各的风格，大家可以自行学习后台开发，搭建过程就不准备再写博客了。\n\n碰巧今天是七夕节，今天看文章的人都是敬业的程序员！\n\n噗哈哈哈，祝大家七夕节开心快乐！\n\n## 感谢 ##\n[搭建JDK+Tomcat](http://wiki.jikexueyuan.com/project/linux/tomcat.html)\n\n[Mac向服务器上传文件](http://www.jianshu.com/p/1afd25e7459d)\n\n[idea部署项目到远程tomcat](http://blog.csdn.net/tianjun2012/article/details/52795202)\n\n[Linux VIM命令使用](http://pizn.github.io/2012/03/03/vim-commonly-used-command.html)\n","slug":"JD-Server-Use-Explain-1","published":1,"updated":"2018-08-24T09:36:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7sxdx00013hnnfoqjxcyce","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><a href=\"http://www.jianshu.com/p/7493b1b98c1c\" target=\"_blank\" rel=\"noopener\">上一篇</a>介绍了京东云主机的登录和简单的静态网页配置。</p>\n<p>这一篇主要讲述服务器开发环境的配置和部署。</p>\n<p>首先，实现服务器开发的语言特别多：Java、PHP、Node.JS、Python等。</p>\n<p>这里我选择的是Java+Tomcat+IDEA。</p>\n<p>所以本篇文章是围绕着这三者展开的。</p>\n<p>并且我们的服务器系统是：Ubuntu 16.04 64。 没看<a href=\"http://www.jianshu.com/p/7493b1b98c1c\" target=\"_blank\" rel=\"noopener\">上一篇</a>的看官需要了解。</p>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><h4 id=\"Java环境配置\"><a href=\"#Java环境配置\" class=\"headerlink\" title=\"Java环境配置\"></a>Java环境配置</h4><p>首先我们先输入用户名密码登录我们的服务器：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_1.png\" alt=\"登录成功\"></p>\n<p>接下来，我们先删除之前下载的apache2，这里我们已经用不到了：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> <span class=\"builtin-name\">remove</span> apache2</span><br></pre></td></tr></table></figure></p>\n<p>现在我们开始下载JDK，先切换目录：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/</span><br></pre></td></tr></table></figure></p>\n<p>下载JDK：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo wget http:<span class=\"regexp\">//</span>download.oracle.com<span class=\"regexp\">/otn-pub/</span>java<span class=\"regexp\">/jdk/</span><span class=\"number\">8</span>u144-b01<span class=\"regexp\">/090f390dda5b47b9b721c7dfaa008135/</span>jdk-<span class=\"number\">8</span>u144-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p>这个http链接对应的是写本篇文章时，最新版本的JDK地址。</p>\n<p>下载完成后，将其解压：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvzf jdk-<span class=\"number\">8</span>u144-linux-x64<span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span></span><br></pre></td></tr></table></figure></p>\n<p>解压完成后，删除压缩包：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm jdk-<span class=\"number\">8</span>u144-linux-x64<span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span></span><br></pre></td></tr></table></figure></p>\n<p>到这里，下载步骤就算完成了，接着开始环境变量的配置：<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">vim</span> /etc/<span class=\"keyword\">profile</span></span><br></pre></td></tr></table></figure></p>\n<p>Vim是Linux文件编辑模式，该命令会打开文件并可进行编辑。</p>\n<p>该命令的功能非常强大，如果之前你没有见过该命令，这次可以先稍微了解一下。</p>\n<p><a href=\"http://pizn.github.io/2012/03/03/vim-commonly-used-command.html\" target=\"_blank\" rel=\"noopener\">如果非要现在学习vim，可以参考此文。</a></p>\n<p>这里我简单介绍一下该命令。</p>\n<p>Vim命令有三种模式：普通模式、编辑模式、命令模式。</p>\n<p>顾名思义，想要编辑必须进入编辑模式，想要进行保存或是退出就要进入命令模式，平时浏览时处于普通模式即可。</p>\n<p>这里我们以刚才执行的命令开始进行讲解。</p>\n<p>在执行完<code>vim /etc/profile</code>后，会打开/etc/profile文件，此时默认处于普通模式。</p>\n<p>我们只需一直往下滑动，或是使用Ctrl+F/D，滑动到文件底部。</p>\n<p>接着将光标移动至内容的最下方，点击i/c/o进入编辑模式，复制以下内容：<br><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_HOME=<span class=\"regexp\">/usr/local</span><span class=\"regexp\">/jdk1.8.0_144</span></span><br><span class=\"line\"><span class=\"regexp\">JAVA_BIN=/usr</span><span class=\"regexp\">/local/jdk</span>1.<span class=\"number\">8.0_144</span>/bin</span><br><span class=\"line\">JRE_HOME=<span class=\"regexp\">/usr/local</span><span class=\"regexp\">/jdk1.8.0_144/jre</span></span><br><span class=\"line\">PATH=$<span class=\"symbol\">PATH:</span>$JAVA_HOME/<span class=\"symbol\">bin:</span>$JRE_HOME/bin</span><br><span class=\"line\">CLASSPATH=:$JAVA_HOME/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">dt</span>.<span class=\"title\">jar</span>:$<span class=\"title\">JAVA_HOME</span>/<span class=\"title\">lib</span>/<span class=\"title\">tools</span>.<span class=\"title\">jar</span>:$<span class=\"title\">JRE_HOME</span>/<span class=\"title\">lib</span></span></span><br><span class=\"line\">export JAVA_HOME JAVA_BIN JRE_HOME PATH CLASSPATH</span><br></pre></td></tr></table></figure></p>\n<p>如果各位看官修改了安装路径，这里注意要匹配。</p>\n<p>复制完成后，点击Esc，即可退出编辑模式。</p>\n<p>接着输入冒号（Shift+；），进入命令模式。</p>\n<p>输入wq，然后回车，进行文件的保存并退出Vim模式。</p>\n<p>至此，Java的环境变量应该已经配置成功，使用命令来刷新环境：<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">source</span> <span class=\"regexp\">/etc/</span>profile</span><br></pre></td></tr></table></figure></p>\n<p>接着输入：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -<span class=\"built_in\">version</span></span><br></pre></td></tr></table></figure></p>\n<p>如果效果如下：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_0.png\" alt=\"Java环境测试\"></p>\n<p>代表环境变量已经配置成功。</p>\n<p>如果失败，请检查环境变量的路径是否正确，或是JDK是否安装成功。</p>\n<h4 id=\"Tomcat环境配置\"><a href=\"#Tomcat环境配置\" class=\"headerlink\" title=\"Tomcat环境配置\"></a>Tomcat环境配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/</span><br></pre></td></tr></table></figure>\n<p>下载Tomcat压缩包:<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo wget http:<span class=\"regexp\">//</span>archive.apache.org<span class=\"regexp\">/dist/</span>tomcat<span class=\"regexp\">/tomcat-8/</span>v8.<span class=\"number\">5.20</span><span class=\"regexp\">/bin/</span>apache-tomcat-<span class=\"number\">8.5</span>.<span class=\"number\">20</span>.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p>该包的版本是Tomcat8.5.20，如果不适合你，可以去<a href=\"http://archive.apache.org/dist/tomcat\" target=\"_blank\" rel=\"noopener\">Tomcat下载页</a>自行选择。</p>\n<p>接着进行解压：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">tar</span> <span class=\"selector-tag\">zxvf</span> <span class=\"selector-tag\">apache-tomcat-8</span><span class=\"selector-class\">.5</span><span class=\"selector-class\">.20</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span></span><br></pre></td></tr></table></figure></p>\n<p>解压完成后，这个文件的名字也太长了，我们重命名一下：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv apache-tomcat<span class=\"number\">-8.5</span><span class=\"number\">.20</span> /usr/local/tomcat</span><br></pre></td></tr></table></figure></p>\n<p>接着拷贝catalina.sh<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -p <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/tomcat/</span>bin<span class=\"regexp\">/catalina.sh /</span>etc<span class=\"regexp\">/init.d/</span>tomcat</span><br></pre></td></tr></table></figure></p>\n<p>开始配置环境：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim <span class=\"regexp\">/etc/i</span>nit.d<span class=\"regexp\">/tomcat</span></span><br></pre></td></tr></table></figure></p>\n<p>操作方式和之前描述的一样，在开头直接添加以下内容：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">JAVA_HOME</span>=/usr/local/jdk1.8.0_144</span><br><span class=\"line\"><span class=\"attribute\">CATALINA_HOME</span>=/usr/local/tomcat</span><br><span class=\"line\"></span><br><span class=\"line\">chmod 755 /etc/init.d/tomcat</span><br><span class=\"line\">chkconfig --<span class=\"builtin-name\">add</span> tomcat</span><br><span class=\"line\">chkconfig tomcat on</span><br></pre></td></tr></table></figure></p>\n<p>至此，Tomcat的环境变量配置工作，已经完成。</p>\n<p>下面我们来启动Tomcat：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service tomcat <span class=\"literal\">start</span></span><br></pre></td></tr></table></figure></p>\n<p>验证启动是否成功：<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ps</span> -ef|<span class=\"keyword\">grep</span> tomcat</span><br></pre></td></tr></table></figure></p>\n<p>如果输出内容如下,则代表启动成功：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_2.png\" alt=\"Tomcat启动成功\"></p>\n<p>如果输出内容如下，则代表失败：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_1.png\" alt=\"Tomcat启动失败\"></p>\n<p>启动失败的原因基本上都是因为环境配置的问题，请仔细检查路径配置。</p>\n<p>启动成功后，在浏览器输入IP://8080,比如：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">116<span class=\"selector-class\">.196</span><span class=\"selector-class\">.93</span><span class=\"selector-class\">.148</span><span class=\"selector-pseudo\">:8080</span></span><br></pre></td></tr></table></figure></p>\n<p>即可看到如下效果：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_3.png\" alt=\"Tomcat运行效果\"></p>\n<p>有些人说，我不想输入端口号，怎么办？<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/tomcat/</span>conf<span class=\"regexp\">/server.xml</span></span><br></pre></td></tr></table></figure></p>\n<p>执行上述命令打开Tomcat的配置文件，找到如下内容：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use_4.png\" alt=\"server修改端口号\"></p>\n<p>进入编辑模式将port 改为 80 即可。</p>\n<p>如果你还买了域名，想要监听域名，找到如下内容：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use_5.png\" alt=\"server修改默认地址\"></p>\n<p>进入编辑模式将name改为自己的域名即可。</p>\n<p>修改完成后进入命令模式输入wq保存并退出。</p>\n<p>接着重启Tomcat：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service tomcat stop</span><br><span class=\"line\">service tomcat start</span><br></pre></td></tr></table></figure></p>\n<p>之后再访问的话，就不用带端口号了。</p>\n<p>如果你修改了Host-name，记得使用你修改的域名。</p>\n<p>至此，我们服务器的环境搭建工作就告一段落了。</p>\n<h2 id=\"HelloWeb\"><a href=\"#HelloWeb\" class=\"headerlink\" title=\"HelloWeb\"></a>HelloWeb</h2><p>接下来我们就要开始开发我们的Web项目了！</p>\n<p>这里我下载了<a href=\"https://www.jetbrains.com/idea/download/#section=mac\" target=\"_blank\" rel=\"noopener\">IntelliJ IDEA</a>作为我的开发软件。</p>\n<p>这里注意要下载商业版，也就是Ultimate版。</p>\n<p>Community版是不支持Web开发的。</p>\n<p>下载完成后，我们需要为本机也装上Java和Tomcat。</p>\n<p>接着我们就可以开始开发HelloWorld了！</p>\n<p>具体的下载和开发流程，我这里就不介绍了，<a href=\"http://www.cnblogs.com/carsonzhu/p/5468223.html\" target=\"_blank\" rel=\"noopener\">参考此文</a>。</p>\n<p>我就是按照一步一步来进行开发的。</p>\n<p>按照上述步骤开发完成后，我们的HelloWorld就已经在本机完成了。</p>\n<p>效果如下：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_6.png\" alt=\"localhost:8080\"></p>\n<p>接着我们要将该项目部署到我们自己的服务器上，让所有人都可以访问！</p>\n<p>最基本的方法就是将项目达成War包，将War包上传至Linux服务器的Tomcat/webapps文件夹中。</p>\n<p>之后在访问时，Tomcat会自动将War包进行解压。</p>\n<p>传输的方法，可以参考上次说到的<a href=\"http://www.jianshu.com/p/1afd25e7459d\" target=\"_blank\" rel=\"noopener\">Mac向服务器上传文件</a>。</p>\n<p>Windows的话可以使用Xshell。</p>\n<p>这里我们就不做过多介绍了，因为这种方式明显过于繁琐，每次修改项目都要重新生成War包并上传服务器。</p>\n<p>我希望我们可以像是在本机调试一样，修改完成后点击运行就可以看到效果。</p>\n<p>这就是我们接下来要做的事情。</p>\n<h2 id=\"Hello-热部署\"><a href=\"#Hello-热部署\" class=\"headerlink\" title=\"Hello 热部署\"></a>Hello 热部署</h2><p>我们首先登录自己的Linux服务器，切换到自己的Tomcat的bin目录下：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/tomcat/</span>bin<span class=\"regexp\">/</span></span><br></pre></td></tr></table></figure></p>\n<p>接下来打开VIM模式，开始编辑<strong>catalina.sh</strong>文件：<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">vim</span> catalina.<span class=\"keyword\">sh</span></span><br></pre></td></tr></table></figure></p>\n<p>在文件的100行，也就是<code># OS specific support.  $var _must_ be set to either true or false.</code>之上，添加如下代码：<br><figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export CATALINA_OPTS=\"-Dcom.sun.management.jmxremote </span><br><span class=\"line\">-<span class=\"ruby\">Dcom.sun.management.jmxremote.port=<span class=\"number\">9999</span> </span></span><br><span class=\"line\"><span class=\"ruby\">-Dcom.sun.management.jmxremote.ssl=<span class=\"literal\">false</span> </span></span><br><span class=\"line\"><span class=\"ruby\">-Dcom.sun.management.jmxremote.authenticate=<span class=\"literal\">false</span> </span></span><br><span class=\"line\"><span class=\"ruby\">-Djava.rmi.server.hostname=<span class=\"number\">116.196</span>.<span class=\"number\">93.148</span><span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"ruby\"></span></span><br><span class=\"line\"><span class=\"ruby\">export JAVA_OPTS=<span class=\"string\">\"-Dcom.sun.management.jmxremote</span></span></span><br><span class=\"line\"><span class=\"ruby\">-Dcom.sun.management.jmxremote.port=<span class=\"number\">9999</span></span></span><br><span class=\"line\"><span class=\"ruby\">-Dcom.sun.management.jmxremote.ssl=<span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"ruby\">-Dcom.sun.management.jmxremote.authenticate=<span class=\"literal\">false</span><span class=\"string\">\"</span></span></span><br></pre></td></tr></table></figure></p>\n<p>其中要注意的是，hostname为自己的IP地址，两个port设置为和本机不冲突的端口号即可，注意此端口号不是Tomcat的访问端口，要进行区分，比如我设置的就是9999，你也可以选择使用它。</p>\n<p>添加修改完成后保存退出，接下来要对自己的IP地址进行映射。先查看自己的用户名：<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">uname -n</span></span><br></pre></td></tr></table></figure></p>\n<p>将显示出来的用户名进行复制。</p>\n<p>接下来打开hosts文件：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim <span class=\"regexp\">/etc/</span>hosts</span><br></pre></td></tr></table></figure></p>\n<p>添加如下代码：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127<span class=\"selector-class\">.0</span><span class=\"selector-class\">.1</span><span class=\"selector-class\">.1</span>      复制的用户名</span><br><span class=\"line\"><span class=\"selector-pseudo\">::1</span>     复制的用户名</span><br></pre></td></tr></table></figure></p>\n<p>注意不用删除和注释其他映射，只需添加即可。</p>\n<p>映射完成后，我们需要重启Tomcat：<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service tomcat <span class=\"built_in\">stop</span></span><br></pre></td></tr></table></figure></p>\n<p>执行完后请确认是否关闭成功：<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ps</span> -ef|<span class=\"keyword\">grep</span> tomcat</span><br></pre></td></tr></table></figure></p>\n<p>如果输出</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_2.png\" alt=\"Tomcat关闭失败\"></p>\n<p>则代表关闭失败，执行下句命令强制关闭：<br><figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//port为端口号，像上述图片中，端口为2392</span></span><br><span class=\"line\"><span class=\"keyword\">kill</span> -<span class=\"number\">9</span> port</span><br></pre></td></tr></table></figure></p>\n<p>接下来启动Tomcat，因为我们修改了<strong>catalina.sh</strong>，所以我们不能使用<strong>startup.sh</strong>来启动Tomcat，需使用：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注意此时的目录还是在Tomcat/bin目录下</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; /dev/null 2&gt;&amp;1 &amp;  的含义是不显示启动日志</span></span><br><span class=\"line\"><span class=\"keyword\">sh</span> catalina.<span class=\"keyword\">sh</span> <span class=\"keyword\">run</span> &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n<p>确认启动成功：<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ps</span> -ef|<span class=\"keyword\">grep</span> tomcat</span><br></pre></td></tr></table></figure></p>\n<p>启动成功后，我们Linux服务器的配置就结束了！</p>\n<p>我们回到IDEA中，进行IDEA的配置。</p>\n<p>首先打开Configurations：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_7.png\" alt=\"Configurations\"></p>\n<p>接着创建远端Tomcat：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use8.png\" alt=\"创建远端Tomcat\"></p>\n<p>接着开始进行远端Tomcat的配置：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use_9.png\" alt=\"远端Tomcat配置\"></p>\n<p>SFTP协议配置：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use_10.png\" alt=\"SFTP协议配置\"></p>\n<p>接着添加部署项目：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use_11.png\" alt=\"添加项目\"></p>\n<p>点击OK进行保存，接着我们选择使用远端Tomcat来部署并运行项目：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use_12.png\" alt=\"运行项目\"></p>\n<p>如果出现以下效果：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_13.png\" alt=\"运行失败\"></p>\n<p>代表连接远端失败，请仔细检查你的配置，此过程比较耗时。</p>\n<p>运行成功Log如下：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_14.png\" alt=\"成功Log\"></p>\n<p>效果如下：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_15.png\" alt=\"成功效果\"></p>\n<p>注意上图访问的IP，是我们Linux服务器的地址，也就代表我们成功将项目部署到了我们的服务器上。</p>\n<p>接着我们修改index.jsp，再次运行项目：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_16.png\" alt=\"热部署效果\"></p>\n<p>可以看到我们修改的效果已经成功部署到服务器中。</p>\n<p>上文中的IP就是我的服务器IP，大家也可以访问的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>至此，我们已经成功使用IDEA+Tomcat+Java实现了项目的开发以及热部署。</p>\n<p>接下来就比较自由了，自己的项目就由自己去写了。</p>\n<p>可以搭建个人博客，可以搭建资源共享网页等等。</p>\n<p>各有各的风格，大家可以自行学习后台开发，搭建过程就不准备再写博客了。</p>\n<p>碰巧今天是七夕节，今天看文章的人都是敬业的程序员！</p>\n<p>噗哈哈哈，祝大家七夕节开心快乐！</p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p><a href=\"http://wiki.jikexueyuan.com/project/linux/tomcat.html\" target=\"_blank\" rel=\"noopener\">搭建JDK+Tomcat</a></p>\n<p><a href=\"http://www.jianshu.com/p/1afd25e7459d\" target=\"_blank\" rel=\"noopener\">Mac向服务器上传文件</a></p>\n<p><a href=\"http://blog.csdn.net/tianjun2012/article/details/52795202\" target=\"_blank\" rel=\"noopener\">idea部署项目到远程tomcat</a></p>\n<p><a href=\"http://pizn.github.io/2012/03/03/vim-commonly-used-command.html\" target=\"_blank\" rel=\"noopener\">Linux VIM命令使用</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><a href=\"http://www.jianshu.com/p/7493b1b98c1c\" target=\"_blank\" rel=\"noopener\">上一篇</a>介绍了京东云主机的登录和简单的静态网页配置。</p>\n<p>这一篇主要讲述服务器开发环境的配置和部署。</p>\n<p>首先，实现服务器开发的语言特别多：Java、PHP、Node.JS、Python等。</p>\n<p>这里我选择的是Java+Tomcat+IDEA。</p>\n<p>所以本篇文章是围绕着这三者展开的。</p>\n<p>并且我们的服务器系统是：Ubuntu 16.04 64。 没看<a href=\"http://www.jianshu.com/p/7493b1b98c1c\" target=\"_blank\" rel=\"noopener\">上一篇</a>的看官需要了解。</p>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><h4 id=\"Java环境配置\"><a href=\"#Java环境配置\" class=\"headerlink\" title=\"Java环境配置\"></a>Java环境配置</h4><p>首先我们先输入用户名密码登录我们的服务器：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd_server_use_1.png\" alt=\"登录成功\"></p>\n<p>接下来，我们先删除之前下载的apache2，这里我们已经用不到了：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> <span class=\"builtin-name\">remove</span> apache2</span><br></pre></td></tr></table></figure></p>\n<p>现在我们开始下载JDK，先切换目录：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/</span><br></pre></td></tr></table></figure></p>\n<p>下载JDK：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo wget http:<span class=\"regexp\">//</span>download.oracle.com<span class=\"regexp\">/otn-pub/</span>java<span class=\"regexp\">/jdk/</span><span class=\"number\">8</span>u144-b01<span class=\"regexp\">/090f390dda5b47b9b721c7dfaa008135/</span>jdk-<span class=\"number\">8</span>u144-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p>这个http链接对应的是写本篇文章时，最新版本的JDK地址。</p>\n<p>下载完成后，将其解压：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvzf jdk-<span class=\"number\">8</span>u144-linux-x64<span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span></span><br></pre></td></tr></table></figure></p>\n<p>解压完成后，删除压缩包：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm jdk-<span class=\"number\">8</span>u144-linux-x64<span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span></span><br></pre></td></tr></table></figure></p>\n<p>到这里，下载步骤就算完成了，接着开始环境变量的配置：<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">vim</span> /etc/<span class=\"keyword\">profile</span></span><br></pre></td></tr></table></figure></p>\n<p>Vim是Linux文件编辑模式，该命令会打开文件并可进行编辑。</p>\n<p>该命令的功能非常强大，如果之前你没有见过该命令，这次可以先稍微了解一下。</p>\n<p><a href=\"http://pizn.github.io/2012/03/03/vim-commonly-used-command.html\" target=\"_blank\" rel=\"noopener\">如果非要现在学习vim，可以参考此文。</a></p>\n<p>这里我简单介绍一下该命令。</p>\n<p>Vim命令有三种模式：普通模式、编辑模式、命令模式。</p>\n<p>顾名思义，想要编辑必须进入编辑模式，想要进行保存或是退出就要进入命令模式，平时浏览时处于普通模式即可。</p>\n<p>这里我们以刚才执行的命令开始进行讲解。</p>\n<p>在执行完<code>vim /etc/profile</code>后，会打开/etc/profile文件，此时默认处于普通模式。</p>\n<p>我们只需一直往下滑动，或是使用Ctrl+F/D，滑动到文件底部。</p>\n<p>接着将光标移动至内容的最下方，点击i/c/o进入编辑模式，复制以下内容：<br><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_HOME=<span class=\"regexp\">/usr/local</span><span class=\"regexp\">/jdk1.8.0_144</span></span><br><span class=\"line\"><span class=\"regexp\">JAVA_BIN=/usr</span><span class=\"regexp\">/local/jdk</span>1.<span class=\"number\">8.0_144</span>/bin</span><br><span class=\"line\">JRE_HOME=<span class=\"regexp\">/usr/local</span><span class=\"regexp\">/jdk1.8.0_144/jre</span></span><br><span class=\"line\">PATH=$<span class=\"symbol\">PATH:</span>$JAVA_HOME/<span class=\"symbol\">bin:</span>$JRE_HOME/bin</span><br><span class=\"line\">CLASSPATH=:$JAVA_HOME/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">dt</span>.<span class=\"title\">jar</span>:$<span class=\"title\">JAVA_HOME</span>/<span class=\"title\">lib</span>/<span class=\"title\">tools</span>.<span class=\"title\">jar</span>:$<span class=\"title\">JRE_HOME</span>/<span class=\"title\">lib</span></span></span><br><span class=\"line\">export JAVA_HOME JAVA_BIN JRE_HOME PATH CLASSPATH</span><br></pre></td></tr></table></figure></p>\n<p>如果各位看官修改了安装路径，这里注意要匹配。</p>\n<p>复制完成后，点击Esc，即可退出编辑模式。</p>\n<p>接着输入冒号（Shift+；），进入命令模式。</p>\n<p>输入wq，然后回车，进行文件的保存并退出Vim模式。</p>\n<p>至此，Java的环境变量应该已经配置成功，使用命令来刷新环境：<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">source</span> <span class=\"regexp\">/etc/</span>profile</span><br></pre></td></tr></table></figure></p>\n<p>接着输入：<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -<span class=\"built_in\">version</span></span><br></pre></td></tr></table></figure></p>\n<p>如果效果如下：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_0.png\" alt=\"Java环境测试\"></p>\n<p>代表环境变量已经配置成功。</p>\n<p>如果失败，请检查环境变量的路径是否正确，或是JDK是否安装成功。</p>\n<h4 id=\"Tomcat环境配置\"><a href=\"#Tomcat环境配置\" class=\"headerlink\" title=\"Tomcat环境配置\"></a>Tomcat环境配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/</span><br></pre></td></tr></table></figure>\n<p>下载Tomcat压缩包:<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo wget http:<span class=\"regexp\">//</span>archive.apache.org<span class=\"regexp\">/dist/</span>tomcat<span class=\"regexp\">/tomcat-8/</span>v8.<span class=\"number\">5.20</span><span class=\"regexp\">/bin/</span>apache-tomcat-<span class=\"number\">8.5</span>.<span class=\"number\">20</span>.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p>该包的版本是Tomcat8.5.20，如果不适合你，可以去<a href=\"http://archive.apache.org/dist/tomcat\" target=\"_blank\" rel=\"noopener\">Tomcat下载页</a>自行选择。</p>\n<p>接着进行解压：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">tar</span> <span class=\"selector-tag\">zxvf</span> <span class=\"selector-tag\">apache-tomcat-8</span><span class=\"selector-class\">.5</span><span class=\"selector-class\">.20</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span></span><br></pre></td></tr></table></figure></p>\n<p>解压完成后，这个文件的名字也太长了，我们重命名一下：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv apache-tomcat<span class=\"number\">-8.5</span><span class=\"number\">.20</span> /usr/local/tomcat</span><br></pre></td></tr></table></figure></p>\n<p>接着拷贝catalina.sh<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -p <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/tomcat/</span>bin<span class=\"regexp\">/catalina.sh /</span>etc<span class=\"regexp\">/init.d/</span>tomcat</span><br></pre></td></tr></table></figure></p>\n<p>开始配置环境：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim <span class=\"regexp\">/etc/i</span>nit.d<span class=\"regexp\">/tomcat</span></span><br></pre></td></tr></table></figure></p>\n<p>操作方式和之前描述的一样，在开头直接添加以下内容：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">JAVA_HOME</span>=/usr/local/jdk1.8.0_144</span><br><span class=\"line\"><span class=\"attribute\">CATALINA_HOME</span>=/usr/local/tomcat</span><br><span class=\"line\"></span><br><span class=\"line\">chmod 755 /etc/init.d/tomcat</span><br><span class=\"line\">chkconfig --<span class=\"builtin-name\">add</span> tomcat</span><br><span class=\"line\">chkconfig tomcat on</span><br></pre></td></tr></table></figure></p>\n<p>至此，Tomcat的环境变量配置工作，已经完成。</p>\n<p>下面我们来启动Tomcat：<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service tomcat <span class=\"literal\">start</span></span><br></pre></td></tr></table></figure></p>\n<p>验证启动是否成功：<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ps</span> -ef|<span class=\"keyword\">grep</span> tomcat</span><br></pre></td></tr></table></figure></p>\n<p>如果输出内容如下,则代表启动成功：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_2.png\" alt=\"Tomcat启动成功\"></p>\n<p>如果输出内容如下，则代表失败：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_1.png\" alt=\"Tomcat启动失败\"></p>\n<p>启动失败的原因基本上都是因为环境配置的问题，请仔细检查路径配置。</p>\n<p>启动成功后，在浏览器输入IP://8080,比如：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">116<span class=\"selector-class\">.196</span><span class=\"selector-class\">.93</span><span class=\"selector-class\">.148</span><span class=\"selector-pseudo\">:8080</span></span><br></pre></td></tr></table></figure></p>\n<p>即可看到如下效果：<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_3.png\" alt=\"Tomcat运行效果\"></p>\n<p>有些人说，我不想输入端口号，怎么办？<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/tomcat/</span>conf<span class=\"regexp\">/server.xml</span></span><br></pre></td></tr></table></figure></p>\n<p>执行上述命令打开Tomcat的配置文件，找到如下内容：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use_4.png\" alt=\"server修改端口号\"></p>\n<p>进入编辑模式将port 改为 80 即可。</p>\n<p>如果你还买了域名，想要监听域名，找到如下内容：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use_5.png\" alt=\"server修改默认地址\"></p>\n<p>进入编辑模式将name改为自己的域名即可。</p>\n<p>修改完成后进入命令模式输入wq保存并退出。</p>\n<p>接着重启Tomcat：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service tomcat stop</span><br><span class=\"line\">service tomcat start</span><br></pre></td></tr></table></figure></p>\n<p>之后再访问的话，就不用带端口号了。</p>\n<p>如果你修改了Host-name，记得使用你修改的域名。</p>\n<p>至此，我们服务器的环境搭建工作就告一段落了。</p>\n<h2 id=\"HelloWeb\"><a href=\"#HelloWeb\" class=\"headerlink\" title=\"HelloWeb\"></a>HelloWeb</h2><p>接下来我们就要开始开发我们的Web项目了！</p>\n<p>这里我下载了<a href=\"https://www.jetbrains.com/idea/download/#section=mac\" target=\"_blank\" rel=\"noopener\">IntelliJ IDEA</a>作为我的开发软件。</p>\n<p>这里注意要下载商业版，也就是Ultimate版。</p>\n<p>Community版是不支持Web开发的。</p>\n<p>下载完成后，我们需要为本机也装上Java和Tomcat。</p>\n<p>接着我们就可以开始开发HelloWorld了！</p>\n<p>具体的下载和开发流程，我这里就不介绍了，<a href=\"http://www.cnblogs.com/carsonzhu/p/5468223.html\" target=\"_blank\" rel=\"noopener\">参考此文</a>。</p>\n<p>我就是按照一步一步来进行开发的。</p>\n<p>按照上述步骤开发完成后，我们的HelloWorld就已经在本机完成了。</p>\n<p>效果如下：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_6.png\" alt=\"localhost:8080\"></p>\n<p>接着我们要将该项目部署到我们自己的服务器上，让所有人都可以访问！</p>\n<p>最基本的方法就是将项目达成War包，将War包上传至Linux服务器的Tomcat/webapps文件夹中。</p>\n<p>之后在访问时，Tomcat会自动将War包进行解压。</p>\n<p>传输的方法，可以参考上次说到的<a href=\"http://www.jianshu.com/p/1afd25e7459d\" target=\"_blank\" rel=\"noopener\">Mac向服务器上传文件</a>。</p>\n<p>Windows的话可以使用Xshell。</p>\n<p>这里我们就不做过多介绍了，因为这种方式明显过于繁琐，每次修改项目都要重新生成War包并上传服务器。</p>\n<p>我希望我们可以像是在本机调试一样，修改完成后点击运行就可以看到效果。</p>\n<p>这就是我们接下来要做的事情。</p>\n<h2 id=\"Hello-热部署\"><a href=\"#Hello-热部署\" class=\"headerlink\" title=\"Hello 热部署\"></a>Hello 热部署</h2><p>我们首先登录自己的Linux服务器，切换到自己的Tomcat的bin目录下：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd <span class=\"regexp\">/usr/</span>local<span class=\"regexp\">/tomcat/</span>bin<span class=\"regexp\">/</span></span><br></pre></td></tr></table></figure></p>\n<p>接下来打开VIM模式，开始编辑<strong>catalina.sh</strong>文件：<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">vim</span> catalina.<span class=\"keyword\">sh</span></span><br></pre></td></tr></table></figure></p>\n<p>在文件的100行，也就是<code># OS specific support.  $var _must_ be set to either true or false.</code>之上，添加如下代码：<br><figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export CATALINA_OPTS=\"-Dcom.sun.management.jmxremote </span><br><span class=\"line\">-<span class=\"ruby\">Dcom.sun.management.jmxremote.port=<span class=\"number\">9999</span> </span></span><br><span class=\"line\"><span class=\"ruby\">-Dcom.sun.management.jmxremote.ssl=<span class=\"literal\">false</span> </span></span><br><span class=\"line\"><span class=\"ruby\">-Dcom.sun.management.jmxremote.authenticate=<span class=\"literal\">false</span> </span></span><br><span class=\"line\"><span class=\"ruby\">-Djava.rmi.server.hostname=<span class=\"number\">116.196</span>.<span class=\"number\">93.148</span><span class=\"string\">\"</span></span></span><br><span class=\"line\"><span class=\"ruby\"></span></span><br><span class=\"line\"><span class=\"ruby\">export JAVA_OPTS=<span class=\"string\">\"-Dcom.sun.management.jmxremote</span></span></span><br><span class=\"line\"><span class=\"ruby\">-Dcom.sun.management.jmxremote.port=<span class=\"number\">9999</span></span></span><br><span class=\"line\"><span class=\"ruby\">-Dcom.sun.management.jmxremote.ssl=<span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"ruby\">-Dcom.sun.management.jmxremote.authenticate=<span class=\"literal\">false</span><span class=\"string\">\"</span></span></span><br></pre></td></tr></table></figure></p>\n<p>其中要注意的是，hostname为自己的IP地址，两个port设置为和本机不冲突的端口号即可，注意此端口号不是Tomcat的访问端口，要进行区分，比如我设置的就是9999，你也可以选择使用它。</p>\n<p>添加修改完成后保存退出，接下来要对自己的IP地址进行映射。先查看自己的用户名：<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">uname -n</span></span><br></pre></td></tr></table></figure></p>\n<p>将显示出来的用户名进行复制。</p>\n<p>接下来打开hosts文件：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim <span class=\"regexp\">/etc/</span>hosts</span><br></pre></td></tr></table></figure></p>\n<p>添加如下代码：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127<span class=\"selector-class\">.0</span><span class=\"selector-class\">.1</span><span class=\"selector-class\">.1</span>      复制的用户名</span><br><span class=\"line\"><span class=\"selector-pseudo\">::1</span>     复制的用户名</span><br></pre></td></tr></table></figure></p>\n<p>注意不用删除和注释其他映射，只需添加即可。</p>\n<p>映射完成后，我们需要重启Tomcat：<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service tomcat <span class=\"built_in\">stop</span></span><br></pre></td></tr></table></figure></p>\n<p>执行完后请确认是否关闭成功：<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ps</span> -ef|<span class=\"keyword\">grep</span> tomcat</span><br></pre></td></tr></table></figure></p>\n<p>如果输出</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_2.png\" alt=\"Tomcat关闭失败\"></p>\n<p>则代表关闭失败，执行下句命令强制关闭：<br><figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//port为端口号，像上述图片中，端口为2392</span></span><br><span class=\"line\"><span class=\"keyword\">kill</span> -<span class=\"number\">9</span> port</span><br></pre></td></tr></table></figure></p>\n<p>接下来启动Tomcat，因为我们修改了<strong>catalina.sh</strong>，所以我们不能使用<strong>startup.sh</strong>来启动Tomcat，需使用：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注意此时的目录还是在Tomcat/bin目录下</span></span><br><span class=\"line\"><span class=\"comment\">// &gt; /dev/null 2&gt;&amp;1 &amp;  的含义是不显示启动日志</span></span><br><span class=\"line\"><span class=\"keyword\">sh</span> catalina.<span class=\"keyword\">sh</span> <span class=\"keyword\">run</span> &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n<p>确认启动成功：<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ps</span> -ef|<span class=\"keyword\">grep</span> tomcat</span><br></pre></td></tr></table></figure></p>\n<p>启动成功后，我们Linux服务器的配置就结束了！</p>\n<p>我们回到IDEA中，进行IDEA的配置。</p>\n<p>首先打开Configurations：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_7.png\" alt=\"Configurations\"></p>\n<p>接着创建远端Tomcat：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use8.png\" alt=\"创建远端Tomcat\"></p>\n<p>接着开始进行远端Tomcat的配置：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use_9.png\" alt=\"远端Tomcat配置\"></p>\n<p>SFTP协议配置：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use_10.png\" alt=\"SFTP协议配置\"></p>\n<p>接着添加部署项目：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use_11.png\" alt=\"添加项目\"></p>\n<p>点击OK进行保存，接着我们选择使用远端Tomcat来部署并运行项目：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/jd1_server_use_12.png\" alt=\"运行项目\"></p>\n<p>如果出现以下效果：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_13.png\" alt=\"运行失败\"></p>\n<p>代表连接远端失败，请仔细检查你的配置，此过程比较耗时。</p>\n<p>运行成功Log如下：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_14.png\" alt=\"成功Log\"></p>\n<p>效果如下：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_15.png\" alt=\"成功效果\"></p>\n<p>注意上图访问的IP，是我们Linux服务器的地址，也就代表我们成功将项目部署到了我们的服务器上。</p>\n<p>接着我们修改index.jsp，再次运行项目：</p>\n<p><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/server/jd1_server_use_16.png\" alt=\"热部署效果\"></p>\n<p>可以看到我们修改的效果已经成功部署到服务器中。</p>\n<p>上文中的IP就是我的服务器IP，大家也可以访问的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>至此，我们已经成功使用IDEA+Tomcat+Java实现了项目的开发以及热部署。</p>\n<p>接下来就比较自由了，自己的项目就由自己去写了。</p>\n<p>可以搭建个人博客，可以搭建资源共享网页等等。</p>\n<p>各有各的风格，大家可以自行学习后台开发，搭建过程就不准备再写博客了。</p>\n<p>碰巧今天是七夕节，今天看文章的人都是敬业的程序员！</p>\n<p>噗哈哈哈，祝大家七夕节开心快乐！</p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p><a href=\"http://wiki.jikexueyuan.com/project/linux/tomcat.html\" target=\"_blank\" rel=\"noopener\">搭建JDK+Tomcat</a></p>\n<p><a href=\"http://www.jianshu.com/p/1afd25e7459d\" target=\"_blank\" rel=\"noopener\">Mac向服务器上传文件</a></p>\n<p><a href=\"http://blog.csdn.net/tianjun2012/article/details/52795202\" target=\"_blank\" rel=\"noopener\">idea部署项目到远程tomcat</a></p>\n<p><a href=\"http://pizn.github.io/2012/03/03/vim-commonly-used-command.html\" target=\"_blank\" rel=\"noopener\">Linux VIM命令使用</a></p>\n"},{"title":"理解面向对象","date":"2017-05-08T07:10:09.000Z","_content":"面向对象是一种软件开发的方法，同类的还有面向过程。\n面向对象指的是在程序设计中采用Java的封装、继承、多态、六大原则特性来设计代码。\n它其实考验的是你审视代码的角度，运用这些特性，可以写出让人赏心悦目、简单易懂的代码。\n不运用这些特性当然也可以进行开发。不过代码的可读性、扩展性、灵活性等会大大下降，冗余度、维护成本等会大大上升。\n\n## 封装 ##\n1. 概念\n在Java中，封装就是将一些通用、常用的功能方法写到一个新类中，那么当我们用到这些功能时，直接去调用这个新类中的方法即可。这就像是有一个人A，他拥有一些技能，当我用到这些技能时，不需要自己去学习这些技能，只需要去找A即可。\n2. 优点\n提高代码的重用，减少重复代码，提高代码的可读性、方便理解。而且封装的思想也对应了Java中**一处编程，到处执行**的思想。\n3. 实例\n实例就不用多说了，平时写代码我们总会自己创建一个utils包，存放一些自己或者别人写的utils类。\n\n\n## 继承 ##\n1. 概念\n继承是从已有的类中派生出新的类，新的类能吸收已有类的数据属性和行为，并能扩展新的能力（来自[百度百科](http://baike.baidu.com/link?url=rbdZPwv35frNtyyl5BNnTXN2y9xCnTKldC3Bi4pyMySKda51KlD5Gk46IIUt1cNKrBiZoThiu0Rj76UmCJJXOFvv87kxMxSBYQtgrCbRA2u)）。\n这种官方语言太难讲，而且各位看官也看着费劲。我还是直接说自己的理解吧。\n首先继承的含义，就是一直我们口中所说的父类（基类）和子类。子类通过关键字`extends`继承父类，就可以拥有父类的非私有的属性和方法。\n**在Java中，继承是单一继承+多层继承的。**\n2. 优点\n提高代码的重用，减少重复的代码。增加了软件开发的灵活性。\n3. 缺点\n由于多层继承的存在，所以无限使用继承特性的话，会造成子类的过度冗余。\n\n## 多态 ##\n1. 概念\n多态指的是同一个方法，会因为对象的不同导致不同的结果。\n没错，就是这样！\n![](http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/heirenwenhao_2.jpg)\n多态的三要素一定要知道。这个东西理解了自然就记住了。\n**继承、重写、父类的引用指向子类的对象**。\n具体含义，还是在后面举个栗子来解释一下。\n2. 优点\n增加了软件开发的灵活性，简化了编程和修改过程。\n3. 实例\n首先我们定义了一个汽车接口`Car`，接口中有一个方法用来获取车的类型：\n    ```\n    public interface Car {\n\n        String getCarType();\n    }\n    ```\n 接下来，我们创建了兰博基尼，以及五菱宏光实现了这个接口。\n 五菱宏光：\n    ```\n    public class WuLingHongGuang implements Car {\n     @Override\n      public String getCarType() {\n         return \"五菱宏光\";\n        }\n    }\n    ```\n 兰博基尼：\n    ```\n    public class LanBoJiNi implements Car {\n        @Override\n        public String getCarType() {\n            return \"兰博基尼\";\n        }\n    }\n    ```\n 接下来，我们利用多态的特性，来创建并执行接下来的代码：\n    ```\n     public static void main(String[] args){\n         Car car1 = new LanBoJiNi();\n         Car car2 = new WuLingHongGuang();\n\n         System.out.println(\"车1的类型：\"+car1.getCarType());\n         System.out.println(\"车2的类型：\"+car2.getCarType());\n     }\n    ```\n 可以看到控制台的结果：\n    ```\n    车1的类型：兰博基尼\n    车2的类型：五菱宏光\n    ```\n\n4. 总结\n通过实例，再结合多态三要素：**继承、重写、父类的引用指向子类的对象**。\n兰博基尼和五菱宏光实现了`Car`接口(继承)，重写了`Car`中的`getCarType()`(重写)，接下来最关键的要素，我们用父类的引用，创建子类的对象。\n![](http://7xvzby.com1.z0.glb.clouddn.com/oo_duotai1.png)\n那么接下来，当你去调用`getCarType()`时，Java会首先调用子类中的`getCarType()`，而不是父类`Car`中的。\n其实这个实例，并不能帮你很好地理解多态。它只是很生硬地运用了多态的特性。在项目中运用多态非常的重要，这个需要自己实战才能好好理解。\n\n## 六大原则 ##\n六大原则包括：单一职责、开闭、里氏替换、依赖倒置、接口隔离、迪米特。接下来我们一个一个来理解这些原则的思想。\n\n\n### 单一职责原则(Single Responsibility Principle) ###\n1. 概念\n**就一个类而言，应该仅有一个引起它变化的原因。**\n非常容易理解的一个原则，并且非常重要！但这个原则是一个备受争议的原则，和别人争论这个原则，是屡试不爽的。\n![](http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/huxiangshanghai.jpg)\n因为单一职责原则划分界限并不总是那么清晰，更多的时候是根据个人经验来界定的。\n\n\n### 开闭原则(Open Close Principle) ###\n1. 概念\n**就一个类或方法而言，应该对于扩展是开放的，对于修改是关闭的。**\n软件也有自己的生命周期，越往后迭代，代码越多，冗余度也会随之提升，维护成本也就越来越高，可能一次不经意地bug修改就会破坏之前已经通过测试的代码。因此，当软件需要变化时，我们应该通过扩展的方式去实现，而不是通过修改原有代码来实现。\n当然，这是理想愿景，在实际开发中往往是**扩展**和**修改**同时存在的，因为再好的代码，终有一天也会有无法适应的场景出现。所以，我们要做的，就是在开发新东西的时候，尽可能地考虑多的场景，尽可能降低修改的可能性。并且当我们发现代码有“腐朽”的味道时，应该尽早地进行代码重构，使代码恢复到正常的“进化”过程。\n\n\n### 里氏替换原则(Liskov Substitution Principle) ###\n1. 概念\n**所有引用父类的地方，都可以透明的传递子类对象。**\n这个原则简直就是多态的完美体现。\n这个原则强调的是运用多态时，应该注子类的适配，使之无论传递任何子类对象，都能完美适应父类引用，不会产生异常。\n2. 实例\n我们继续引用多态的那个实例，在那个实例之上做些修改。\n现在我们是汽车制造商，你只需要告诉我品牌，我就可以生产出对应品牌的车。\n我们目前只能生产`兰博基尼`和`五菱宏光`，那么接下来我们改变一下main方法，生产一下这2辆车:\n    ```\n        public static void main(String[] args) {\n            //创建兰博基尼\n         System.out.println(\"生产了一辆：\" + createCar(new LanBoJiNi()));\n            //创建五菱宏光\n            System.out.println(\"生产了一辆：\" + createCar(new WuLingHongGuang()));\n        }\n\n\n        private static String createCar(Car car) {\n            return car.getCarType();\n        }\n\n    ```\n    上面当中，我们通过`createCar(Car car)`来创建了`兰博基尼`和`五菱宏光`，虽然`createCar()`要求的参数是`Car`，但是我们传入了子类对象`兰博基尼`和`五菱宏光`。并且这2个类都做了很好的适配(一个栗子而已，大家就认为其实我的兰博基尼其实是经过500道独特工序才制造出来的，五菱宏光是另外的500道工序)，无论我传入谁，都可以完美生产，不会产生异常。这就是里氏替换原则！\n    \n\n### 依赖倒置原则(Dependence Inversion Principle) ###\n1. 概念\n依赖倒置原则指代了一种特定的解耦形式，使得高层次的模块不依赖低层次的模块去实现细节。主要关键点有以下3点：\n- 高层模块不应该依赖低层模块，两者都应该依赖其抽象。\n- 抽象不应该依赖细节。\n- 细节应该依赖细节。\n\n    在Java语言中，抽象指的就是接口或抽象类，两者都是不能直接被实例化的；细节就是实现类，实现接口或者继承抽象类而产生的类就是细节，可以直接被实例化。高层模块就是抽象，底层模块就是具体实现类。一句话概括的话就是：**面向接口编程**。面向接口编程是面向对象的精髓之一。\n\n\n### 接口隔离原则(Interface Segregation Principles) ###\n1. 概念\n**类不应该依赖它不需要的接口。**\n另一种定义是：类依赖的接口都应该是最小单位。\n那么接口隔离原则其实就是要求我们将庞大、臃肿的接口按照某种规则，将其拆封成更小的、更具体的接口，这样客户端只需要依赖它需要的接口即可。\n接口隔离原则的目的就是使系统解耦，从而更容易进行重构、更改等操作。\n\n\n### 迪米特原则(Law of Demeter) ###\n1. 概念\n**一个对象应该对其他对象有最少的依赖。**\n通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少，类的内部如何实现与调用者或者依赖者没关系，调用者或依赖者只需要知道它需要的方法即可，其他的一概不用管。\n如果两个对象的关系过于密切，那么当一个对象发生变化时，另一个对象就会产生不可预估的风险。\n\n\n## 小结 ##\n在应用的开发过程中，最难的不是完成应用的开发工作，而是在后续的升级、维护过程中让应用系统能够拥抱变化。拥抱变化也就意味着在满足需求且不破坏系统稳定性的前提下保持高扩展性、高内聚、低耦合，在经历了各版本的变更之后依然保持清晰、灵活、稳定的系统架构。\n当然这是一个理想的情况，但我们必须要朝着这个方向去努力，那么遵循面向对象思想就是我们走向理想的第一步。\n\n## 感谢 ##\n1. 《Android源码设计模式解析与实战》 何红辉、关爱民 著\n2. [百度百科](https://baike.baidu.com/)\n\n> 有任何问题都可以联系我：mengyuanzz@126.com","source":"_posts/Java_understanding-OO.md","raw":"---\ntitle: 理解面向对象\ndate: 2017-05-08 15:10:09\ntags:\n   - Java\n   - 编程思想\t\n---\n面向对象是一种软件开发的方法，同类的还有面向过程。\n面向对象指的是在程序设计中采用Java的封装、继承、多态、六大原则特性来设计代码。\n它其实考验的是你审视代码的角度，运用这些特性，可以写出让人赏心悦目、简单易懂的代码。\n不运用这些特性当然也可以进行开发。不过代码的可读性、扩展性、灵活性等会大大下降，冗余度、维护成本等会大大上升。\n\n## 封装 ##\n1. 概念\n在Java中，封装就是将一些通用、常用的功能方法写到一个新类中，那么当我们用到这些功能时，直接去调用这个新类中的方法即可。这就像是有一个人A，他拥有一些技能，当我用到这些技能时，不需要自己去学习这些技能，只需要去找A即可。\n2. 优点\n提高代码的重用，减少重复代码，提高代码的可读性、方便理解。而且封装的思想也对应了Java中**一处编程，到处执行**的思想。\n3. 实例\n实例就不用多说了，平时写代码我们总会自己创建一个utils包，存放一些自己或者别人写的utils类。\n\n\n## 继承 ##\n1. 概念\n继承是从已有的类中派生出新的类，新的类能吸收已有类的数据属性和行为，并能扩展新的能力（来自[百度百科](http://baike.baidu.com/link?url=rbdZPwv35frNtyyl5BNnTXN2y9xCnTKldC3Bi4pyMySKda51KlD5Gk46IIUt1cNKrBiZoThiu0Rj76UmCJJXOFvv87kxMxSBYQtgrCbRA2u)）。\n这种官方语言太难讲，而且各位看官也看着费劲。我还是直接说自己的理解吧。\n首先继承的含义，就是一直我们口中所说的父类（基类）和子类。子类通过关键字`extends`继承父类，就可以拥有父类的非私有的属性和方法。\n**在Java中，继承是单一继承+多层继承的。**\n2. 优点\n提高代码的重用，减少重复的代码。增加了软件开发的灵活性。\n3. 缺点\n由于多层继承的存在，所以无限使用继承特性的话，会造成子类的过度冗余。\n\n## 多态 ##\n1. 概念\n多态指的是同一个方法，会因为对象的不同导致不同的结果。\n没错，就是这样！\n![](http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/heirenwenhao_2.jpg)\n多态的三要素一定要知道。这个东西理解了自然就记住了。\n**继承、重写、父类的引用指向子类的对象**。\n具体含义，还是在后面举个栗子来解释一下。\n2. 优点\n增加了软件开发的灵活性，简化了编程和修改过程。\n3. 实例\n首先我们定义了一个汽车接口`Car`，接口中有一个方法用来获取车的类型：\n    ```\n    public interface Car {\n\n        String getCarType();\n    }\n    ```\n 接下来，我们创建了兰博基尼，以及五菱宏光实现了这个接口。\n 五菱宏光：\n    ```\n    public class WuLingHongGuang implements Car {\n     @Override\n      public String getCarType() {\n         return \"五菱宏光\";\n        }\n    }\n    ```\n 兰博基尼：\n    ```\n    public class LanBoJiNi implements Car {\n        @Override\n        public String getCarType() {\n            return \"兰博基尼\";\n        }\n    }\n    ```\n 接下来，我们利用多态的特性，来创建并执行接下来的代码：\n    ```\n     public static void main(String[] args){\n         Car car1 = new LanBoJiNi();\n         Car car2 = new WuLingHongGuang();\n\n         System.out.println(\"车1的类型：\"+car1.getCarType());\n         System.out.println(\"车2的类型：\"+car2.getCarType());\n     }\n    ```\n 可以看到控制台的结果：\n    ```\n    车1的类型：兰博基尼\n    车2的类型：五菱宏光\n    ```\n\n4. 总结\n通过实例，再结合多态三要素：**继承、重写、父类的引用指向子类的对象**。\n兰博基尼和五菱宏光实现了`Car`接口(继承)，重写了`Car`中的`getCarType()`(重写)，接下来最关键的要素，我们用父类的引用，创建子类的对象。\n![](http://7xvzby.com1.z0.glb.clouddn.com/oo_duotai1.png)\n那么接下来，当你去调用`getCarType()`时，Java会首先调用子类中的`getCarType()`，而不是父类`Car`中的。\n其实这个实例，并不能帮你很好地理解多态。它只是很生硬地运用了多态的特性。在项目中运用多态非常的重要，这个需要自己实战才能好好理解。\n\n## 六大原则 ##\n六大原则包括：单一职责、开闭、里氏替换、依赖倒置、接口隔离、迪米特。接下来我们一个一个来理解这些原则的思想。\n\n\n### 单一职责原则(Single Responsibility Principle) ###\n1. 概念\n**就一个类而言，应该仅有一个引起它变化的原因。**\n非常容易理解的一个原则，并且非常重要！但这个原则是一个备受争议的原则，和别人争论这个原则，是屡试不爽的。\n![](http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/huxiangshanghai.jpg)\n因为单一职责原则划分界限并不总是那么清晰，更多的时候是根据个人经验来界定的。\n\n\n### 开闭原则(Open Close Principle) ###\n1. 概念\n**就一个类或方法而言，应该对于扩展是开放的，对于修改是关闭的。**\n软件也有自己的生命周期，越往后迭代，代码越多，冗余度也会随之提升，维护成本也就越来越高，可能一次不经意地bug修改就会破坏之前已经通过测试的代码。因此，当软件需要变化时，我们应该通过扩展的方式去实现，而不是通过修改原有代码来实现。\n当然，这是理想愿景，在实际开发中往往是**扩展**和**修改**同时存在的，因为再好的代码，终有一天也会有无法适应的场景出现。所以，我们要做的，就是在开发新东西的时候，尽可能地考虑多的场景，尽可能降低修改的可能性。并且当我们发现代码有“腐朽”的味道时，应该尽早地进行代码重构，使代码恢复到正常的“进化”过程。\n\n\n### 里氏替换原则(Liskov Substitution Principle) ###\n1. 概念\n**所有引用父类的地方，都可以透明的传递子类对象。**\n这个原则简直就是多态的完美体现。\n这个原则强调的是运用多态时，应该注子类的适配，使之无论传递任何子类对象，都能完美适应父类引用，不会产生异常。\n2. 实例\n我们继续引用多态的那个实例，在那个实例之上做些修改。\n现在我们是汽车制造商，你只需要告诉我品牌，我就可以生产出对应品牌的车。\n我们目前只能生产`兰博基尼`和`五菱宏光`，那么接下来我们改变一下main方法，生产一下这2辆车:\n    ```\n        public static void main(String[] args) {\n            //创建兰博基尼\n         System.out.println(\"生产了一辆：\" + createCar(new LanBoJiNi()));\n            //创建五菱宏光\n            System.out.println(\"生产了一辆：\" + createCar(new WuLingHongGuang()));\n        }\n\n\n        private static String createCar(Car car) {\n            return car.getCarType();\n        }\n\n    ```\n    上面当中，我们通过`createCar(Car car)`来创建了`兰博基尼`和`五菱宏光`，虽然`createCar()`要求的参数是`Car`，但是我们传入了子类对象`兰博基尼`和`五菱宏光`。并且这2个类都做了很好的适配(一个栗子而已，大家就认为其实我的兰博基尼其实是经过500道独特工序才制造出来的，五菱宏光是另外的500道工序)，无论我传入谁，都可以完美生产，不会产生异常。这就是里氏替换原则！\n    \n\n### 依赖倒置原则(Dependence Inversion Principle) ###\n1. 概念\n依赖倒置原则指代了一种特定的解耦形式，使得高层次的模块不依赖低层次的模块去实现细节。主要关键点有以下3点：\n- 高层模块不应该依赖低层模块，两者都应该依赖其抽象。\n- 抽象不应该依赖细节。\n- 细节应该依赖细节。\n\n    在Java语言中，抽象指的就是接口或抽象类，两者都是不能直接被实例化的；细节就是实现类，实现接口或者继承抽象类而产生的类就是细节，可以直接被实例化。高层模块就是抽象，底层模块就是具体实现类。一句话概括的话就是：**面向接口编程**。面向接口编程是面向对象的精髓之一。\n\n\n### 接口隔离原则(Interface Segregation Principles) ###\n1. 概念\n**类不应该依赖它不需要的接口。**\n另一种定义是：类依赖的接口都应该是最小单位。\n那么接口隔离原则其实就是要求我们将庞大、臃肿的接口按照某种规则，将其拆封成更小的、更具体的接口，这样客户端只需要依赖它需要的接口即可。\n接口隔离原则的目的就是使系统解耦，从而更容易进行重构、更改等操作。\n\n\n### 迪米特原则(Law of Demeter) ###\n1. 概念\n**一个对象应该对其他对象有最少的依赖。**\n通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少，类的内部如何实现与调用者或者依赖者没关系，调用者或依赖者只需要知道它需要的方法即可，其他的一概不用管。\n如果两个对象的关系过于密切，那么当一个对象发生变化时，另一个对象就会产生不可预估的风险。\n\n\n## 小结 ##\n在应用的开发过程中，最难的不是完成应用的开发工作，而是在后续的升级、维护过程中让应用系统能够拥抱变化。拥抱变化也就意味着在满足需求且不破坏系统稳定性的前提下保持高扩展性、高内聚、低耦合，在经历了各版本的变更之后依然保持清晰、灵活、稳定的系统架构。\n当然这是一个理想的情况，但我们必须要朝着这个方向去努力，那么遵循面向对象思想就是我们走向理想的第一步。\n\n## 感谢 ##\n1. 《Android源码设计模式解析与实战》 何红辉、关爱民 著\n2. [百度百科](https://baike.baidu.com/)\n\n> 有任何问题都可以联系我：mengyuanzz@126.com","slug":"Java_understanding-OO","published":1,"updated":"2018-08-24T09:36:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7sxdx50016hnnfygc3ze1h","content":"<p>面向对象是一种软件开发的方法，同类的还有面向过程。<br>面向对象指的是在程序设计中采用Java的封装、继承、多态、六大原则特性来设计代码。<br>它其实考验的是你审视代码的角度，运用这些特性，可以写出让人赏心悦目、简单易懂的代码。<br>不运用这些特性当然也可以进行开发。不过代码的可读性、扩展性、灵活性等会大大下降，冗余度、维护成本等会大大上升。</p>\n<h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><ol>\n<li>概念<br>在Java中，封装就是将一些通用、常用的功能方法写到一个新类中，那么当我们用到这些功能时，直接去调用这个新类中的方法即可。这就像是有一个人A，他拥有一些技能，当我用到这些技能时，不需要自己去学习这些技能，只需要去找A即可。</li>\n<li>优点<br>提高代码的重用，减少重复代码，提高代码的可读性、方便理解。而且封装的思想也对应了Java中<strong>一处编程，到处执行</strong>的思想。</li>\n<li>实例<br>实例就不用多说了，平时写代码我们总会自己创建一个utils包，存放一些自己或者别人写的utils类。</li>\n</ol>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><ol>\n<li>概念<br>继承是从已有的类中派生出新的类，新的类能吸收已有类的数据属性和行为，并能扩展新的能力（来自<a href=\"http://baike.baidu.com/link?url=rbdZPwv35frNtyyl5BNnTXN2y9xCnTKldC3Bi4pyMySKda51KlD5Gk46IIUt1cNKrBiZoThiu0Rj76UmCJJXOFvv87kxMxSBYQtgrCbRA2u\" target=\"_blank\" rel=\"noopener\">百度百科</a>）。<br>这种官方语言太难讲，而且各位看官也看着费劲。我还是直接说自己的理解吧。<br>首先继承的含义，就是一直我们口中所说的父类（基类）和子类。子类通过关键字<code>extends</code>继承父类，就可以拥有父类的非私有的属性和方法。<br><strong>在Java中，继承是单一继承+多层继承的。</strong></li>\n<li>优点<br>提高代码的重用，减少重复的代码。增加了软件开发的灵活性。</li>\n<li>缺点<br>由于多层继承的存在，所以无限使用继承特性的话，会造成子类的过度冗余。</li>\n</ol>\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><ol>\n<li>概念<br>多态指的是同一个方法，会因为对象的不同导致不同的结果。<br>没错，就是这样！<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/heirenwenhao_2.jpg\" alt=\"\"><br>多态的三要素一定要知道。这个东西理解了自然就记住了。<br><strong>继承、重写、父类的引用指向子类的对象</strong>。<br>具体含义，还是在后面举个栗子来解释一下。</li>\n<li>优点<br>增加了软件开发的灵活性，简化了编程和修改过程。</li>\n<li><p>实例<br>首先我们定义了一个汽车接口<code>Car</code>，接口中有一个方法用来获取车的类型：</p>\n <figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public<span class=\"built_in\"> interface </span>Car &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String getCarType();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来，我们创建了兰博基尼，以及五菱宏光实现了这个接口。<br>五菱宏光：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WuLingHongGuang</span> <span class=\"keyword\">implements</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getCarType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"string\">\"五菱宏光\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>兰博基尼：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LanBoJiNi</span> <span class=\"keyword\">implements</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getCarType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"兰博基尼\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来，我们利用多态的特性，来创建并执行接下来的代码：</p>\n <figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args)&#123;</span><br><span class=\"line\">    Car car1 = <span class=\"keyword\">new</span> LanBoJiNi();</span><br><span class=\"line\">    Car car2 = <span class=\"keyword\">new</span> WuLingHongGuang();</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"车1的类型：\"</span>+car1.getCarType());</span><br><span class=\"line\">    System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"车2的类型：\"</span>+car2.getCarType());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到控制台的结果：</p>\n <figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">车<span class=\"number\">1</span>的类型：兰博基尼</span><br><span class=\"line\">车<span class=\"number\">2</span>的类型：五菱宏光</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结<br>通过实例，再结合多态三要素：<strong>继承、重写、父类的引用指向子类的对象</strong>。<br>兰博基尼和五菱宏光实现了<code>Car</code>接口(继承)，重写了<code>Car</code>中的<code>getCarType()</code>(重写)，接下来最关键的要素，我们用父类的引用，创建子类的对象。<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/oo_duotai1.png\" alt=\"\"><br>那么接下来，当你去调用<code>getCarType()</code>时，Java会首先调用子类中的<code>getCarType()</code>，而不是父类<code>Car</code>中的。<br>其实这个实例，并不能帮你很好地理解多态。它只是很生硬地运用了多态的特性。在项目中运用多态非常的重要，这个需要自己实战才能好好理解。</p>\n</li>\n</ol>\n<h2 id=\"六大原则\"><a href=\"#六大原则\" class=\"headerlink\" title=\"六大原则\"></a>六大原则</h2><p>六大原则包括：单一职责、开闭、里氏替换、依赖倒置、接口隔离、迪米特。接下来我们一个一个来理解这些原则的思想。</p>\n<h3 id=\"单一职责原则-Single-Responsibility-Principle\"><a href=\"#单一职责原则-Single-Responsibility-Principle\" class=\"headerlink\" title=\"单一职责原则(Single Responsibility Principle)\"></a>单一职责原则(Single Responsibility Principle)</h3><ol>\n<li>概念<br><strong>就一个类而言，应该仅有一个引起它变化的原因。</strong><br>非常容易理解的一个原则，并且非常重要！但这个原则是一个备受争议的原则，和别人争论这个原则，是屡试不爽的。<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/huxiangshanghai.jpg\" alt=\"\"><br>因为单一职责原则划分界限并不总是那么清晰，更多的时候是根据个人经验来界定的。</li>\n</ol>\n<h3 id=\"开闭原则-Open-Close-Principle\"><a href=\"#开闭原则-Open-Close-Principle\" class=\"headerlink\" title=\"开闭原则(Open Close Principle)\"></a>开闭原则(Open Close Principle)</h3><ol>\n<li>概念<br><strong>就一个类或方法而言，应该对于扩展是开放的，对于修改是关闭的。</strong><br>软件也有自己的生命周期，越往后迭代，代码越多，冗余度也会随之提升，维护成本也就越来越高，可能一次不经意地bug修改就会破坏之前已经通过测试的代码。因此，当软件需要变化时，我们应该通过扩展的方式去实现，而不是通过修改原有代码来实现。<br>当然，这是理想愿景，在实际开发中往往是<strong>扩展</strong>和<strong>修改</strong>同时存在的，因为再好的代码，终有一天也会有无法适应的场景出现。所以，我们要做的，就是在开发新东西的时候，尽可能地考虑多的场景，尽可能降低修改的可能性。并且当我们发现代码有“腐朽”的味道时，应该尽早地进行代码重构，使代码恢复到正常的“进化”过程。</li>\n</ol>\n<h3 id=\"里氏替换原则-Liskov-Substitution-Principle\"><a href=\"#里氏替换原则-Liskov-Substitution-Principle\" class=\"headerlink\" title=\"里氏替换原则(Liskov Substitution Principle)\"></a>里氏替换原则(Liskov Substitution Principle)</h3><ol>\n<li>概念<br><strong>所有引用父类的地方，都可以透明的传递子类对象。</strong><br>这个原则简直就是多态的完美体现。<br>这个原则强调的是运用多态时，应该注子类的适配，使之无论传递任何子类对象，都能完美适应父类引用，不会产生异常。</li>\n<li><p>实例<br>我们继续引用多态的那个实例，在那个实例之上做些修改。<br>现在我们是汽车制造商，你只需要告诉我品牌，我就可以生产出对应品牌的车。<br>我们目前只能生产<code>兰博基尼</code>和<code>五菱宏光</code>，那么接下来我们改变一下main方法，生产一下这2辆车:</p>\n <figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建兰博基尼</span></span><br><span class=\"line\"> System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"生产了一辆：\"</span> + createCar(<span class=\"keyword\">new</span> LanBoJiNi()));</span><br><span class=\"line\">    <span class=\"comment\">//创建五菱宏光</span></span><br><span class=\"line\">    System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"生产了一辆：\"</span> + createCar(<span class=\"keyword\">new</span> WuLingHongGuang()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> createCar(Car car) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> car.getCarType();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 上面当中，我们通过<code>createCar(Car car)</code>来创建了<code>兰博基尼</code>和<code>五菱宏光</code>，虽然<code>createCar()</code>要求的参数是<code>Car</code>，但是我们传入了子类对象<code>兰博基尼</code>和<code>五菱宏光</code>。并且这2个类都做了很好的适配(一个栗子而已，大家就认为其实我的兰博基尼其实是经过500道独特工序才制造出来的，五菱宏光是另外的500道工序)，无论我传入谁，都可以完美生产，不会产生异常。这就是里氏替换原则！</p>\n</li>\n</ol>\n<h3 id=\"依赖倒置原则-Dependence-Inversion-Principle\"><a href=\"#依赖倒置原则-Dependence-Inversion-Principle\" class=\"headerlink\" title=\"依赖倒置原则(Dependence Inversion Principle)\"></a>依赖倒置原则(Dependence Inversion Principle)</h3><ol>\n<li>概念<br>依赖倒置原则指代了一种特定的解耦形式，使得高层次的模块不依赖低层次的模块去实现细节。主要关键点有以下3点：</li>\n</ol>\n<ul>\n<li>高层模块不应该依赖低层模块，两者都应该依赖其抽象。</li>\n<li>抽象不应该依赖细节。</li>\n<li><p>细节应该依赖细节。</p>\n<p>  在Java语言中，抽象指的就是接口或抽象类，两者都是不能直接被实例化的；细节就是实现类，实现接口或者继承抽象类而产生的类就是细节，可以直接被实例化。高层模块就是抽象，底层模块就是具体实现类。一句话概括的话就是：<strong>面向接口编程</strong>。面向接口编程是面向对象的精髓之一。</p>\n</li>\n</ul>\n<h3 id=\"接口隔离原则-Interface-Segregation-Principles\"><a href=\"#接口隔离原则-Interface-Segregation-Principles\" class=\"headerlink\" title=\"接口隔离原则(Interface Segregation Principles)\"></a>接口隔离原则(Interface Segregation Principles)</h3><ol>\n<li>概念<br><strong>类不应该依赖它不需要的接口。</strong><br>另一种定义是：类依赖的接口都应该是最小单位。<br>那么接口隔离原则其实就是要求我们将庞大、臃肿的接口按照某种规则，将其拆封成更小的、更具体的接口，这样客户端只需要依赖它需要的接口即可。<br>接口隔离原则的目的就是使系统解耦，从而更容易进行重构、更改等操作。</li>\n</ol>\n<h3 id=\"迪米特原则-Law-of-Demeter\"><a href=\"#迪米特原则-Law-of-Demeter\" class=\"headerlink\" title=\"迪米特原则(Law of Demeter)\"></a>迪米特原则(Law of Demeter)</h3><ol>\n<li>概念<br><strong>一个对象应该对其他对象有最少的依赖。</strong><br>通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少，类的内部如何实现与调用者或者依赖者没关系，调用者或依赖者只需要知道它需要的方法即可，其他的一概不用管。<br>如果两个对象的关系过于密切，那么当一个对象发生变化时，另一个对象就会产生不可预估的风险。</li>\n</ol>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>在应用的开发过程中，最难的不是完成应用的开发工作，而是在后续的升级、维护过程中让应用系统能够拥抱变化。拥抱变化也就意味着在满足需求且不破坏系统稳定性的前提下保持高扩展性、高内聚、低耦合，在经历了各版本的变更之后依然保持清晰、灵活、稳定的系统架构。<br>当然这是一个理想的情况，但我们必须要朝着这个方向去努力，那么遵循面向对象思想就是我们走向理想的第一步。</p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><ol>\n<li>《Android源码设计模式解析与实战》 何红辉、关爱民 著</li>\n<li><a href=\"https://baike.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度百科</a></li>\n</ol>\n<blockquote>\n<p>有任何问题都可以联系我：<a href=\"mailto:mengyuanzz@126.com\" target=\"_blank\" rel=\"noopener\">mengyuanzz@126.com</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>面向对象是一种软件开发的方法，同类的还有面向过程。<br>面向对象指的是在程序设计中采用Java的封装、继承、多态、六大原则特性来设计代码。<br>它其实考验的是你审视代码的角度，运用这些特性，可以写出让人赏心悦目、简单易懂的代码。<br>不运用这些特性当然也可以进行开发。不过代码的可读性、扩展性、灵活性等会大大下降，冗余度、维护成本等会大大上升。</p>\n<h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><ol>\n<li>概念<br>在Java中，封装就是将一些通用、常用的功能方法写到一个新类中，那么当我们用到这些功能时，直接去调用这个新类中的方法即可。这就像是有一个人A，他拥有一些技能，当我用到这些技能时，不需要自己去学习这些技能，只需要去找A即可。</li>\n<li>优点<br>提高代码的重用，减少重复代码，提高代码的可读性、方便理解。而且封装的思想也对应了Java中<strong>一处编程，到处执行</strong>的思想。</li>\n<li>实例<br>实例就不用多说了，平时写代码我们总会自己创建一个utils包，存放一些自己或者别人写的utils类。</li>\n</ol>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><ol>\n<li>概念<br>继承是从已有的类中派生出新的类，新的类能吸收已有类的数据属性和行为，并能扩展新的能力（来自<a href=\"http://baike.baidu.com/link?url=rbdZPwv35frNtyyl5BNnTXN2y9xCnTKldC3Bi4pyMySKda51KlD5Gk46IIUt1cNKrBiZoThiu0Rj76UmCJJXOFvv87kxMxSBYQtgrCbRA2u\" target=\"_blank\" rel=\"noopener\">百度百科</a>）。<br>这种官方语言太难讲，而且各位看官也看着费劲。我还是直接说自己的理解吧。<br>首先继承的含义，就是一直我们口中所说的父类（基类）和子类。子类通过关键字<code>extends</code>继承父类，就可以拥有父类的非私有的属性和方法。<br><strong>在Java中，继承是单一继承+多层继承的。</strong></li>\n<li>优点<br>提高代码的重用，减少重复的代码。增加了软件开发的灵活性。</li>\n<li>缺点<br>由于多层继承的存在，所以无限使用继承特性的话，会造成子类的过度冗余。</li>\n</ol>\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><ol>\n<li>概念<br>多态指的是同一个方法，会因为对象的不同导致不同的结果。<br>没错，就是这样！<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/heirenwenhao_2.jpg\" alt=\"\"><br>多态的三要素一定要知道。这个东西理解了自然就记住了。<br><strong>继承、重写、父类的引用指向子类的对象</strong>。<br>具体含义，还是在后面举个栗子来解释一下。</li>\n<li>优点<br>增加了软件开发的灵活性，简化了编程和修改过程。</li>\n<li><p>实例<br>首先我们定义了一个汽车接口<code>Car</code>，接口中有一个方法用来获取车的类型：</p>\n <figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public<span class=\"built_in\"> interface </span>Car &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String getCarType();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来，我们创建了兰博基尼，以及五菱宏光实现了这个接口。<br>五菱宏光：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WuLingHongGuang</span> <span class=\"keyword\">implements</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getCarType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"string\">\"五菱宏光\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>兰博基尼：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LanBoJiNi</span> <span class=\"keyword\">implements</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getCarType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"兰博基尼\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来，我们利用多态的特性，来创建并执行接下来的代码：</p>\n <figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args)&#123;</span><br><span class=\"line\">    Car car1 = <span class=\"keyword\">new</span> LanBoJiNi();</span><br><span class=\"line\">    Car car2 = <span class=\"keyword\">new</span> WuLingHongGuang();</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"车1的类型：\"</span>+car1.getCarType());</span><br><span class=\"line\">    System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"车2的类型：\"</span>+car2.getCarType());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到控制台的结果：</p>\n <figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">车<span class=\"number\">1</span>的类型：兰博基尼</span><br><span class=\"line\">车<span class=\"number\">2</span>的类型：五菱宏光</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结<br>通过实例，再结合多态三要素：<strong>继承、重写、父类的引用指向子类的对象</strong>。<br>兰博基尼和五菱宏光实现了<code>Car</code>接口(继承)，重写了<code>Car</code>中的<code>getCarType()</code>(重写)，接下来最关键的要素，我们用父类的引用，创建子类的对象。<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/oo_duotai1.png\" alt=\"\"><br>那么接下来，当你去调用<code>getCarType()</code>时，Java会首先调用子类中的<code>getCarType()</code>，而不是父类<code>Car</code>中的。<br>其实这个实例，并不能帮你很好地理解多态。它只是很生硬地运用了多态的特性。在项目中运用多态非常的重要，这个需要自己实战才能好好理解。</p>\n</li>\n</ol>\n<h2 id=\"六大原则\"><a href=\"#六大原则\" class=\"headerlink\" title=\"六大原则\"></a>六大原则</h2><p>六大原则包括：单一职责、开闭、里氏替换、依赖倒置、接口隔离、迪米特。接下来我们一个一个来理解这些原则的思想。</p>\n<h3 id=\"单一职责原则-Single-Responsibility-Principle\"><a href=\"#单一职责原则-Single-Responsibility-Principle\" class=\"headerlink\" title=\"单一职责原则(Single Responsibility Principle)\"></a>单一职责原则(Single Responsibility Principle)</h3><ol>\n<li>概念<br><strong>就一个类而言，应该仅有一个引起它变化的原因。</strong><br>非常容易理解的一个原则，并且非常重要！但这个原则是一个备受争议的原则，和别人争论这个原则，是屡试不爽的。<br><img src=\"http://7xvzby.com1.z0.glb.clouddn.com/gaoxiao/huxiangshanghai.jpg\" alt=\"\"><br>因为单一职责原则划分界限并不总是那么清晰，更多的时候是根据个人经验来界定的。</li>\n</ol>\n<h3 id=\"开闭原则-Open-Close-Principle\"><a href=\"#开闭原则-Open-Close-Principle\" class=\"headerlink\" title=\"开闭原则(Open Close Principle)\"></a>开闭原则(Open Close Principle)</h3><ol>\n<li>概念<br><strong>就一个类或方法而言，应该对于扩展是开放的，对于修改是关闭的。</strong><br>软件也有自己的生命周期，越往后迭代，代码越多，冗余度也会随之提升，维护成本也就越来越高，可能一次不经意地bug修改就会破坏之前已经通过测试的代码。因此，当软件需要变化时，我们应该通过扩展的方式去实现，而不是通过修改原有代码来实现。<br>当然，这是理想愿景，在实际开发中往往是<strong>扩展</strong>和<strong>修改</strong>同时存在的，因为再好的代码，终有一天也会有无法适应的场景出现。所以，我们要做的，就是在开发新东西的时候，尽可能地考虑多的场景，尽可能降低修改的可能性。并且当我们发现代码有“腐朽”的味道时，应该尽早地进行代码重构，使代码恢复到正常的“进化”过程。</li>\n</ol>\n<h3 id=\"里氏替换原则-Liskov-Substitution-Principle\"><a href=\"#里氏替换原则-Liskov-Substitution-Principle\" class=\"headerlink\" title=\"里氏替换原则(Liskov Substitution Principle)\"></a>里氏替换原则(Liskov Substitution Principle)</h3><ol>\n<li>概念<br><strong>所有引用父类的地方，都可以透明的传递子类对象。</strong><br>这个原则简直就是多态的完美体现。<br>这个原则强调的是运用多态时，应该注子类的适配，使之无论传递任何子类对象，都能完美适应父类引用，不会产生异常。</li>\n<li><p>实例<br>我们继续引用多态的那个实例，在那个实例之上做些修改。<br>现在我们是汽车制造商，你只需要告诉我品牌，我就可以生产出对应品牌的车。<br>我们目前只能生产<code>兰博基尼</code>和<code>五菱宏光</code>，那么接下来我们改变一下main方法，生产一下这2辆车:</p>\n <figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建兰博基尼</span></span><br><span class=\"line\"> System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"生产了一辆：\"</span> + createCar(<span class=\"keyword\">new</span> LanBoJiNi()));</span><br><span class=\"line\">    <span class=\"comment\">//创建五菱宏光</span></span><br><span class=\"line\">    System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"生产了一辆：\"</span> + createCar(<span class=\"keyword\">new</span> WuLingHongGuang()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> createCar(Car car) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> car.getCarType();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 上面当中，我们通过<code>createCar(Car car)</code>来创建了<code>兰博基尼</code>和<code>五菱宏光</code>，虽然<code>createCar()</code>要求的参数是<code>Car</code>，但是我们传入了子类对象<code>兰博基尼</code>和<code>五菱宏光</code>。并且这2个类都做了很好的适配(一个栗子而已，大家就认为其实我的兰博基尼其实是经过500道独特工序才制造出来的，五菱宏光是另外的500道工序)，无论我传入谁，都可以完美生产，不会产生异常。这就是里氏替换原则！</p>\n</li>\n</ol>\n<h3 id=\"依赖倒置原则-Dependence-Inversion-Principle\"><a href=\"#依赖倒置原则-Dependence-Inversion-Principle\" class=\"headerlink\" title=\"依赖倒置原则(Dependence Inversion Principle)\"></a>依赖倒置原则(Dependence Inversion Principle)</h3><ol>\n<li>概念<br>依赖倒置原则指代了一种特定的解耦形式，使得高层次的模块不依赖低层次的模块去实现细节。主要关键点有以下3点：</li>\n</ol>\n<ul>\n<li>高层模块不应该依赖低层模块，两者都应该依赖其抽象。</li>\n<li>抽象不应该依赖细节。</li>\n<li><p>细节应该依赖细节。</p>\n<p>  在Java语言中，抽象指的就是接口或抽象类，两者都是不能直接被实例化的；细节就是实现类，实现接口或者继承抽象类而产生的类就是细节，可以直接被实例化。高层模块就是抽象，底层模块就是具体实现类。一句话概括的话就是：<strong>面向接口编程</strong>。面向接口编程是面向对象的精髓之一。</p>\n</li>\n</ul>\n<h3 id=\"接口隔离原则-Interface-Segregation-Principles\"><a href=\"#接口隔离原则-Interface-Segregation-Principles\" class=\"headerlink\" title=\"接口隔离原则(Interface Segregation Principles)\"></a>接口隔离原则(Interface Segregation Principles)</h3><ol>\n<li>概念<br><strong>类不应该依赖它不需要的接口。</strong><br>另一种定义是：类依赖的接口都应该是最小单位。<br>那么接口隔离原则其实就是要求我们将庞大、臃肿的接口按照某种规则，将其拆封成更小的、更具体的接口，这样客户端只需要依赖它需要的接口即可。<br>接口隔离原则的目的就是使系统解耦，从而更容易进行重构、更改等操作。</li>\n</ol>\n<h3 id=\"迪米特原则-Law-of-Demeter\"><a href=\"#迪米特原则-Law-of-Demeter\" class=\"headerlink\" title=\"迪米特原则(Law of Demeter)\"></a>迪米特原则(Law of Demeter)</h3><ol>\n<li>概念<br><strong>一个对象应该对其他对象有最少的依赖。</strong><br>通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少，类的内部如何实现与调用者或者依赖者没关系，调用者或依赖者只需要知道它需要的方法即可，其他的一概不用管。<br>如果两个对象的关系过于密切，那么当一个对象发生变化时，另一个对象就会产生不可预估的风险。</li>\n</ol>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>在应用的开发过程中，最难的不是完成应用的开发工作，而是在后续的升级、维护过程中让应用系统能够拥抱变化。拥抱变化也就意味着在满足需求且不破坏系统稳定性的前提下保持高扩展性、高内聚、低耦合，在经历了各版本的变更之后依然保持清晰、灵活、稳定的系统架构。<br>当然这是一个理想的情况，但我们必须要朝着这个方向去努力，那么遵循面向对象思想就是我们走向理想的第一步。</p>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><ol>\n<li>《Android源码设计模式解析与实战》 何红辉、关爱民 著</li>\n<li><a href=\"https://baike.baidu.com/\" target=\"_blank\" rel=\"noopener\">百度百科</a></li>\n</ol>\n<blockquote>\n<p>有任何问题都可以联系我：<a href=\"mailto:mengyuanzz@126.com\" target=\"_blank\" rel=\"noopener\">mengyuanzz@126.com</a></p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjl7sxdvq0006hnnfhmy18k07","tag_id":"cjl7sxdv10003hnnfvryio106","_id":"cjl7sxdvw0009hnnf8a3lbnl2"},{"post_id":"cjl7sxdvu0008hnnfbnm19g9c","tag_id":"cjl7sxdv10003hnnfvryio106","_id":"cjl7sxdw0000chnnfygs23b0s"},{"post_id":"cjl7sxdul0000hnnf97c3net2","tag_id":"cjl7sxdv10003hnnfvryio106","_id":"cjl7sxdw3000ehnnfzaze8wua"},{"post_id":"cjl7sxdul0000hnnf97c3net2","tag_id":"cjl7sxdvt0007hnnfyssc5jt3","_id":"cjl7sxdw6000hhnnfbv19i24a"},{"post_id":"cjl7sxduw0002hnnfs523eyaf","tag_id":"cjl7sxdv10003hnnfvryio106","_id":"cjl7sxdw9000jhnnferkka7zs"},{"post_id":"cjl7sxdv50004hnnfrhfj2sql","tag_id":"cjl7sxdv10003hnnfvryio106","_id":"cjl7sxdwk000qhnnfiow3rz2w"},{"post_id":"cjl7sxdv50004hnnfrhfj2sql","tag_id":"cjl7sxdwc000lhnnf6iywhj35","_id":"cjl7sxdwn000shnnf3zi3ewpm"},{"post_id":"cjl7sxdvc0005hnnffo54t7lr","tag_id":"cjl7sxdv10003hnnfvryio106","_id":"cjl7sxdwr000vhnnfoklqne37"},{"post_id":"cjl7sxdvc0005hnnffo54t7lr","tag_id":"cjl7sxdwi000ohnnf1f4iehjg","_id":"cjl7sxdwu000xhnnfhltkehzu"},{"post_id":"cjl7sxdvw000ahnnftw4roclh","tag_id":"cjl7sxdwn000thnnf257cuyzi","_id":"cjl7sxdww0010hnnfyeylo4us"},{"post_id":"cjl7sxdvw000ahnnftw4roclh","tag_id":"cjl7sxdv10003hnnfvryio106","_id":"cjl7sxdwz0012hnnf0c9wpz3b"},{"post_id":"cjl7sxdvw000ahnnftw4roclh","tag_id":"cjl7sxdvt0007hnnfyssc5jt3","_id":"cjl7sxdx30015hnnfel9oxrey"},{"post_id":"cjl7sxdw0000dhnnfkbec52g0","tag_id":"cjl7sxdwn000thnnf257cuyzi","_id":"cjl7sxdx70017hnnf096mdxxj"},{"post_id":"cjl7sxdx50016hnnfygc3ze1h","tag_id":"cjl7sxdwi000ohnnf1f4iehjg","_id":"cjl7sxdx90019hnnfnpmefx34"},{"post_id":"cjl7sxdx50016hnnfygc3ze1h","tag_id":"cjl7sxdwn000thnnf257cuyzi","_id":"cjl7sxdx9001ahnnfgzpbsarz"},{"post_id":"cjl7sxdw3000fhnnfgorpk301","tag_id":"cjl7sxdwn000thnnf257cuyzi","_id":"cjl7sxdxa001chnnfblamf2z1"},{"post_id":"cjl7sxdw6000ihnnfck4kl042","tag_id":"cjl7sxdwn000thnnf257cuyzi","_id":"cjl7sxdxa001dhnnf4avwh1kc"},{"post_id":"cjl7sxdw9000khnnfv88hdwh8","tag_id":"cjl7sxdwn000thnnf257cuyzi","_id":"cjl7sxdxa001fhnnfc6tpr9fa"},{"post_id":"cjl7sxdwd000mhnnft658asyb","tag_id":"cjl7sxdwn000thnnf257cuyzi","_id":"cjl7sxdxb001hhnnfye5ugj73"},{"post_id":"cjl7sxdwg000nhnnf99tj4x84","tag_id":"cjl7sxdwn000thnnf257cuyzi","_id":"cjl7sxdxc001jhnnf1gptvdbt"},{"post_id":"cjl7sxdwj000phnnfsooinq9b","tag_id":"cjl7sxdwn000thnnf257cuyzi","_id":"cjl7sxdxc001lhnnfn2hx18h9"},{"post_id":"cjl7sxdwl000rhnnfar9r8yga","tag_id":"cjl7sxdwn000thnnf257cuyzi","_id":"cjl7sxdxd001nhnnfmijqii83"},{"post_id":"cjl7sxdwn000uhnnfjobck834","tag_id":"cjl7sxdwn000thnnf257cuyzi","_id":"cjl7sxdxe001phnnf93sd1zmf"},{"post_id":"cjl7sxdwr000whnnflmjfr1l9","tag_id":"cjl7sxdxd001ohnnfkkmwfy9s","_id":"cjl7sxdxe001rhnnfwqx3l82m"},{"post_id":"cjl7sxdwu000yhnnfhftnadh1","tag_id":"cjl7sxdxe001qhnnfqpx0ye2c","_id":"cjl7sxdxg001uhnnfr8bvsbe1"},{"post_id":"cjl7sxdwu000yhnnfhftnadh1","tag_id":"cjl7sxdxf001shnnfie74axce","_id":"cjl7sxdxg001vhnnfavrrvizd"},{"post_id":"cjl7sxdx00013hnnfoqjxcyce","tag_id":"cjl7sxdxe001qhnnfqpx0ye2c","_id":"cjl7sxdxh001xhnnfiw8zm8ri"},{"post_id":"cjl7sxdx00013hnnfoqjxcyce","tag_id":"cjl7sxdxf001shnnfie74axce","_id":"cjl7sxdxi001yhnnfyg1rzlib"}],"Tag":[{"name":"Android","_id":"cjl7sxdv10003hnnfvryio106"},{"name":"效果","_id":"cjl7sxdvt0007hnnfyssc5jt3"},{"name":"原理","_id":"cjl7sxdwc000lhnnf6iywhj35"},{"name":"Java","_id":"cjl7sxdwi000ohnnf1f4iehjg"},{"name":"编程思想","_id":"cjl7sxdwn000thnnf257cuyzi"},{"name":"Google","_id":"cjl7sxdxd001ohnnfkkmwfy9s"},{"name":"服务器","_id":"cjl7sxdxe001qhnnfqpx0ye2c"},{"name":"SSH","_id":"cjl7sxdxf001shnnfie74axce"}]}}